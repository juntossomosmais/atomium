/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Mode, TextFieldTypes } from "@ionic/core";
export { Mode, TextFieldTypes } from "@ionic/core";
export namespace Components {
    interface AtoButton {
        "color": 'primary' | 'secondary';
        "disabled"?: boolean;
        "expand"?: 'block' | 'full';
        "fill": 'clear' | 'outline' | 'solid';
        "mode": Mode;
        "shape"?: 'round';
        "size": 'small' | 'default' | 'large';
        "type": 'submit' | 'reset' | 'button';
    }
    interface AtoCol {
        "offset"?: string;
        "offsetLg"?: string;
        "offsetMd"?: string;
        "offsetSm"?: string;
        "pull"?: string;
        "push"?: string;
        "size"?: 'auto' | string;
        "sizeLg"?: string;
        "sizeMd"?: string;
        "sizeSm"?: string;
    }
    interface AtoGrid {
        "fixed"?: boolean;
    }
    interface AtoInput {
        "accept"?: string;
        "autofocus": boolean;
        "clearInput": boolean;
        "clearOnEdit": boolean;
        "color"?: 'primary' | 'secondary';
        "disabled": boolean;
        "fill": 'solid' | 'outline';
        "inputmode"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        "label"?: string;
        "labelPlacement"?: 'fixed' | 'stacked' | 'floating';
        "maxlength"?: number;
        "minlength"?: number;
        "mode": Mode;
        "multiple": boolean;
        "name"?: string;
        "pattern"?: string;
        "placeholder"?: string;
        "required": boolean;
        "type": TextFieldTypes;
        "value": string;
    }
    interface AtoRow {
    }
    interface AtoSelect {
        "cancelText"?: string;
        "color"?: 'primary' | 'secondary';
        "disabled"?: boolean;
        "interface"?: 'popover' | 'action-sheet';
        "label"?: string;
        "labelPlacement"?: 'fixed' | 'stacked';
        "mode": Mode;
        "multiple"?: boolean;
        "name": string;
        "okText"?: string;
        "options": Array<{
    value: string
    selected?: boolean
    disabled?: boolean
  }>;
        "overlayDismiss"?: boolean;
        "placeholder": string;
        "size"?: 'small' | 'large';
    }
}
export interface AtoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtoButtonElement;
}
export interface AtoInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtoInputElement;
}
export interface AtoSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtoSelectElement;
}
declare global {
    interface HTMLAtoButtonElement extends Components.AtoButton, HTMLStencilElement {
    }
    var HTMLAtoButtonElement: {
        prototype: HTMLAtoButtonElement;
        new (): HTMLAtoButtonElement;
    };
    interface HTMLAtoColElement extends Components.AtoCol, HTMLStencilElement {
    }
    var HTMLAtoColElement: {
        prototype: HTMLAtoColElement;
        new (): HTMLAtoColElement;
    };
    interface HTMLAtoGridElement extends Components.AtoGrid, HTMLStencilElement {
    }
    var HTMLAtoGridElement: {
        prototype: HTMLAtoGridElement;
        new (): HTMLAtoGridElement;
    };
    interface HTMLAtoInputElement extends Components.AtoInput, HTMLStencilElement {
    }
    var HTMLAtoInputElement: {
        prototype: HTMLAtoInputElement;
        new (): HTMLAtoInputElement;
    };
    interface HTMLAtoRowElement extends Components.AtoRow, HTMLStencilElement {
    }
    var HTMLAtoRowElement: {
        prototype: HTMLAtoRowElement;
        new (): HTMLAtoRowElement;
    };
    interface HTMLAtoSelectElement extends Components.AtoSelect, HTMLStencilElement {
    }
    var HTMLAtoSelectElement: {
        prototype: HTMLAtoSelectElement;
        new (): HTMLAtoSelectElement;
    };
    interface HTMLElementTagNameMap {
        "ato-button": HTMLAtoButtonElement;
        "ato-col": HTMLAtoColElement;
        "ato-grid": HTMLAtoGridElement;
        "ato-input": HTMLAtoInputElement;
        "ato-row": HTMLAtoRowElement;
        "ato-select": HTMLAtoSelectElement;
    }
}
declare namespace LocalJSX {
    interface AtoButton {
        "color"?: 'primary' | 'secondary';
        "disabled"?: boolean;
        "expand"?: 'block' | 'full';
        "fill"?: 'clear' | 'outline' | 'solid';
        "mode"?: Mode;
        "onAtoClick"?: (event: AtoButtonCustomEvent<any>) => void;
        "shape"?: 'round';
        "size"?: 'small' | 'default' | 'large';
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface AtoCol {
        "offset"?: string;
        "offsetLg"?: string;
        "offsetMd"?: string;
        "offsetSm"?: string;
        "pull"?: string;
        "push"?: string;
        "size"?: 'auto' | string;
        "sizeLg"?: string;
        "sizeMd"?: string;
        "sizeSm"?: string;
    }
    interface AtoGrid {
        "fixed"?: boolean;
    }
    interface AtoInput {
        "accept"?: string;
        "autofocus"?: boolean;
        "clearInput"?: boolean;
        "clearOnEdit"?: boolean;
        "color"?: 'primary' | 'secondary';
        "disabled"?: boolean;
        "fill"?: 'solid' | 'outline';
        "inputmode"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        "label"?: string;
        "labelPlacement"?: 'fixed' | 'stacked' | 'floating';
        "maxlength"?: number;
        "minlength"?: number;
        "mode"?: Mode;
        "multiple"?: boolean;
        "name"?: string;
        "onAtoBlur"?: (event: AtoInputCustomEvent<void>) => void;
        "onAtoChange"?: (event: AtoInputCustomEvent<string>) => void;
        "onAtoFocus"?: (event: AtoInputCustomEvent<void>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "type"?: TextFieldTypes;
        "value"?: string;
    }
    interface AtoRow {
    }
    interface AtoSelect {
        "cancelText"?: string;
        "color"?: 'primary' | 'secondary';
        "disabled"?: boolean;
        "interface"?: 'popover' | 'action-sheet';
        "label"?: string;
        "labelPlacement"?: 'fixed' | 'stacked';
        "mode"?: Mode;
        "multiple"?: boolean;
        "name"?: string;
        "okText"?: string;
        "onAtoBlur"?: (event: AtoSelectCustomEvent<void>) => void;
        "onAtoCancel"?: (event: AtoSelectCustomEvent<void>) => void;
        "onAtoChange"?: (event: AtoSelectCustomEvent<string>) => void;
        "onAtoDimiss"?: (event: AtoSelectCustomEvent<void>) => void;
        "onAtoFocus"?: (event: AtoSelectCustomEvent<void>) => void;
        "options"?: Array<{
    value: string
    selected?: boolean
    disabled?: boolean
  }>;
        "overlayDismiss"?: boolean;
        "placeholder"?: string;
        "size"?: 'small' | 'large';
    }
    interface IntrinsicElements {
        "ato-button": AtoButton;
        "ato-col": AtoCol;
        "ato-grid": AtoGrid;
        "ato-input": AtoInput;
        "ato-row": AtoRow;
        "ato-select": AtoSelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ato-button": LocalJSX.AtoButton & JSXBase.HTMLAttributes<HTMLAtoButtonElement>;
            "ato-col": LocalJSX.AtoCol & JSXBase.HTMLAttributes<HTMLAtoColElement>;
            "ato-grid": LocalJSX.AtoGrid & JSXBase.HTMLAttributes<HTMLAtoGridElement>;
            "ato-input": LocalJSX.AtoInput & JSXBase.HTMLAttributes<HTMLAtoInputElement>;
            "ato-row": LocalJSX.AtoRow & JSXBase.HTMLAttributes<HTMLAtoRowElement>;
            "ato-select": LocalJSX.AtoSelect & JSXBase.HTMLAttributes<HTMLAtoSelectElement>;
        }
    }
}
