:host {
  /**
   * @prop --track-background: Background of the toggle track
   * @prop --track-background-checked: Background of the toggle track when checked
   * @prop --border-radius: Border radius of the toggle track
   *
   * @prop --handle-background: Background of the toggle handle
   * @prop --handle-background-checked: Background of the toggle handle when checked
   *
   * @prop --handle-border-radius: Border radius of the toggle handle
   * @prop --handle-box-shadow: Box shadow of the toggle handle
   * @prop --handle-height: Height of the toggle handle
   * @prop --handle-max-height: Maximum height of the toggle handle
   * @prop --handle-width: Width of the toggle handle
   * @prop --handle-spacing: Horizontal spacing around the toggle handle
   * @prop --handle-transition: Transition of the toggle handle
   */
  /* stylelint-disable-next-line declaration-no-important */
  box-sizing: content-box !important;
  display: inline-block;
  position: relative;
  max-width: 100%;
  outline: none;
  cursor: pointer;
  touch-action: none;
  user-select: none;
  z-index: 2;
}

:host(.in-item:not(.legacy-toggle)) {
  width: 100%;
  height: 100%;
}

:host(.in-item[slot=start]:not(.legacy-toggle)),
:host(.in-item[slot=end]:not(.legacy-toggle)) {
  width: auto;
}

:host(.legacy-toggle) {
  contain: content;
}

:host(.ion-focused) input {
  border: 2px solid #5e9ed6;
}

:host(.toggle-disabled) {
  pointer-events: none;
}

:host(.legacy-toggle) label {
  top: 0;
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  margin-bottom: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  border: 0;
  background: transparent;
  cursor: pointer;
  appearance: none;
  outline: none;
  display: flex;
  align-items: center;
  opacity: 0;
  pointer-events: none;
}
@supports (inset-inline-start: 0) {
  :host(.legacy-toggle) label {
    inset-inline-start: 0;
  }
}
@supports not (inset-inline-start: 0) {
  :host(.legacy-toggle) label {
    left: 0;
  }
  :host-context([dir=rtl]):host(.legacy-toggle) label, :host-context([dir=rtl]).legacy-toggle label {
    left: unset;
    right: unset;
    right: 0;
  }
}
:host(.legacy-toggle) label::-moz-focus-inner {
  border: 0;
}

input {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  clip: rect(0 0 0 0);
  opacity: 0;
  overflow: hidden;
  -webkit-appearance: none;
  -moz-appearance: none;
}

.toggle-wrapper {
  display: flex;
  position: relative;
  flex-grow: 1;
  align-items: center;
  height: inherit;
  transition: background-color 15ms linear;
  cursor: inherit;
}

.label-text-wrapper {
  /**
   * This ensures that double tapping this text
   * clicks the <label> and focuses the input
   * when a screen reader is enabled.
   */
  pointer-events: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

/**
 * If no label text is placed into the slot
 * then the element should be hidden otherwise
 * there will be additional margins added.
 */
.label-text-wrapper-hidden {
  display: none;
}

.native-wrapper {
  display: flex;
  align-items: center;
}

:host(.toggle-justify-space-between) .toggle-wrapper {
  justify-content: space-between;
}

:host(.toggle-justify-start) .toggle-wrapper {
  justify-content: start;
}

:host(.toggle-justify-end) .toggle-wrapper {
  justify-content: end;
}

/**
 * Label is on the left of the input in LTR and
 * on the right in RTL.
 */
:host(.toggle-label-placement-start) .toggle-wrapper {
  flex-direction: row;
}

:host(.toggle-label-placement-start) .label-text-wrapper {
  /**
   * The margin between the label and
   * the input should be on the end
   * when the label sits at the start.
   */
  -webkit-margin-start: 0;
  margin-inline-start: 0;
  -webkit-margin-end: 8px;
  margin-inline-end: 8px;
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * Label is on the right of the input in LTR and
 * on the left in RTL.
 */
:host(.toggle-label-placement-end) .toggle-wrapper {
  flex-direction: row-reverse;
}

/**
 * The margin between the label and
 * the input should be on the start
 * when the label sits at the end.
 */
:host(.toggle-label-placement-end) .label-text-wrapper {
  -webkit-margin-start: 8px;
  margin-inline-start: 8px;
  -webkit-margin-end: 0;
  margin-inline-end: 0;
  margin-top: 0;
  margin-bottom: 0;
}

:host(.toggle-label-placement-fixed) .label-text-wrapper {
  /**
   * The margin between the label and
   * the input should be on the end
   * when the label sits at the start.
   */
  -webkit-margin-start: 0;
  margin-inline-start: 0;
  -webkit-margin-end: 8px;
  margin-inline-end: 8px;
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * Label is on the left of the input in LTR and
 * on the right in RTL. Label also has a fixed width.
 */
:host(.toggle-label-placement-fixed) .label-text-wrapper {
  flex: 0 0 100px;
  width: 100px;
  min-width: 100px;
  max-width: 200px;
}

.toggle-icon-wrapper {
  display: flex;
  position: relative;
  align-items: center;
  width: 100%;
  height: 100%;
  transition: var(--handle-transition);
  will-change: transform;
}

.toggle-icon {
  border-radius: var(--border-radius);
  display: block;
  position: relative;
  width: 100%;
  height: 100%;
  background: var(--track-background);
  pointer-events: none;
  overflow: inherit;
}

:host(.toggle-checked) .toggle-icon {
  background: var(--track-background-checked);
}

.toggle-inner {
  border-radius: var(--handle-border-radius);
  position: absolute;
  left: var(--handle-spacing);
  width: var(--handle-width);
  height: var(--handle-height);
  max-height: var(--handle-max-height);
  transition: var(--handle-transition);
  background: var(--handle-background);
  box-shadow: var(--handle-box-shadow);
  contain: strict;
}

/**
 * We do not use the @ltr and @rtl mixins
 * here because ion-toggle uses the Shadow DOM
 * and WebKit does not support :host-context.
 */
:host(.toggle-ltr) .toggle-inner {
  left: var(--handle-spacing);
}

:host(.toggle-rtl) .toggle-inner {
  right: var(--handle-spacing);
}

:host(.toggle-ltr.toggle-checked) .toggle-icon-wrapper {
  transform: translate3d(calc(100% - var(--handle-width)), 0, 0);
}

:host(.toggle-rtl.toggle-checked) .toggle-icon-wrapper {
  transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);
}

:host(.toggle-checked) .toggle-inner {
  background: var(--handle-background-checked);
}

:host(.toggle-ltr.toggle-checked) .toggle-inner {
  transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);
}

:host(.toggle-rtl.toggle-checked) .toggle-inner {
  transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);
}

:host {
  --track-background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.088);
  --track-background-checked: var(--ion-color-primary, #3880ff);
  --border-radius: 16px;
  --handle-background: #ffffff;
  --handle-background-checked: #ffffff;
  --handle-border-radius: 25.5px;
  --handle-box-shadow: 0 3px 12px rgba(0, 0, 0, 0.16), 0 3px 1px rgba(0, 0, 0, 0.1);
  --handle-height: calc(32px - (2px * 2));
  --handle-max-height: calc(100% - var(--handle-spacing) * 2);
  --handle-width: calc(32px - (2px * 2));
  --handle-spacing: 2px;
  --handle-transition: transform 300ms, width 120ms ease-in-out 80ms, left 110ms ease-in-out 80ms, right 110ms ease-in-out 80ms;
}

:host(.legacy-toggle) {
  width: 51px;
  height: 32px;
  contain: strict;
  overflow: hidden;
}

.native-wrapper .toggle-icon {
  width: 51px;
  height: 32px;
  /**
   * The handle box shadow should not
   * overflow outside of the track container.
   */
  overflow: hidden;
}

:host(.ion-color.toggle-checked) .toggle-icon {
  background: var(--ion-color-base);
}

:host(.toggle-activated) .toggle-switch-icon {
  opacity: 0;
}

.toggle-icon {
  transform: translate3d(0, 0, 0);
  transition: background-color 300ms;
}

.toggle-inner {
  will-change: transform;
}

.toggle-switch-icon {
  position: absolute;
  top: 50%;
  width: 11px;
  height: 11px;
  transform: translateY(-50%);
  transition: opacity 300ms, color 300ms;
}

.toggle-switch-icon {
  position: absolute;
  color: var(--ion-color-dark);
}

:host(.toggle-ltr) .toggle-switch-icon {
  /* stylelint-disable-next-line property-disallowed-list */
  right: 6px;
}

:host(.toggle-rtl) .toggle-switch-icon {
  /* stylelint-disable property-disallowed-list */
  right: initial;
  left: 6px;
  /* stylelint-enable property-disallowed-list */
}

:host(.toggle-checked) .toggle-switch-icon.toggle-switch-icon-checked {
  color: var(--ion-color-contrast, #fff);
}

:host(.toggle-checked) .toggle-switch-icon:not(.toggle-switch-icon-checked) {
  opacity: 0;
}

.toggle-switch-icon-checked {
  position: absolute;
  width: 15px;
  height: 15px;
  transform: translateY(-50%) rotate(90deg);
}

:host(.toggle-ltr) .toggle-switch-icon-checked {
  /* stylelint-disable property-disallowed-list */
  right: initial;
  left: 4px;
  /* stylelint-enable property-disallowed-list */
}

:host(.toggle-rtl) .toggle-switch-icon-checked {
  /* stylelint-disable-next-line property-disallowed-list */
  right: 4px;
}

:host(.toggle-activated) .toggle-icon::before,
:host(.toggle-checked) .toggle-icon::before {
  transform: scale3d(0, 0, 0);
}

:host(.toggle-activated.toggle-checked) .toggle-inner::before {
  transform: scale3d(0, 0, 0);
}

:host(.toggle-activated) .toggle-inner {
  width: calc(var(--handle-width) + 6px);
}

:host(.toggle-ltr.toggle-activated.toggle-checked) .toggle-icon-wrapper {
  transform: translate3d(calc(100% - var(--handle-width) - 6px), 0, 0);
}

:host(.toggle-rtl.toggle-activated.toggle-checked) .toggle-icon-wrapper {
  transform: translate3d(calc(-100% + var(--handle-width) + 6px), 0, 0);
}

:host(.toggle-disabled) {
  opacity: 0.3;
}

:host(.in-item.legacy-toggle) {
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  margin-bottom: 0;
  -webkit-padding-start: 16px;
  padding-inline-start: 16px;
  -webkit-padding-end: 0;
  padding-inline-end: 0;
  padding-top: 6px;
  padding-bottom: 5px;
}

:host(.in-item.legacy-toggle[slot=start]) {
  -webkit-padding-start: 0;
  padding-inline-start: 0;
  -webkit-padding-end: 16px;
  padding-inline-end: 16px;
  padding-top: 6px;
  padding-bottom: 5px;
}