{"file":"keyboard-controller-97c7afbc.js","mappings":";;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,wBAAwB,GAAG,CAAC,sBAAsB,KAAK;AACpE,EAAE,IAAI,uBAAuB,CAAC;AAC9B,EAAE,IAAI,uBAAuB,CAAC;AAC9B,EAAE,IAAI,eAAe,CAAC;AACtB,EAAE,MAAM,IAAI,GAAG,MAAM;AACrB,IAAI,uBAAuB,GAAG,MAAM;AACpC,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAM,IAAI,sBAAsB;AAChC,QAAQ,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACrC,KAAK,CAAC;AACN,IAAI,uBAAuB,GAAG,MAAM;AACpC,MAAM,eAAe,GAAG,KAAK,CAAC;AAC9B,MAAM,IAAI,sBAAsB;AAChC,QAAQ,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACtC,KAAK,CAAC;AACN,IAAIA,SAAG,KAAK,IAAI,IAAIA,SAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;AAChH,IAAIA,SAAG,KAAK,IAAI,IAAIA,SAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;AAChH,GAAG,CAAC;AACJ,EAAE,MAAM,OAAO,GAAG,MAAM;AACxB,IAAIA,SAAG,KAAK,IAAI,IAAIA,SAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAG,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;AACnH,IAAIA,SAAG,KAAK,IAAI,IAAIA,SAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAG,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;AACnH,IAAI,uBAAuB,GAAG,uBAAuB,GAAG,SAAS,CAAC;AAClE,GAAG,CAAC;AACJ,EAAE,MAAM,iBAAiB,GAAG,MAAM,eAAe,CAAC;AAClD,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;AAC9C;;;;","names":["win"],"sources":["../../node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from '../window';\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nexport const createKeyboardController = (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  const init = () => {\n    keyboardWillShowHandler = () => {\n      keyboardVisible = true;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(true);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(false);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  init();\n  return { init, destroy, isKeyboardVisible };\n};\n"],"version":3}