{"file":"ion-refresher-content.entry.cjs.js","mappings":"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","names":["config","ENABLE_HTML_CONTENT_DEFAULT","getIonMode","arrowDown","isPlatform","h","sanitizeDOMString","SPINNERS","Host","caretBackSharp"],"sources":["../../node_modules/@ionic/core/dist/collection/components/refresher-content/refresher-content.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { arrowDown, caretBackSharp } from 'ionicons/icons';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { ENABLE_HTML_CONTENT_DEFAULT } from '../../utils/config';\nimport { isPlatform } from '../../utils/platform';\nimport { sanitizeDOMString } from '../../utils/sanitization';\nimport { SPINNERS } from '../spinner/spinner-configs';\nexport class RefresherContent {\n  constructor() {\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.pullingIcon = undefined;\n    this.pullingText = undefined;\n    this.refreshingSpinner = undefined;\n    this.refreshingText = undefined;\n  }\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      const mode = getIonMode(this);\n      const overflowRefresher = this.el.style.webkitOverflowScrolling !== undefined ? 'lines' : arrowDown;\n      this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && isPlatform('mobile') ? config.get('spinner', overflowRefresher) : 'circular');\n    }\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n    }\n  }\n  renderPullingText() {\n    const { customHTMLEnabled, pullingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n    }\n    return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n  }\n  renderRefreshingText() {\n    const { customHTMLEnabled, refreshingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n    }\n    return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n  }\n  render() {\n    const pullingIcon = this.pullingIcon;\n    const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n    const mode = getIonMode(this);\n    return (h(Host, { class: mode }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"div\", { class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { class: \"arrow-container\" }, h(\"ion-icon\", { icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n  }\n  static get is() { return \"ion-refresher-content\"; }\n  static get properties() {\n    return {\n      \"pullingIcon\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"SpinnerTypes | string | null\",\n          \"resolved\": \"null | string | undefined\",\n          \"references\": {\n            \"SpinnerTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../spinner/spinner-configs\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A static icon or a spinner to display when you begin to pull down.\\nA spinner name can be provided to gradually show tick marks\\nwhen pulling down on iOS devices.\"\n        },\n        \"attribute\": \"pulling-icon\",\n        \"reflect\": false\n      },\n      \"pullingText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The text you want to display when you begin to pull down.\\n`pullingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n        },\n        \"attribute\": \"pulling-text\",\n        \"reflect\": false\n      },\n      \"refreshingSpinner\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"SpinnerTypes | null\",\n          \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n          \"references\": {\n            \"SpinnerTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../spinner/spinner-configs\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An animated SVG spinner that shows when refreshing begins\"\n        },\n        \"attribute\": \"refreshing-spinner\",\n        \"reflect\": false\n      },\n      \"refreshingText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The text you want to display when performing a refresh.\\n`refreshingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n        },\n        \"attribute\": \"refreshing-text\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n"],"version":3}