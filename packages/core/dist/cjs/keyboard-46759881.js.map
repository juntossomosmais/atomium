{"file":"keyboard-46759881.js","mappings":"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","names":[],"sources":["../../node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nexport const KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\n// TODO(FW-2832): types\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nexport const resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nexport const startKeyboardAssist = (win) => {\n  startNativeListeners(win);\n  if (!win.visualViewport) {\n    return;\n  }\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    }\n    else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n  win.addEventListener('keyboardDidShow', (ev) => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nexport const setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nexport const setKeyboardClose = (win) => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nexport const keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return (!keyboardOpen &&\n    previousVisualViewport.width === currentVisualViewport.width &&\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nexport const keyboardDidResize = (win) => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nexport const keyboardDidClose = (win) => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: { keyboardHeight },\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nexport const trackViewportChanges = (win) => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nexport const copyVisualViewport = (visualViewport) => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale,\n  };\n};\n"],"version":3}