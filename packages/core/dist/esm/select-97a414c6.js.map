{"file":"select-97a414c6.js","mappings":";;AAAA,MAAM,SAAS,GAAG,urQAAurQ;;MCQ5rQ,UAAU;;;;;;;;IA0Cb,iBAAY,GAAG,CAAC,KAAqC;MAC3D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KACzC,CAAA;IAEO,iBAAY,GAAG;MACrB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;MACjE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAA;KACvB,CAAA;IAEO,eAAU,GAAG;MACnB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;MAC7D,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;KACrB,CAAA;IAEO,gBAAW,GAAG;MACpB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;MAC9D,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;KACtB,CAAA;IAEO,iBAAY,GAAG;MACrB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;MACjE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAA;KACvB,CAAA;;;qBA3DgD,SAAS;;;;;;;gBAOrC,IAAI;;;0BAIsB,SAAS;mBAMnD,EAAE;;EAQP,gBAAgB;IACd,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;GAC7D;EAED,oBAAoB;IAClB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IACjE,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAC7D,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;GAChE;EA0BD,MAAM;IACJ,QACE,oBACE,kBACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,qBACA,IAAI,CAAC,cAAc,EACpC,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,WAAW,EAAE,IAAI,CAAC,WAAW,iBAChB,IAAI,CAAC,UAAU,aACnB,IAAI,CAAC,MAAM,EACpB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,qBACE,IAAI,CAAC,cAAc,EACpC,WAAW,EAAE,IAAI,CAAC,YAAY,EAC9B,SAAS,EAAE,IAAI,CAAC,UAAU,EAC1B,UAAU,EAAE,IAAI,CAAC,WAAW,IAE3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,MACvB,yBAAmB,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAC9D,MAAM,CAAC,KAAK,CACK,CACrB,CAAC,CACS,CACJ,EACZ;GACF;;;;;;;","names":[],"sources":["./src/components/select/select.scss?tag=atom-select&encapsulation=shadow","./src/components/select/select.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Mode } from '@ionic/core'\nimport { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\n\n@Component({\n  tag: 'atom-select',\n  styleUrl: 'select.scss',\n  shadow: true,\n})\nexport class AtomSelect {\n  @Element() selectEl!: HTMLIonSelectElement\n\n  @Prop() color?: 'primary' | 'secondary'\n  @Prop() name: string\n  @Prop() interface?: 'popover' | 'action-sheet' = 'popover'\n  @Prop() placeholder: string\n  @Prop() cancelText?: string\n  @Prop() okText?: string\n  @Prop() disabled?: boolean\n  @Prop() multiple?: boolean\n  @Prop() size?: 'small' | 'large'\n  @Prop() mode: Mode = 'md'\n  @Prop() overlayDismiss?: boolean\n\n  @Prop() label?: string\n  @Prop() labelPlacement?: 'fixed' | 'stacked' = 'stacked'\n\n  @Prop({ mutable: true }) options: Array<{\n    value: string\n    selected?: boolean\n    disabled?: boolean\n  }> = []\n\n  @Event() atomBlur!: EventEmitter<void>\n  @Event() atomCancel!: EventEmitter<void>\n  @Event({ bubbles: true, composed: true }) atomChange!: EventEmitter<string>\n  @Event() atomDimiss!: EventEmitter<void>\n  @Event() atomFocus!: EventEmitter<void>\n\n  componentDidLoad() {\n    this.selectEl.addEventListener('ionChange', this.handleChange)\n    this.selectEl.addEventListener('ionBlur', this.handleBlur)\n    this.selectEl.addEventListener('ionFocus', this.handleFocus)\n  }\n\n  disconnectedCallback() {\n    this.selectEl.removeEventListener('ionChange', this.handleChange)\n    this.selectEl.removeEventListener('ionBlur', this.handleBlur)\n    this.selectEl.removeEventListener('ionFocus', this.handleFocus)\n  }\n\n  private handleChange = (event: CustomEvent<{ value: string }>) => {\n    this.atomChange.emit(event.detail.value)\n  }\n\n  private handleCancel = () => {\n    this.selectEl.removeEventListener('ionCancel', this.handleCancel)\n    this.atomCancel.emit()\n  }\n\n  private handleBlur = () => {\n    this.selectEl.removeEventListener('ionBlur', this.handleBlur)\n    this.atomBlur.emit()\n  }\n\n  private handleFocus = () => {\n    this.selectEl.removeEventListener('ionFocus', this.handleBlur)\n    this.atomFocus.emit()\n  }\n\n  private handleDimiss = () => {\n    this.selectEl.removeEventListener('ionDimiss', this.handleDimiss)\n    this.atomDimiss.emit()\n  }\n\n  render(): JSX.Element {\n    return (\n      <ion-item>\n        <ion-select\n          name={this.name}\n          label={this.label}\n          label-placement={this.labelPlacement}\n          interface={this.interface}\n          placeholder={this.placeholder}\n          cancel-text={this.cancelText}\n          ok-text={this.okText}\n          disabled={this.disabled}\n          multiple={this.multiple}\n          color={this.color}\n          mode={this.mode}\n          overlay-dismiss={this.overlayDismiss}\n          onIonChange={this.handleChange}\n          onIonBlur={this.handleBlur}\n          onIonFocus={this.handleFocus}\n        >\n          {this.options.map((option) => (\n            <ion-select-option value={option.value} disabled={option.disabled}>\n              {option.value}\n            </ion-select-option>\n          ))}\n        </ion-select>\n      </ion-item>\n    )\n  }\n}\n"],"version":3}