{"file":"input-c9deb0c1.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,2sQAA2sQ;;MCQ/sQ,SAAS;;;;;;IAmDZ,iBAAY,GAAG,CAAC,KAAU;MAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KACzC,CAAA;IAEO,eAAU,GAAG;MACnB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;MAC5D,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;KACrB,CAAA;IAEO,gBAAW,GAAG;MACpB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;MAC9D,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;KACtB,CAAA;;;gBA1D8B,MAAM;;;;;oBAKlB,KAAK;oBACL,KAAK;gBACH,IAAI;gBACW,SAAS;qBACzB,KAAK;;;oBAGN,KAAK;uBACF,KAAK;sBACN,KAAK;qBASX,MAAM;0BAEuC,UAAU;;;EAOtE,gBAAgB;IACd,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAC7D,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAC5D,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IACzD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;GAC5D;EAED,oBAAoB;IAClB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAChE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;IAC/D,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAC5D,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;GAC/D;EAgBD,MAAM;IACJ,QACE,iBACE,KAAK,EAAC,WAAW,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,WAAW,EAAE,IAAI,CAAC,YAAY,EAC9B,UAAU,EAAE,IAAI,CAAC,YAAY,EAC7B,SAAS,EAAE,IAAI,CAAC,UAAU,EAC1B,UAAU,EAAE,IAAI,CAAC,WAAW,GAC5B,EACH;GACF;;;;;;;","names":[],"sources":["./src/components/input/input.scss?tag=atom-input&encapsulation=shadow","./src/components/input/input.tsx"],"sourcesContent":[":host(.ion-button) {\n  display: inline-block;\n}\n","import { Mode, TextFieldTypes } from '@ionic/core'\nimport { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\n\n@Component({\n  tag: 'atom-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class AtomInput {\n  @Element() inputEl!: HTMLInputElement\n\n  @Prop() color?: 'primary' | 'secondary'\n  @Prop() value: string\n  @Prop() type: TextFieldTypes = 'text'\n  @Prop() placeholder?: string\n  @Prop() name?: string\n  @Prop() minlength?: number\n  @Prop() maxlength?: number\n  @Prop() disabled = false\n  @Prop() required = false\n  @Prop() mode: Mode = 'md'\n  @Prop() fill: 'solid' | 'outline' = 'outline'\n  @Prop() autofocus = false\n  @Prop() pattern?: string\n  @Prop() accept?: string\n  @Prop() multiple = false\n  @Prop() clearOnEdit = false\n  @Prop() clearInput = false\n  @Prop() inputmode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search' = 'none'\n\n  @Prop() labelPlacement?: 'fixed' | 'stacked' | 'floating' = 'floating'\n  @Prop() label?: string\n\n  @Event() atomFocus!: EventEmitter<void>\n  @Event() atomBlur!: EventEmitter<void>\n  @Event({ bubbles: true, composed: true }) atomChange!: EventEmitter<string>\n\n  componentDidLoad() {\n    this.inputEl.addEventListener('ionChange', this.handleChange)\n    this.inputEl.addEventListener('ionInput', this.handleChange)\n    this.inputEl.addEventListener('ionBlur', this.handleBlur)\n    this.inputEl.addEventListener('ionFocus', this.handleFocus)\n  }\n\n  disconnectedCallback() {\n    this.inputEl.removeEventListener('ionChange', this.handleChange)\n    this.inputEl.removeEventListener('ionInput', this.handleChange)\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n  }\n\n  private handleChange = (event: any) => {\n    this.atomChange.emit(event.detail.value)\n  }\n\n  private handleBlur = () => {\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.atomBlur.emit()\n  }\n\n  private handleFocus = () => {\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n    this.atomFocus.emit()\n  }\n\n  render(): JSX.Element {\n    return (\n      <ion-input\n        class=\"ion-input\"\n        label={this.label}\n        labelPlacement={this.labelPlacement}\n        value={this.value}\n        type={this.type}\n        placeholder={this.placeholder}\n        name={this.name}\n        minlength={this.minlength}\n        maxlength={this.maxlength}\n        disabled={this.disabled}\n        required={this.required}\n        color={this.color}\n        mode={this.mode}\n        fill={this.fill}\n        autofocus={this.autofocus}\n        pattern={this.pattern}\n        inputmode={this.inputmode}\n        multiple={this.multiple}\n        clearInput={this.clearInput}\n        clearOnEdit={this.clearOnEdit}\n        onIonChange={this.handleChange}\n        onIonInput={this.handleChange}\n        onIonBlur={this.handleBlur}\n        onIonFocus={this.handleFocus}\n      />\n    )\n  }\n}\n"],"version":3}