{"version":3,"names":["createLegacyFormController","el","controlEl","legacyControl","hasLegacyControl","undefined","hasLabelProp","label","hasLabelSlot","hasAriaLabelAttribute","hasAttribute","shadowRoot","legacy","root","NAMED_LABEL_SLOT_COMPONENTS","includes","tagName","querySelector","UNNAMED_LABEL_SLOT_COMPONENTS","textContent"],"sources":["../../node_modules/@ionic/core/dist/collection/utils/forms/form-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a controller that tracks whether a form control is using the legacy or modern syntax. This should be removed when the legacy form control syntax is removed.\n *\n * @internal\n * @prop el: The Ionic form component to reference\n */\nexport const createLegacyFormController = (el) => {\n  const controlEl = el;\n  let legacyControl;\n  const hasLegacyControl = () => {\n    if (legacyControl === undefined) {\n      /**\n       * Detect if developers are using the legacy form control syntax\n       * so a deprecation warning is logged. This warning can be disabled\n       * by either using the new `label` property or setting `aria-label`\n       * on the control.\n       * Alternatively, components that use a slot for the label\n       * can check to see if the component has slotted text\n       * in the light DOM.\n       */\n      const hasLabelProp = controlEl.label !== undefined || hasLabelSlot(controlEl);\n      const hasAriaLabelAttribute = controlEl.hasAttribute('aria-label') ||\n        // Shadow DOM form controls cannot use aria-labelledby\n        (controlEl.hasAttribute('aria-labelledby') && controlEl.shadowRoot === null);\n      /**\n       * Developers can manually opt-out of the modern form markup\n       * by setting `legacy=\"true\"` on components.\n       */\n      legacyControl = controlEl.legacy === true || (!hasLabelProp && !hasAriaLabelAttribute);\n    }\n    return legacyControl;\n  };\n  return { hasLegacyControl };\n};\nconst hasLabelSlot = (controlEl) => {\n  const root = controlEl.shadowRoot;\n  if (root === null) {\n    return false;\n  }\n  /**\n   * Components that have a named label slot\n   * also have other slots, so we need to query for\n   * anything that is explicitly passed to slot=\"label\"\n   */\n  if (NAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.querySelector('[slot=\"label\"]') !== null) {\n    return true;\n  }\n  /**\n   * Components that have an unnamed slot for the label\n   * have no other slots, so we can check the textContent\n   * of the element.\n   */\n  if (UNNAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.textContent !== '') {\n    return true;\n  }\n  return false;\n};\nconst NAMED_LABEL_SLOT_COMPONENTS = ['ION-RANGE'];\nconst UNNAMED_LABEL_SLOT_COMPONENTS = ['ION-TOGGLE', 'ION-CHECKBOX', 'ION-RADIO'];\n"],"mappings":";;;AASY,MAACA,EAA8BC,IACzC,MAAMC,EAAYD,EAClB,IAAIE,EACJ,MAAMC,EAAmB,KACvB,GAAID,IAAkBE,UAAW,CAU/B,MAAMC,EAAeJ,EAAUK,QAAUF,WAAaG,EAAaN,GACnE,MAAMO,EAAwBP,EAAUQ,aAAa,eAElDR,EAAUQ,aAAa,oBAAsBR,EAAUS,aAAe,KAKzER,EAAgBD,EAAUU,SAAW,OAAUN,IAAiBG,CACtE,CACI,OAAON,CAAa,EAEtB,MAAO,CAAEC,mBAAkB,EAE7B,MAAMI,EAAgBN,IACpB,MAAMW,EAAOX,EAAUS,WACvB,GAAIE,IAAS,KAAM,CACjB,OAAO,KACX,CAME,GAAIC,EAA4BC,SAASb,EAAUc,UAAYd,EAAUe,cAAc,oBAAsB,KAAM,CACjH,OAAO,IACX,CAME,GAAIC,EAA8BH,SAASb,EAAUc,UAAYd,EAAUiB,cAAgB,GAAI,CAC7F,OAAO,IACX,CACE,OAAO,KAAK,EAEd,MAAML,EAA8B,CAAC,aACrC,MAAMI,EAAgC,CAAC,aAAc,eAAgB,oB"}