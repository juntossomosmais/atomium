"use strict";(globalThis.webpackChunk_atomium_docs_react=globalThis.webpackChunk_atomium_docs_react||[]).push([[4964],{"../../packages/core/src/components/button/stories/button.react.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Clear:()=>Clear,Default:()=>Default,Outline:()=>Outline,Secondary:()=>Secondary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>button_react_stories});var react=__webpack_require__("../../packages/core/react/index.js");const ButtonStoryArgs={parameters:{actions:{handles:["atomClick"]}},decorators:[__webpack_require__("../../node_modules/@storybook/addon-actions/dist/decorator.mjs").R],argTypes:{label:{control:"text",description:"The label of the button"},color:{control:"select",options:["primary","secondary"],description:"The color to use from your application's color palette."},fill:{control:"select",options:["solid","clear","outline"],description:"The fill style to use."},shape:{control:"select",options:["none","round"],description:"The shape of the button."},expand:{control:"select",options:["none","block","full"],description:"Expands the button to fill its parent container."},size:{control:"select",options:["small","default","large"],description:"The size of the button."},disabled:{control:"boolean",description:"If `true`, the user cannot interact with the button."},type:{control:"select",options:["submit","reset","button"],description:"The type of the button."},mode:{control:"select",options:["md","ios"],description:"The mode determines which platform styles to use."},atoClick:{action:"atoClick",description:"Emitted when the button is clicked."}}},ButtonComponentArgs={color:"primary",fill:"solid",shape:"round",size:void 0,expand:void 0,disabled:!1,type:"button",mode:"md",label:"Button"};var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const button_react_stories={title:"Components/Button",component:react.rl,...ButtonStoryArgs},createButton=args=>(0,jsx_runtime.jsx)(react.rl,{color:args.color,fill:args.fill,shape:args.shape,expand:args.expand,size:args.size,disabled:args.disabled,type:args.type,mode:args.mode,children:args.label});createButton.displayName="createButton";const Default={render:args=>createButton(args),args:{...ButtonComponentArgs}},Secondary={render:args=>createButton(args),args:{...Default.args,color:"secondary"}},Outline={render:args=>createButton(args),args:{...Default.args,fill:"outline"}},Clear={render:args=>createButton(args),args:{...Default.args,fill:"clear"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...ButtonComponentArgs\n  }\n}",...Default.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    color: 'secondary'\n  }\n}",...Secondary.parameters?.docs?.source}}},Outline.parameters={...Outline.parameters,docs:{...Outline.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    fill: 'outline'\n  }\n}",...Outline.parameters?.docs?.source}}},Clear.parameters={...Clear.parameters,docs:{...Clear.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    fill: 'clear'\n  }\n}",...Clear.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Secondary","Outline","Clear"]}}]);