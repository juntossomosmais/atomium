{"version":3,"file":"packages_library_dist_esm_ion-app_entry_js.aa34a352b349458c9c9b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;ACOA;;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAaA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;AACA;;;;;;AA4CA;AAIA;AACA;AACA;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/app/app.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/app/app.js"],"sourcesContent":["html.plt-mobile ion-app {\n  user-select: none;\n}\n\n/**\n * This works around a WebKit issue\n * where user-select: none was causing\n * contenteditable to not be selectable,\n * even though inputs and textareas are selectable.\n */\nhtml.plt-mobile ion-app [contenteditable] {\n  user-select: text;\n}\n\nion-app.force-statusbar-padding {\n  --ion-safe-area-top: 20px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from '@stencil/core';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { isPlatform } from '../../utils/platform';\nexport class App {\n  componentDidLoad() {\n    if (Build.isBrowser) {\n      rIC(async () => {\n        const isHybrid = isPlatform(window, 'hybrid');\n        if (!config.getBoolean('_testing')) {\n          import('../../utils/tap-click').then((module) => module.startTapClick(config));\n        }\n        if (config.getBoolean('statusTap', isHybrid)) {\n          import('../../utils/status-tap').then((module) => module.startStatusTap());\n        }\n        if (config.getBoolean('inputShims', needInputShims())) {\n          /**\n           * needInputShims() ensures that only iOS and Android\n           * platforms proceed into this block.\n           */\n          const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n          import('../../utils/input-shims/input-shims').then((module) => module.startInputShims(config, platform));\n        }\n        const hardwareBackButtonModule = await import('../../utils/hardware-back-button');\n        if (config.getBoolean('hardwareBackButton', isHybrid)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        }\n        else {\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n        if (typeof window !== 'undefined') {\n          import('../../utils/keyboard/keyboard').then((module) => module.startKeyboardAssist(window));\n        }\n        import('../../utils/focus-visible').then((module) => (this.focusVisible = module.startFocusVisible()));\n      });\n    }\n  }\n  /**\n   * @internal\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   */\n  async setFocus(elements) {\n    if (this.focusVisible) {\n      this.focusVisible.setFocus(elements);\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n      } }));\n  }\n  static get is() { return \"ion-app\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"app.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"app.css\"]\n    };\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"(elements: HTMLElement[]) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"HTMLElement\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": \"Used to set focus on an element that uses `ion-focusable`.\\nDo not use this if focusing the element as a result of a keyboard\\nevent as the focus utility should handle this for us. This method\\nshould be used when we want to programmatically focus an element as\\na result of another user action. (Ex: We focus the first element\\ninside of a popover when the user presents it, but the popover is not always\\npresented as a result of keyboard action.)\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\nconst needInputShims = () => {\n  /**\n   * iOS always needs input shims\n   */\n  const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n  if (needsShimsIOS) {\n    return true;\n  }\n  /**\n   * Android only needs input shims when running\n   * in the browser and only if the browser is using the\n   * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n   */\n  const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n  if (isAndroidMobileWeb) {\n    return true;\n  }\n  return false;\n};\nconst rIC = (callback) => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  }\n  else {\n    setTimeout(callback, 32);\n  }\n};\n"],"names":[],"sourceRoot":""}