{"version":3,"file":"packages_core_dist_esm_ion-segment-button_entry_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACOA;AAQA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAOA;AACA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@atomium/docs/../../node_modules/@ionic/core/dist/collection/components/segment-button/segment-button.ios.css","webpack://@atomium/docs/../../node_modules/@ionic/core/dist/collection/components/segment-button/segment-button.md.css","webpack://@atomium/docs/../../node_modules/@ionic/core/dist/collection/components/segment-button/segment-button.js","webpack://@atomium/docs/../../node_modules/@ionic/core/dist/collection/utils/theme.js"],"sourcesContent":[":host {\n  /**\n   * @prop --background: Background of the segment button\n   * @prop --background-checked: Background of the checked segment button\n   *\n   * @prop --background-hover: Background of the segment button on hover\n   * @prop --background-focused: Background of the segment button when focused with the tab key\n   *\n   * @prop --background-hover-opacity: Opacity of the segment button background on hover\n   * @prop --background-focused-opacity: Opacity of the segment button background when focused with the tab key\n   *\n   * @prop --color: Color of the segment button\n   * @prop --color-checked: Color of the checked segment button\n   * @prop --color-hover: Color of the segment button on hover\n   * @prop --color-focused: Color of the segment button when focused with the tab key\n   *\n   * @prop --border-radius: Radius of the segment button border\n   * @prop --border-color: Color of the segment button border\n   * @prop --border-style: Style of the segment button border\n   * @prop --border-width: Width of the segment button border\n   *\n   * @prop --margin-top: Top margin of the segment button\n   * @prop --margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the segment button\n   * @prop --margin-bottom: Bottom margin of the segment button\n   * @prop --margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the segment button\n   *\n   * @prop --padding-top: Top padding of the segment button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the segment button\n   * @prop --padding-bottom: Bottom padding of the segment button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the segment button\n   *\n   * @prop --transition: Transition of the segment button\n   *\n   * @prop --indicator-height: Height of the indicator for the checked segment button\n   * @prop --indicator-box-shadow: Box shadow on the indicator for the checked segment button\n   * @prop --indicator-color: Color of the indicator for the checked segment button\n   * @prop --indicator-transition: Transition of the indicator for the checked segment button\n   * @prop --indicator-transform: Transform of the indicator for the checked segment button\n   */\n  --color: initial;\n  --color-hover: var(--color);\n  --color-checked: var(--color);\n  --color-disabled: var(--color);\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex: 1 1 auto;\n  flex-direction: column;\n  height: auto;\n  background: var(--background);\n  color: var(--color);\n  text-decoration: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-kerning: none;\n  cursor: pointer;\n}\n\n.button-native {\n  border-radius: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  -webkit-margin-start: var(--margin-start);\n  margin-inline-start: var(--margin-start);\n  -webkit-margin-end: var(--margin-end);\n  margin-inline-end: var(--margin-end);\n  margin-top: var(--margin-top);\n  margin-bottom: var(--margin-bottom);\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  transform: translate3d(0,  0,  0);\n  display: flex;\n  position: relative;\n  flex-direction: inherit;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  min-width: inherit;\n  max-width: inherit;\n  height: auto;\n  min-height: inherit;\n  max-height: inherit;\n  transition: var(--transition);\n  border: none;\n  outline: none;\n  background: transparent;\n  contain: content;\n  pointer-events: none;\n  overflow: hidden;\n  z-index: 2;\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: inherit;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n:host(.segment-button-checked) {\n  background: var(--background-checked);\n  color: var(--color-checked);\n}\n\n:host(.segment-button-disabled) {\n  cursor: default;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n  :host(.segment-button-checked:hover) .button-native {\n    color: var(--color-checked);\n  }\n}\n::slotted(ion-icon) {\n  flex-shrink: 0;\n  order: -1;\n  pointer-events: none;\n}\n\n::slotted(ion-label) {\n  display: block;\n  align-self: center;\n  line-height: 22px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n\n:host(.segment-button-layout-icon-top) .button-native {\n  flex-direction: column;\n}\n\n:host(.segment-button-layout-icon-start) .button-native {\n  flex-direction: row;\n}\n\n:host(.segment-button-layout-icon-end) .button-native {\n  flex-direction: row-reverse;\n}\n\n:host(.segment-button-layout-icon-bottom) .button-native {\n  flex-direction: column-reverse;\n}\n\n:host(.segment-button-layout-icon-hide) ::slotted(ion-icon) {\n  display: none;\n}\n\n:host(.segment-button-layout-label-hide) ::slotted(ion-label) {\n  display: none;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color, var(--color-checked));\n}\n\n.segment-button-indicator {\n  transform-origin: left;\n  position: absolute;\n  opacity: 0;\n  box-sizing: border-box;\n  will-change: transform, opacity;\n  pointer-events: none;\n}\n\n.segment-button-indicator-background {\n  width: 100%;\n  height: var(--indicator-height);\n  transform: var(--indicator-transform);\n  box-shadow: var(--indicator-box-shadow);\n  pointer-events: none;\n}\n\n.segment-button-indicator-animated {\n  transition: var(--indicator-transition);\n}\n\n:host(.segment-button-checked) .segment-button-indicator {\n  opacity: 1;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .segment-button-indicator-background {\n    transform: none;\n  }\n  .segment-button-indicator-animated {\n    transition: none;\n  }\n}\n:host {\n  --background: none;\n  --background-checked: none;\n  --background-hover: none;\n  --background-hover-opacity: 0;\n  --background-focused: none;\n  --background-focused-opacity: 0;\n  --border-radius: 7px;\n  --border-width: 1px;\n  --border-color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);\n  --border-style: solid;\n  --indicator-box-shadow: 0 0 5px rgba(0, 0, 0, 0.16);\n  --indicator-color: var(--ion-color-step-350, var(--ion-background-color, #fff));\n  --indicator-height: 100%;\n  --indicator-transition: transform 260ms cubic-bezier(0.4, 0, 0.2, 1);\n  --indicator-transform: none;\n  --transition: 100ms all linear;\n  --padding-top: 0;\n  --padding-end: 13px;\n  --padding-bottom: 0;\n  --padding-start: 13px;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  position: relative;\n  flex-basis: 0;\n  flex-direction: row;\n  min-width: 70px;\n  min-height: 28px;\n  transform: translate3d(0, 0, 0);\n  font-size: 13px;\n  font-weight: 450;\n  line-height: 37px;\n}\n\n:host::before {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  transition: 160ms opacity ease-in-out;\n  transition-delay: 100ms;\n  border-left: var(--border-width) var(--border-style) var(--border-color);\n  content: \"\";\n  opacity: 1;\n  will-change: opacity;\n}\n\n:host(:first-of-type)::before {\n  border-left-color: transparent;\n}\n\n:host(.segment-button-disabled) {\n  opacity: 0.3;\n}\n\n::slotted(ion-icon) {\n  font-size: 24px;\n}\n\n:host(.segment-button-layout-icon-start) ::slotted(ion-label) {\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.segment-button-layout-icon-end) ::slotted(ion-label) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n}\n\n.segment-button-indicator {\n  -webkit-padding-start: 2px;\n  padding-inline-start: 2px;\n  -webkit-padding-end: 2px;\n  padding-inline-end: 2px;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n.segment-button-indicator-background {\n  border-radius: var(--border-radius);\n  background: var(--indicator-color);\n}\n\n.segment-button-indicator-background {\n  transition: var(--indicator-transition);\n}\n\n:host(.segment-button-checked)::before,\n:host(.segment-button-after-checked)::before {\n  opacity: 0;\n}\n\n:host(.segment-button-checked) {\n  z-index: -1;\n}\n\n:host(.segment-button-activated) {\n  --indicator-transform: scale(0.95);\n}\n\n:host(.ion-focused) .button-native {\n  opacity: 0.7;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    opacity: 0.5;\n  }\n  :host(.segment-button-checked:hover) .button-native {\n    opacity: 1;\n  }\n}\n:host(.in-segment-color) {\n  background: none;\n  color: var(--ion-text-color, #000);\n}\n\n:host(.in-segment-color) .segment-button-indicator-background {\n  background: var(--ion-color-step-350, var(--ion-background-color, #fff));\n}\n\n@media (any-hover: hover) {\n  :host(.in-segment-color:hover) .button-native,\n  :host(.in-segment-color.segment-button-checked:hover) .button-native {\n    color: var(--ion-text-color, #000);\n  }\n}\n:host(.in-toolbar:not(.in-segment-color)) {\n  --background-checked: var(--ion-toolbar-segment-background-checked, none);\n  --color: var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);\n  --color-checked: var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);\n  --indicator-color: var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color, #fff)));\n}\n\n/**\n * Use the contrast color as background since\n * since the text color is the base color. Otherwise\n * we will have contrast issues when using light/medium/dark\n * palettes across light and dark mode.\n */\n:host(.in-toolbar-color) .segment-button-indicator-background {\n  background: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color:not(.in-segment-color)) .button-native {\n  color: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.in-toolbar-color:not(.in-segment-color):hover) .button-native {\n    color: var(--ion-color-contrast);\n  }\n  :host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native {\n    color: var(--ion-color-base);\n  }\n}",":host {\n  /**\n   * @prop --background: Background of the segment button\n   * @prop --background-checked: Background of the checked segment button\n   *\n   * @prop --background-hover: Background of the segment button on hover\n   * @prop --background-focused: Background of the segment button when focused with the tab key\n   *\n   * @prop --background-hover-opacity: Opacity of the segment button background on hover\n   * @prop --background-focused-opacity: Opacity of the segment button background when focused with the tab key\n   *\n   * @prop --color: Color of the segment button\n   * @prop --color-checked: Color of the checked segment button\n   * @prop --color-hover: Color of the segment button on hover\n   * @prop --color-focused: Color of the segment button when focused with the tab key\n   *\n   * @prop --border-radius: Radius of the segment button border\n   * @prop --border-color: Color of the segment button border\n   * @prop --border-style: Style of the segment button border\n   * @prop --border-width: Width of the segment button border\n   *\n   * @prop --margin-top: Top margin of the segment button\n   * @prop --margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the segment button\n   * @prop --margin-bottom: Bottom margin of the segment button\n   * @prop --margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the segment button\n   *\n   * @prop --padding-top: Top padding of the segment button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the segment button\n   * @prop --padding-bottom: Bottom padding of the segment button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the segment button\n   *\n   * @prop --transition: Transition of the segment button\n   *\n   * @prop --indicator-height: Height of the indicator for the checked segment button\n   * @prop --indicator-box-shadow: Box shadow on the indicator for the checked segment button\n   * @prop --indicator-color: Color of the indicator for the checked segment button\n   * @prop --indicator-transition: Transition of the indicator for the checked segment button\n   * @prop --indicator-transform: Transform of the indicator for the checked segment button\n   */\n  --color: initial;\n  --color-hover: var(--color);\n  --color-checked: var(--color);\n  --color-disabled: var(--color);\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex: 1 1 auto;\n  flex-direction: column;\n  height: auto;\n  background: var(--background);\n  color: var(--color);\n  text-decoration: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-kerning: none;\n  cursor: pointer;\n}\n\n.button-native {\n  border-radius: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  -webkit-margin-start: var(--margin-start);\n  margin-inline-start: var(--margin-start);\n  -webkit-margin-end: var(--margin-end);\n  margin-inline-end: var(--margin-end);\n  margin-top: var(--margin-top);\n  margin-bottom: var(--margin-bottom);\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  transform: translate3d(0,  0,  0);\n  display: flex;\n  position: relative;\n  flex-direction: inherit;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  min-width: inherit;\n  max-width: inherit;\n  height: auto;\n  min-height: inherit;\n  max-height: inherit;\n  transition: var(--transition);\n  border: none;\n  outline: none;\n  background: transparent;\n  contain: content;\n  pointer-events: none;\n  overflow: hidden;\n  z-index: 2;\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: inherit;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n:host(.segment-button-checked) {\n  background: var(--background-checked);\n  color: var(--color-checked);\n}\n\n:host(.segment-button-disabled) {\n  cursor: default;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n  :host(.segment-button-checked:hover) .button-native {\n    color: var(--color-checked);\n  }\n}\n::slotted(ion-icon) {\n  flex-shrink: 0;\n  order: -1;\n  pointer-events: none;\n}\n\n::slotted(ion-label) {\n  display: block;\n  align-self: center;\n  line-height: 22px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n\n:host(.segment-button-layout-icon-top) .button-native {\n  flex-direction: column;\n}\n\n:host(.segment-button-layout-icon-start) .button-native {\n  flex-direction: row;\n}\n\n:host(.segment-button-layout-icon-end) .button-native {\n  flex-direction: row-reverse;\n}\n\n:host(.segment-button-layout-icon-bottom) .button-native {\n  flex-direction: column-reverse;\n}\n\n:host(.segment-button-layout-icon-hide) ::slotted(ion-icon) {\n  display: none;\n}\n\n:host(.segment-button-layout-label-hide) ::slotted(ion-label) {\n  display: none;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color, var(--color-checked));\n}\n\n.segment-button-indicator {\n  transform-origin: left;\n  position: absolute;\n  opacity: 0;\n  box-sizing: border-box;\n  will-change: transform, opacity;\n  pointer-events: none;\n}\n\n.segment-button-indicator-background {\n  width: 100%;\n  height: var(--indicator-height);\n  transform: var(--indicator-transform);\n  box-shadow: var(--indicator-box-shadow);\n  pointer-events: none;\n}\n\n.segment-button-indicator-animated {\n  transition: var(--indicator-transition);\n}\n\n:host(.segment-button-checked) .segment-button-indicator {\n  opacity: 1;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .segment-button-indicator-background {\n    transform: none;\n  }\n  .segment-button-indicator-animated {\n    transition: none;\n  }\n}\n:host {\n  --background: none;\n  --background-checked: none;\n  --background-hover: var(--color-checked);\n  --background-focused: var(--color-checked);\n  --background-activated-opacity: 0;\n  --background-focused-opacity: .12;\n  --background-hover-opacity: .04;\n  --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n  --color-checked: var(--ion-color-primary, #3880ff);\n  --indicator-box-shadow: none;\n  --indicator-color: var(--color-checked);\n  --indicator-height: 2px;\n  --indicator-transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  --indicator-transform: none;\n  --padding-top: 0;\n  --padding-end: 16px;\n  --padding-bottom: 0;\n  --padding-start: 16px;\n  --transition: color 0.15s linear 0s, opacity 0.15s linear 0s;\n  min-width: 90px;\n  max-width: 360px;\n  min-height: 48px;\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: 0.06em;\n  line-height: 40px;\n  text-transform: uppercase;\n}\n\n:host(.segment-button-disabled) {\n  opacity: 0.3;\n}\n\n:host(.in-segment-color) {\n  background: none;\n  color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n}\n\n:host(.in-segment-color) ion-ripple-effect {\n  color: var(--ion-color-base);\n}\n\n:host(.in-segment-color) .segment-button-indicator-background {\n  background: var(--ion-color-base);\n}\n\n:host(.in-segment-color.segment-button-checked) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.in-segment-color.ion-focused) .button-native::after {\n  background: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.in-segment-color:hover) .button-native {\n    color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n  }\n  :host(.in-segment-color:hover) .button-native::after {\n    background: var(--ion-color-base);\n  }\n  :host(.in-segment-color.segment-button-checked:hover) .button-native {\n    color: var(--ion-color-base);\n  }\n}\n:host(.in-toolbar:not(.in-segment-color)) {\n  --background: var(--ion-toolbar-segment-background, none);\n  --background-checked: var(--ion-toolbar-segment-background-checked, none);\n  --color: var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));\n  --color-checked: var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #3880ff));\n  --indicator-color: var(--ion-toolbar-segment-color-checked, var(--color-checked));\n}\n\n:host(.in-toolbar-color:not(.in-segment-color)) .button-native {\n  color: rgba(var(--ion-color-contrast-rgb), 0.6);\n}\n\n:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native {\n  color: var(--ion-color-contrast);\n}\n\n@media (any-hover: hover) {\n  :host(.in-toolbar-color:not(.in-segment-color)) .button-native::after {\n    background: var(--ion-color-contrast);\n  }\n}\n::slotted(ion-icon) {\n  margin-top: 12px;\n  margin-bottom: 12px;\n  font-size: 24px;\n}\n\n::slotted(ion-label) {\n  margin-top: 12px;\n  margin-bottom: 12px;\n}\n\n:host(.segment-button-layout-icon-top) ::slotted(ion-label),\n:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon) {\n  margin-top: 0;\n}\n\n:host(.segment-button-layout-icon-top) ::slotted(ion-icon),\n:host(.segment-button-layout-icon-bottom) ::slotted(ion-label) {\n  margin-bottom: 0;\n}\n\n:host(.segment-button-layout-icon-start) ::slotted(ion-label) {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.segment-button-layout-icon-end) ::slotted(ion-label) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n}\n\n:host(.segment-button-has-icon-only) ::slotted(ion-icon) {\n  margin-top: 12px;\n  margin-bottom: 12px;\n}\n\n:host(.segment-button-has-label-only) ::slotted(ion-label) {\n  margin-top: 12px;\n  margin-bottom: 12px;\n}\n\n.segment-button-indicator {\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.segment-button-indicator-background {\n  background: var(--indicator-color);\n}\n\n:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background {\n  background: var(--ion-toolbar-segment-indicator-color, var(--indicator-color));\n}\n\n:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background {\n  background: var(--ion-color-contrast);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { addEventListener, removeEventListener, inheritAttributes } from '../../utils/helpers';\nimport { hostContext } from '../../utils/theme';\nlet ids = 0;\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part native - The native HTML button element that wraps all child elements.\n * @part indicator - The indicator displayed on the checked segment button.\n * @part indicator-background - The background element for the indicator displayed on the checked segment button.\n */\nexport class SegmentButton {\n  constructor() {\n    this.segmentEl = null;\n    this.inheritedAttributes = {};\n    this.updateStyle = () => {\n      forceUpdate(this);\n    };\n    this.updateState = () => {\n      if (this.segmentEl) {\n        this.checked = this.segmentEl.value === this.value;\n      }\n    };\n    this.checked = false;\n    this.disabled = false;\n    this.layout = 'icon-top';\n    this.type = 'button';\n    this.value = 'ion-sb-' + ids++;\n  }\n  connectedCallback() {\n    const segmentEl = (this.segmentEl = this.el.closest('ion-segment'));\n    if (segmentEl) {\n      this.updateState();\n      addEventListener(segmentEl, 'ionSelect', this.updateState);\n      addEventListener(segmentEl, 'ionStyle', this.updateStyle);\n    }\n  }\n  disconnectedCallback() {\n    const segmentEl = this.segmentEl;\n    if (segmentEl) {\n      removeEventListener(segmentEl, 'ionSelect', this.updateState);\n      removeEventListener(segmentEl, 'ionStyle', this.updateStyle);\n      this.segmentEl = null;\n    }\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['aria-label']));\n  }\n  get hasLabel() {\n    return !!this.el.querySelector('ion-label');\n  }\n  get hasIcon() {\n    return !!this.el.querySelector('ion-icon');\n  }\n  /**\n   * @internal\n   * Focuses the native <button> element\n   * inside of ion-segment-button.\n   */\n  async setFocus() {\n    const { nativeEl } = this;\n    if (nativeEl !== undefined) {\n      nativeEl.focus();\n    }\n  }\n  render() {\n    const { checked, type, disabled, hasIcon, hasLabel, layout, segmentEl } = this;\n    const mode = getIonMode(this);\n    const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;\n    return (h(Host, { class: {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'in-segment': hostContext('ion-segment', this.el),\n        'in-segment-color': hasSegmentColor(),\n        'segment-button-has-label': hasLabel,\n        'segment-button-has-icon': hasIcon,\n        'segment-button-has-label-only': hasLabel && !hasIcon,\n        'segment-button-has-icon-only': hasIcon && !hasLabel,\n        'segment-button-disabled': disabled,\n        'segment-button-checked': checked,\n        [`segment-button-layout-${layout}`]: true,\n        'ion-activatable': true,\n        'ion-activatable-instant': true,\n        'ion-focusable': true,\n      } }, h(\"button\", Object.assign({ \"aria-selected\": checked ? 'true' : 'false', role: \"tab\", ref: (el) => (this.nativeEl = el), type: type, class: \"button-native\", part: \"native\", disabled: disabled }, this.inheritedAttributes), h(\"span\", { class: \"button-inner\" }, h(\"slot\", null)), mode === 'md' && h(\"ion-ripple-effect\", null)), h(\"div\", { part: \"indicator\", class: {\n        'segment-button-indicator': true,\n        'segment-button-indicator-animated': true,\n      } }, h(\"div\", { part: \"indicator-background\", class: \"segment-button-indicator-background\" }))));\n  }\n  static get is() { return \"ion-segment-button\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"segment-button.ios.scss\"],\n      \"md\": [\"segment-button.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"segment-button.ios.css\"],\n      \"md\": [\"segment-button.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the segment button.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"layout\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SegmentButtonLayout\",\n          \"resolved\": \"\\\"icon-bottom\\\" | \\\"icon-end\\\" | \\\"icon-hide\\\" | \\\"icon-start\\\" | \\\"icon-top\\\" | \\\"label-hide\\\" | undefined\",\n          \"references\": {\n            \"SegmentButtonLayout\": {\n              \"location\": \"import\",\n              \"path\": \"./segment-button-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the layout of the text and icon in the segment.\"\n        },\n        \"attribute\": \"layout\",\n        \"reflect\": false,\n        \"defaultValue\": \"'icon-top'\"\n      },\n      \"type\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'submit' | 'reset' | 'button'\",\n          \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The type of the button.\"\n        },\n        \"attribute\": \"type\",\n        \"reflect\": false,\n        \"defaultValue\": \"'button'\"\n      },\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the segment button.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"'ion-sb-' + ids++\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"checked\": {}\n    };\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": \"Focuses the native <button> element\\ninside of ion-segment-button.\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nexport const createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nexport const getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nexport const getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nexport const openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n"],"names":[],"sourceRoot":""}