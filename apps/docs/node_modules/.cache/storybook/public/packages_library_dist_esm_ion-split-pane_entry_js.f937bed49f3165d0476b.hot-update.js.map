{"version":3,"file":"packages_library_dist_esm_ion-split-pane_entry_js.f937bed49f3165d0476b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;ACAA;ACMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AAIA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;;AACA;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.js"],"sourcesContent":[":host {\n  /**\n   * @prop --border: Border between panes\n   * @prop --side-min-width: Minimum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-max-width: Maximum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-width: Width of the side pane. Does not apply when split pane is collapsed.\n   */\n  --side-width: 100%;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  contain: strict;\n}\n\n/**\n * Do not pass CSS Variables down on larger\n * screens as we want them to affect the outer\n * `ion-menu` rather than the inner content\n */\n::slotted(ion-menu.menu-pane-visible) {\n  flex: 0 1 auto;\n  width: var(--side-width);\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side),\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: relative;\n  /* stylelint-disable-next-line declaration-no-important */\n  box-shadow: none !important;\n  z-index: 0;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  flex: 1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),\n:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled) {\n  display: flex;\n  flex-shrink: 0;\n}\n\n::slotted(.split-pane-side:not(ion-menu)) {\n  display: none;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  order: -1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  order: 1;\n}\n\n:host {\n  --border: 0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n  --side-min-width: 270px;\n  --side-max-width: 28%;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  -webkit-border-start: 0;\n  border-inline-start: 0;\n  -webkit-border-end: var(--border);\n  border-inline-end: var(--border);\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  -webkit-border-start: var(--border);\n  border-inline-start: var(--border);\n  -webkit-border-end: 0;\n  border-inline-end: 0;\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}",":host {\n  /**\n   * @prop --border: Border between panes\n   * @prop --side-min-width: Minimum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-max-width: Maximum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-width: Width of the side pane. Does not apply when split pane is collapsed.\n   */\n  --side-width: 100%;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  contain: strict;\n}\n\n/**\n * Do not pass CSS Variables down on larger\n * screens as we want them to affect the outer\n * `ion-menu` rather than the inner content\n */\n::slotted(ion-menu.menu-pane-visible) {\n  flex: 0 1 auto;\n  width: var(--side-width);\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side),\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: relative;\n  /* stylelint-disable-next-line declaration-no-important */\n  box-shadow: none !important;\n  z-index: 0;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  flex: 1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),\n:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled) {\n  display: flex;\n  flex-shrink: 0;\n}\n\n::slotted(.split-pane-side:not(ion-menu)) {\n  display: none;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  order: -1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  order: 1;\n}\n\n:host {\n  --border: 1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));\n  --side-min-width: 270px;\n  --side-max-width: 28%;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  -webkit-border-start: 0;\n  border-inline-start: 0;\n  -webkit-border-end: var(--border);\n  border-inline-end: var(--border);\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  -webkit-border-start: var(--border);\n  border-inline-start: var(--border);\n  -webkit-border-end: 0;\n  border-inline-end: 0;\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\n// TODO(FW-2832): types\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n  xs: '(min-width: 0px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)',\n  never: '',\n};\nexport class SplitPane {\n  constructor() {\n    this.visible = false;\n    this.contentId = undefined;\n    this.disabled = false;\n    this.when = QUERY['lg'];\n  }\n  visibleChanged(visible) {\n    const detail = { visible, isPane: this.isPane.bind(this) };\n    this.ionSplitPaneVisible.emit(detail);\n  }\n  async connectedCallback() {\n    // TODO: connectedCallback is fired in CE build\n    // before WC is defined. This needs to be fixed in Stencil.\n    if (typeof customElements !== 'undefined' && customElements != null) {\n      await customElements.whenDefined('ion-split-pane');\n    }\n    this.styleChildren();\n    this.updateState();\n  }\n  disconnectedCallback() {\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n  }\n  updateState() {\n    if (!Build.isBrowser) {\n      return;\n    }\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n    // Check if the split-pane is disabled\n    if (this.disabled) {\n      this.visible = false;\n      return;\n    }\n    // When query is a boolean\n    const query = this.when;\n    if (typeof query === 'boolean') {\n      this.visible = query;\n      return;\n    }\n    // When query is a string, let's find first if it is a shortcut\n    const mediaQuery = QUERY[query] || query;\n    // Media query is empty or null, we hide it\n    if (mediaQuery.length === 0) {\n      this.visible = false;\n      return;\n    }\n    if (window.matchMedia) {\n      // Listen on media query\n      const callback = (q) => {\n        this.visible = q.matches;\n      };\n      const mediaList = window.matchMedia(mediaQuery);\n      mediaList.addListener(callback);\n      this.rmL = () => mediaList.removeListener(callback);\n      this.visible = mediaList.matches;\n    }\n  }\n  isPane(element) {\n    if (!this.visible) {\n      return false;\n    }\n    return element.parentElement === this.el && element.classList.contains(SPLIT_PANE_SIDE);\n  }\n  styleChildren() {\n    if (!Build.isBrowser) {\n      return;\n    }\n    const contentId = this.contentId;\n    const children = this.el.children;\n    const nu = this.el.childElementCount;\n    let foundMain = false;\n    for (let i = 0; i < nu; i++) {\n      const child = children[i];\n      const isMain = contentId !== undefined && child.id === contentId;\n      if (isMain) {\n        if (foundMain) {\n          console.warn('split pane cannot have more than one main node');\n          return;\n        }\n        foundMain = true;\n      }\n      setPaneClass(child, isMain);\n    }\n    if (!foundMain) {\n      console.warn('split pane does not have a specified main node');\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`split-pane-${mode}`]: true,\n        'split-pane-visible': this.visible,\n      } }, h(\"slot\", null)));\n  }\n  static get is() { return \"ion-split-pane\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"split-pane.ios.scss\"],\n      \"md\": [\"split-pane.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"split-pane.ios.css\"],\n      \"md\": [\"split-pane.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"contentId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The `id` of the main content. When using\\na router this is typically `ion-router-outlet`.\\nWhen not using a router, this is typically\\nyour main view's `ion-content`. This is not the\\nid of the `ion-content` inside of your `ion-menu`.\"\n        },\n        \"attribute\": \"content-id\",\n        \"reflect\": true\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the split pane will be hidden.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"when\": {\n        \"type\": \"any\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | boolean\",\n          \"resolved\": \"boolean | string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When the split-pane should be shown.\\nCan be a CSS media query expression, or a shortcut expression.\\nCan also be a boolean expression.\"\n        },\n        \"attribute\": \"when\",\n        \"reflect\": false,\n        \"defaultValue\": \"QUERY['lg']\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"visible\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionSplitPaneVisible\",\n        \"name\": \"ionSplitPaneVisible\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Expression to be called when the split-pane visibility has changed\"\n        },\n        \"complexType\": {\n          \"original\": \"{ visible: boolean }\",\n          \"resolved\": \"{ visible: boolean; }\",\n          \"references\": {}\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"visible\",\n        \"methodName\": \"visibleChanged\"\n      }, {\n        \"propName\": \"disabled\",\n        \"methodName\": \"updateState\"\n      }, {\n        \"propName\": \"when\",\n        \"methodName\": \"updateState\"\n      }];\n  }\n}\nconst setPaneClass = (el, isMain) => {\n  let toAdd;\n  let toRemove;\n  if (isMain) {\n    toAdd = SPLIT_PANE_MAIN;\n    toRemove = SPLIT_PANE_SIDE;\n  }\n  else {\n    toAdd = SPLIT_PANE_SIDE;\n    toRemove = SPLIT_PANE_MAIN;\n  }\n  const classList = el.classList;\n  classList.add(toAdd);\n  classList.remove(toRemove);\n};\n"],"names":[],"sourceRoot":""}