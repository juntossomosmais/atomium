{"version":3,"file":"packages_library_dist_esm_ion-route_entry_js.3d3fd5fdea925f35dd26.hot-update.js","mappings":";;;;;;;;;;;;;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/route/route.js"],"sourcesContent":["// TODO(FW-2832): types\nexport class Route {\n  constructor() {\n    this.url = '';\n    this.component = undefined;\n    this.componentProps = undefined;\n    this.beforeLeave = undefined;\n    this.beforeEnter = undefined;\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get is() { return \"ion-route\"; }\n  static get properties() {\n    return {\n      \"url\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Relative path that needs to match in order for this route to apply.\\n\\nAccepts paths similar to expressjs so that you can define parameters\\nin the url /foo/:bar where bar would be available in incoming props.\"\n        },\n        \"attribute\": \"url\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      },\n      \"component\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": true,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`)\\nwhen the route matches.\\n\\nThe value of this property is not always the tagname of the component to load,\\nin `ion-tabs` it actually refers to the name of the `ion-tab` to select.\"\n        },\n        \"attribute\": \"component\",\n        \"reflect\": false\n      },\n      \"componentProps\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"{ [key: string]: any }\",\n          \"resolved\": \"undefined | { [key: string]: any; }\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed\\nto the defined component when rendered.\"\n        }\n      },\n      \"beforeLeave\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NavigationHookCallback\",\n          \"resolved\": \"(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined\",\n          \"references\": {\n            \"NavigationHookCallback\": {\n              \"location\": \"import\",\n              \"path\": \"./route-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A navigation hook that is fired when the route tries to leave.\\nReturning `true` allows the navigation to proceed, while returning\\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\\nobject causes the router to redirect to the path specified.\"\n        }\n      },\n      \"beforeEnter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NavigationHookCallback\",\n          \"resolved\": \"(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined\",\n          \"references\": {\n            \"NavigationHookCallback\": {\n              \"location\": \"import\",\n              \"path\": \"./route-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A navigation hook that is fired when the route tries to enter.\\nReturning `true` allows the navigation to proceed, while returning\\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\\nobject causes the router to redirect to the path specified.\"\n        }\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionRouteDataChanged\",\n        \"name\": \"ionRouteDataChanged\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Used internally by `ion-router` to know when this route did change.\"\n        },\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        }\n      }];\n  }\n  static get watchers() {\n    return [{\n        \"propName\": \"url\",\n        \"methodName\": \"onUpdate\"\n      }, {\n        \"propName\": \"component\",\n        \"methodName\": \"onUpdate\"\n      }, {\n        \"propName\": \"componentProps\",\n        \"methodName\": \"onComponentProps\"\n      }];\n  }\n}\n"],"names":[],"sourceRoot":""}