{"version":3,"file":"packages_library_dist_esm_ion-title_entry_js.87c064bc5622a63510d3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACMA;AACA;;;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/title/title.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/title/title.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/title/title.js"],"sourcesContent":[":host {\n  /**\n   * @prop --color: Text color of the title\n   */\n  --color: initial;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  transform: translateZ(0);\n  color: var(--color);\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.toolbar-title {\n  display: block;\n  width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  pointer-events: auto;\n}\n\n:host(.title-small) .toolbar-title {\n  white-space: normal;\n}\n\n:host {\n  top: 0;\n  -webkit-padding-start: 90px;\n  padding-inline-start: 90px;\n  -webkit-padding-end: 90px;\n  padding-inline-end: 90px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  transform: translateZ(0);\n  font-size: 17px;\n  font-weight: 600;\n  text-align: center;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host {\n    left: 0;\n  }\n  :host-context([dir=rtl]) {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n}\n\n:host(.title-small) {\n  -webkit-padding-start: 9px;\n  padding-inline-start: 9px;\n  -webkit-padding-end: 9px;\n  padding-inline-end: 9px;\n  padding-top: 6px;\n  padding-bottom: 16px;\n  position: relative;\n  font-size: 13px;\n  font-weight: normal;\n}\n\n:host(.title-large) {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 0;\n  padding-bottom: 0;\n  transform-origin: left center;\n  bottom: 0;\n  align-items: flex-end;\n  min-width: 100%;\n  padding-bottom: 6px;\n  font-size: 34px;\n  font-weight: 700;\n  text-align: start;\n}\n\n:host(.title-large.title-rtl) {\n  transform-origin: right center;\n}\n\n:host(.title-large.ion-cloned-element) {\n  --color: var(--ion-text-color, #000);\n}\n\n:host(.title-large) .toolbar-title {\n  transform-origin: inherit;\n}\n:host-context([dir=rtl]):host(.title-large) .toolbar-title, :host-context([dir=rtl]).title-large .toolbar-title {\n  transform-origin: calc(100% - inherit);\n}",":host {\n  /**\n   * @prop --color: Text color of the title\n   */\n  --color: initial;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  transform: translateZ(0);\n  color: var(--color);\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n.toolbar-title {\n  display: block;\n  width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  pointer-events: auto;\n}\n\n:host(.title-small) .toolbar-title {\n  white-space: normal;\n}\n\n:host {\n  -webkit-padding-start: 20px;\n  padding-inline-start: 20px;\n  -webkit-padding-end: 20px;\n  padding-inline-end: 20px;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-size: 20px;\n  font-weight: 500;\n  letter-spacing: 0.0125em;\n}\n\n:host(.title-small) {\n  width: 100%;\n  height: 100%;\n  font-size: 15px;\n  font-weight: normal;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { createColorClasses } from '../../utils/theme';\nexport class ToolbarTitle {\n  constructor() {\n    this.color = undefined;\n    this.size = undefined;\n  }\n  sizeChanged() {\n    this.emitStyle();\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  emitStyle() {\n    const size = this.getSize();\n    this.ionStyle.emit({\n      [`title-${size}`]: true,\n    });\n  }\n  getSize() {\n    return this.size !== undefined ? this.size : 'default';\n  }\n  render() {\n    const mode = getIonMode(this);\n    const size = this.getSize();\n    return (h(Host, { class: createColorClasses(this.color, {\n        [mode]: true,\n        [`title-${size}`]: true,\n        'title-rtl': document.dir === 'rtl',\n      }) }, h(\"div\", { class: \"toolbar-title\" }, h(\"slot\", null))));\n  }\n  static get is() { return \"ion-title\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"title.ios.scss\"],\n      \"md\": [\"title.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"title.ios.css\"],\n      \"md\": [\"title.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"size\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'large' | 'small'\",\n          \"resolved\": \"\\\"large\\\" | \\\"small\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The size of the toolbar title.\"\n        },\n        \"attribute\": \"size\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionStyle\",\n        \"name\": \"ionStyle\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the styles change.\"\n        },\n        \"complexType\": {\n          \"original\": \"StyleEventDetail\",\n          \"resolved\": \"StyleEventDetail\",\n          \"references\": {\n            \"StyleEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"size\",\n        \"methodName\": \"sizeChanged\"\n      }];\n  }\n}\n"],"names":[],"sourceRoot":""}