"use strict";
globalThis["webpackHotUpdateatomium_docs"]("packages_library_dist_esm_ion-tabs_entry_js",{

/***/ "../../packages/library/dist/esm/ion-tabs.entry.js":
/*!*********************************************************!*\
  !*** ../../packages/library/dist/esm/ion-tabs.entry.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_tabs": () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var _index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-77c1beb5.js */ "../../packages/library/dist/esm/index-77c1beb5.js");

const tabsCss = ":host{left:0;right:0;top:0;bottom:0;display:flex;position:absolute;flex-direction:column;width:100%;height:100%;contain:layout size style;z-index:0}.tabs-inner{position:relative;flex:1;contain:layout size style}";
const Tabs = class {
  constructor(hostRef) {
    (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.d)(this, "ionNavWillLoad", 7);
    this.ionTabsWillChange = (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.d)(this, "ionTabsWillChange", 3);
    this.ionTabsDidChange = (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.d)(this, "ionTabsDidChange", 3);
    this.transitioning = false;
    this.onTabClicked = ev => {
      const {
        href,
        tab
      } = ev.detail;
      if (this.useRouter && href !== undefined) {
        const router = document.querySelector('ion-router');
        if (router) {
          router.push(href);
        }
      } else {
        this.select(tab);
      }
    };
    this.selectedTab = undefined;
    this.useRouter = false;
  }
  async componentWillLoad() {
    if (!this.useRouter) {
      this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');
    }
    if (!this.useRouter) {
      const tabs = this.tabs;
      if (tabs.length > 0) {
        await this.select(tabs[0]);
      }
    }
    this.ionNavWillLoad.emit();
  }
  componentWillRender() {
    const tabBar = this.el.querySelector('ion-tab-bar');
    if (tabBar) {
      const tab = this.selectedTab ? this.selectedTab.tab : undefined;
      tabBar.selectedTab = tab;
    }
  }
  async select(tab) {
    const selectedTab = getTab(this.tabs, tab);
    if (!this.shouldSwitch(selectedTab)) {
      return false;
    }
    await this.setActive(selectedTab);
    await this.notifyRouter();
    this.tabSwitch();
    return true;
  }
  async getTab(tab) {
    return getTab(this.tabs, tab);
  }
  getSelected() {
    return Promise.resolve(this.selectedTab ? this.selectedTab.tab : undefined);
  }
  async setRouteId(id) {
    const selectedTab = getTab(this.tabs, id);
    if (!this.shouldSwitch(selectedTab)) {
      return {
        changed: false,
        element: this.selectedTab
      };
    }
    await this.setActive(selectedTab);
    return {
      changed: true,
      element: this.selectedTab,
      markVisible: () => this.tabSwitch()
    };
  }
  async getRouteId() {
    var _a;
    const tabId = (_a = this.selectedTab) === null || _a === void 0 ? void 0 : _a.tab;
    return tabId !== undefined ? {
      id: tabId,
      element: this.selectedTab
    } : undefined;
  }
  setActive(selectedTab) {
    if (this.transitioning) {
      return Promise.reject('transitioning already happening');
    }
    this.transitioning = true;
    this.leavingTab = this.selectedTab;
    this.selectedTab = selectedTab;
    this.ionTabsWillChange.emit({
      tab: selectedTab.tab
    });
    selectedTab.active = true;
    return Promise.resolve();
  }
  tabSwitch() {
    const selectedTab = this.selectedTab;
    const leavingTab = this.leavingTab;
    this.leavingTab = undefined;
    this.transitioning = false;
    if (!selectedTab) {
      return;
    }
    if (leavingTab !== selectedTab) {
      if (leavingTab) {
        leavingTab.active = false;
      }
      this.ionTabsDidChange.emit({
        tab: selectedTab.tab
      });
    }
  }
  notifyRouter() {
    if (this.useRouter) {
      const router = document.querySelector('ion-router');
      if (router) {
        return router.navChanged('forward');
      }
    }
    return Promise.resolve(false);
  }
  shouldSwitch(selectedTab) {
    const leavingTab = this.selectedTab;
    return selectedTab !== undefined && selectedTab !== leavingTab && !this.transitioning;
  }
  get tabs() {
    return Array.from(this.el.querySelectorAll('ion-tab'));
  }
  render() {
    return (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.H, {
      onIonTabButtonClick: this.onTabClicked
    }, (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
      name: "top"
    }), (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      class: "tabs-inner"
    }, (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)), (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
      name: "bottom"
    }));
  }
  get el() {
    return (0,_index_77c1beb5_js__WEBPACK_IMPORTED_MODULE_0__.e)(this);
  }
};
const getTab = (tabs, tab) => {
  const tabEl = typeof tab === 'string' ? tabs.find(t => t.tab === tab) : tab;
  if (!tabEl) {
    console.error(`tab with id: "${tabEl}" does not exist`);
  }
  return tabEl;
};
Tabs.style = tabsCss;


/***/ })

});
//# sourceMappingURL=packages_library_dist_esm_ion-tabs_entry_js.3d3fd5fdea925f35dd26.hot-update.js.map