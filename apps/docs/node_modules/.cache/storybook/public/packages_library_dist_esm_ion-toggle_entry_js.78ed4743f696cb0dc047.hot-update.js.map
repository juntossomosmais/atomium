{"version":3,"file":"packages_library_dist_esm_ion-toggle_entry_js.78ed4743f696cb0dc047.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACsBA;AACA;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAkRA;AACA;AACA;AACA;AAEA;;AAEA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toggle/toggle.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toggle/toggle.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toggle/toggle.js"],"sourcesContent":[":host {\n  /**\n   * @prop --track-background: Background of the toggle track\n   * @prop --track-background-checked: Background of the toggle track when checked\n   * @prop --border-radius: Border radius of the toggle track\n   *\n   * @prop --handle-background: Background of the toggle handle\n   * @prop --handle-background-checked: Background of the toggle handle when checked\n   *\n   * @prop --handle-border-radius: Border radius of the toggle handle\n   * @prop --handle-box-shadow: Box shadow of the toggle handle\n   * @prop --handle-height: Height of the toggle handle\n   * @prop --handle-max-height: Maximum height of the toggle handle\n   * @prop --handle-width: Width of the toggle handle\n   * @prop --handle-spacing: Horizontal spacing around the toggle handle\n   * @prop --handle-transition: Transition of the toggle handle\n   */\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  outline: none;\n  cursor: pointer;\n  touch-action: none;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item:not(.legacy-toggle)) {\n  width: 100%;\n  height: 100%;\n}\n\n:host(.in-item[slot=start]:not(.legacy-toggle)),\n:host(.in-item[slot=end]:not(.legacy-toggle)) {\n  width: auto;\n}\n\n:host(.legacy-toggle) {\n  contain: content;\n}\n\n:host(.ion-focused) input {\n  border: 2px solid #5e9ed6;\n}\n\n:host(.toggle-disabled) {\n  pointer-events: none;\n}\n\n:host(.legacy-toggle) label {\n  top: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  opacity: 0;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host(.legacy-toggle) label {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.legacy-toggle) label {\n    left: 0;\n  }\n  :host-context([dir=rtl]):host(.legacy-toggle) label, :host-context([dir=rtl]).legacy-toggle label {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n}\n:host(.legacy-toggle) label::-moz-focus-inner {\n  border: 0;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.toggle-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  transition: background-color 15ms linear;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.toggle-justify-space-between) .toggle-wrapper {\n  justify-content: space-between;\n}\n\n:host(.toggle-justify-start) .toggle-wrapper {\n  justify-content: start;\n}\n\n:host(.toggle-justify-end) .toggle-wrapper {\n  justify-content: end;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.toggle-label-placement-start) .toggle-wrapper {\n  flex-direction: row;\n}\n\n:host(.toggle-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.toggle-label-placement-end) .toggle-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.toggle-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n.toggle-icon-wrapper {\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  transition: var(--handle-transition);\n  will-change: transform;\n}\n\n.toggle-icon {\n  border-radius: var(--border-radius);\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: var(--track-background);\n  pointer-events: none;\n  overflow: inherit;\n}\n\n:host(.toggle-checked) .toggle-icon {\n  background: var(--track-background-checked);\n}\n\n.toggle-inner {\n  border-radius: var(--handle-border-radius);\n  position: absolute;\n  left: var(--handle-spacing);\n  width: var(--handle-width);\n  height: var(--handle-height);\n  max-height: var(--handle-max-height);\n  transition: var(--handle-transition);\n  background: var(--handle-background);\n  box-shadow: var(--handle-box-shadow);\n  contain: strict;\n}\n\n/**\n * We do not use the @ltr and @rtl mixins\n * here because ion-toggle uses the Shadow DOM\n * and WebKit does not support :host-context.\n */\n:host(.toggle-ltr) .toggle-inner {\n  left: var(--handle-spacing);\n}\n\n:host(.toggle-rtl) .toggle-inner {\n  right: var(--handle-spacing);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  background: var(--handle-background-checked);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);\n}\n\n:host {\n  --track-background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.088);\n  --track-background-checked: var(--ion-color-primary, #3880ff);\n  --border-radius: 16px;\n  --handle-background: #ffffff;\n  --handle-background-checked: #ffffff;\n  --handle-border-radius: 25.5px;\n  --handle-box-shadow: 0 3px 12px rgba(0, 0, 0, 0.16), 0 3px 1px rgba(0, 0, 0, 0.1);\n  --handle-height: calc(32px - (2px * 2));\n  --handle-max-height: calc(100% - var(--handle-spacing) * 2);\n  --handle-width: calc(32px - (2px * 2));\n  --handle-spacing: 2px;\n  --handle-transition: transform 300ms, width 120ms ease-in-out 80ms, left 110ms ease-in-out 80ms, right 110ms ease-in-out 80ms;\n}\n\n:host(.legacy-toggle) {\n  width: 51px;\n  height: 32px;\n  contain: strict;\n  overflow: hidden;\n}\n\n.native-wrapper .toggle-icon {\n  width: 51px;\n  height: 32px;\n  /**\n   * The handle box shadow should not\n   * overflow outside of the track container.\n   */\n  overflow: hidden;\n}\n\n:host(.ion-color.toggle-checked) .toggle-icon {\n  background: var(--ion-color-base);\n}\n\n:host(.toggle-activated) .toggle-switch-icon {\n  opacity: 0;\n}\n\n.toggle-icon {\n  transform: translate3d(0, 0, 0);\n  transition: background-color 300ms;\n}\n\n.toggle-inner {\n  will-change: transform;\n}\n\n.toggle-switch-icon {\n  position: absolute;\n  top: 50%;\n  width: 11px;\n  height: 11px;\n  transform: translateY(-50%);\n  transition: opacity 300ms, color 300ms;\n}\n\n.toggle-switch-icon {\n  position: absolute;\n  color: var(--ion-color-dark);\n}\n\n:host(.toggle-ltr) .toggle-switch-icon {\n  /* stylelint-disable-next-line property-disallowed-list */\n  right: 6px;\n}\n\n:host(.toggle-rtl) .toggle-switch-icon {\n  /* stylelint-disable property-disallowed-list */\n  right: initial;\n  left: 6px;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.toggle-checked) .toggle-switch-icon.toggle-switch-icon-checked {\n  color: var(--ion-color-contrast, #fff);\n}\n\n:host(.toggle-checked) .toggle-switch-icon:not(.toggle-switch-icon-checked) {\n  opacity: 0;\n}\n\n.toggle-switch-icon-checked {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  transform: translateY(-50%) rotate(90deg);\n}\n\n:host(.toggle-ltr) .toggle-switch-icon-checked {\n  /* stylelint-disable property-disallowed-list */\n  right: initial;\n  left: 4px;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.toggle-rtl) .toggle-switch-icon-checked {\n  /* stylelint-disable-next-line property-disallowed-list */\n  right: 4px;\n}\n\n:host(.toggle-activated) .toggle-icon::before,\n:host(.toggle-checked) .toggle-icon::before {\n  transform: scale3d(0, 0, 0);\n}\n\n:host(.toggle-activated.toggle-checked) .toggle-inner::before {\n  transform: scale3d(0, 0, 0);\n}\n\n:host(.toggle-activated) .toggle-inner {\n  width: calc(var(--handle-width) + 6px);\n}\n\n:host(.toggle-ltr.toggle-activated.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width) - 6px), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-activated.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width) + 6px), 0, 0);\n}\n\n:host(.toggle-disabled) {\n  opacity: 0.3;\n}\n\n:host(.in-item.legacy-toggle) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 0;\n  padding-inline-end: 0;\n  padding-top: 6px;\n  padding-bottom: 5px;\n}\n\n:host(.in-item.legacy-toggle[slot=start]) {\n  -webkit-padding-start: 0;\n  padding-inline-start: 0;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 6px;\n  padding-bottom: 5px;\n}",":host {\n  /**\n   * @prop --track-background: Background of the toggle track\n   * @prop --track-background-checked: Background of the toggle track when checked\n   * @prop --border-radius: Border radius of the toggle track\n   *\n   * @prop --handle-background: Background of the toggle handle\n   * @prop --handle-background-checked: Background of the toggle handle when checked\n   *\n   * @prop --handle-border-radius: Border radius of the toggle handle\n   * @prop --handle-box-shadow: Box shadow of the toggle handle\n   * @prop --handle-height: Height of the toggle handle\n   * @prop --handle-max-height: Maximum height of the toggle handle\n   * @prop --handle-width: Width of the toggle handle\n   * @prop --handle-spacing: Horizontal spacing around the toggle handle\n   * @prop --handle-transition: Transition of the toggle handle\n   */\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  outline: none;\n  cursor: pointer;\n  touch-action: none;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item:not(.legacy-toggle)) {\n  width: 100%;\n  height: 100%;\n}\n\n:host(.in-item[slot=start]:not(.legacy-toggle)),\n:host(.in-item[slot=end]:not(.legacy-toggle)) {\n  width: auto;\n}\n\n:host(.legacy-toggle) {\n  contain: content;\n}\n\n:host(.ion-focused) input {\n  border: 2px solid #5e9ed6;\n}\n\n:host(.toggle-disabled) {\n  pointer-events: none;\n}\n\n:host(.legacy-toggle) label {\n  top: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  opacity: 0;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host(.legacy-toggle) label {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.legacy-toggle) label {\n    left: 0;\n  }\n  :host-context([dir=rtl]):host(.legacy-toggle) label, :host-context([dir=rtl]).legacy-toggle label {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n}\n:host(.legacy-toggle) label::-moz-focus-inner {\n  border: 0;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.toggle-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  transition: background-color 15ms linear;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.toggle-justify-space-between) .toggle-wrapper {\n  justify-content: space-between;\n}\n\n:host(.toggle-justify-start) .toggle-wrapper {\n  justify-content: start;\n}\n\n:host(.toggle-justify-end) .toggle-wrapper {\n  justify-content: end;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.toggle-label-placement-start) .toggle-wrapper {\n  flex-direction: row;\n}\n\n:host(.toggle-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.toggle-label-placement-end) .toggle-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.toggle-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n.toggle-icon-wrapper {\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  transition: var(--handle-transition);\n  will-change: transform;\n}\n\n.toggle-icon {\n  border-radius: var(--border-radius);\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: var(--track-background);\n  pointer-events: none;\n  overflow: inherit;\n}\n\n:host(.toggle-checked) .toggle-icon {\n  background: var(--track-background-checked);\n}\n\n.toggle-inner {\n  border-radius: var(--handle-border-radius);\n  position: absolute;\n  left: var(--handle-spacing);\n  width: var(--handle-width);\n  height: var(--handle-height);\n  max-height: var(--handle-max-height);\n  transition: var(--handle-transition);\n  background: var(--handle-background);\n  box-shadow: var(--handle-box-shadow);\n  contain: strict;\n}\n\n/**\n * We do not use the @ltr and @rtl mixins\n * here because ion-toggle uses the Shadow DOM\n * and WebKit does not support :host-context.\n */\n:host(.toggle-ltr) .toggle-inner {\n  left: var(--handle-spacing);\n}\n\n:host(.toggle-rtl) .toggle-inner {\n  right: var(--handle-spacing);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  background: var(--handle-background-checked);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);\n}\n\n:host {\n  --track-background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.39);\n  --track-background-checked: rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.5);\n  --border-radius: 14px;\n  --handle-background: #ffffff;\n  --handle-background-checked: var(--ion-color-primary, #3880ff);\n  --handle-border-radius: 50%;\n  --handle-box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  --handle-width: 20px;\n  --handle-height: 20px;\n  --handle-max-height: calc(100% + 6px);\n  --handle-spacing: 0;\n  --handle-transition: transform 160ms cubic-bezier(0.4, 0, 0.2, 1), background-color 160ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n:host(.legacy-toggle) {\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  width: 36px;\n  height: 14px;\n  contain: strict;\n}\n\n.native-wrapper .toggle-icon {\n  width: 36px;\n  height: 14px;\n}\n\n:host(.ion-color.toggle-checked) .toggle-icon {\n  background: rgba(var(--ion-color-base-rgb), 0.5);\n}\n\n:host(.ion-color.toggle-checked) .toggle-inner {\n  background: var(--ion-color-base);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  color: var(--ion-color-contrast, #fff);\n}\n\n.toggle-icon {\n  transition: background-color 160ms;\n}\n\n.toggle-inner {\n  will-change: background-color, transform;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #000;\n}\n\n.toggle-inner .toggle-switch-icon {\n  -webkit-padding-start: 1px;\n  padding-inline-start: 1px;\n  -webkit-padding-end: 1px;\n  padding-inline-end: 1px;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.toggle-disabled) {\n  opacity: 0.3;\n}\n\n:host(.in-item.legacy-toggle) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 0;\n  padding-inline-end: 0;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  cursor: pointer;\n}\n\n:host(.in-item.legacy-toggle[slot=start]) {\n  -webkit-padding-start: 2px;\n  padding-inline-start: 2px;\n  -webkit-padding-end: 18px;\n  padding-inline-end: 18px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\n// TODO(FW-2845) - Use @utils/forms and @utils/logging when https://github.com/ionic-team/stencil/issues/3826 is resolved\nimport { checkmarkOutline, removeOutline, ellipseOutline } from 'ionicons/icons';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { createLegacyFormController } from '../../utils/forms';\nimport { getAriaLabel, renderHiddenInput, inheritAriaAttributes } from '../../utils/helpers';\nimport { printIonWarning } from '../../utils/logging';\nimport { hapticSelection } from '../../utils/native/haptic';\nimport { isRTL } from '../../utils/rtl';\nimport { createColorClasses, hostContext } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle.\n *\n * @part track - The background track of the toggle.\n * @part handle - The toggle handle, or knob, used to change the checked state.\n */\nexport class Toggle {\n  constructor() {\n    this.inputId = `ion-tg-${toggleIds++}`;\n    this.lastDrag = 0;\n    this.inheritedAttributes = {};\n    // This flag ensures we log the deprecation warning at most once.\n    this.hasLoggedDeprecationWarning = false;\n    this.onClick = (ev) => {\n      ev.preventDefault();\n      if (this.lastDrag + 300 < Date.now()) {\n        this.toggleChecked();\n      }\n    };\n    this.onFocus = () => {\n      this.ionFocus.emit();\n    };\n    this.onBlur = () => {\n      this.ionBlur.emit();\n    };\n    this.getSwitchLabelIcon = (mode, checked) => {\n      if (mode === 'md') {\n        return checked ? checkmarkOutline : removeOutline;\n      }\n      return checked ? removeOutline : ellipseOutline;\n    };\n    this.activated = false;\n    this.color = undefined;\n    this.name = this.inputId;\n    this.checked = false;\n    this.disabled = false;\n    this.value = 'on';\n    this.enableOnOffLabels = config.get('toggleOnOffLabels');\n    this.labelPlacement = 'start';\n    this.legacy = undefined;\n    this.justify = 'space-between';\n  }\n  disabledChanged() {\n    this.emitStyle();\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  toggleChecked() {\n    const { checked, value } = this;\n    const isNowChecked = !checked;\n    this.checked = isNowChecked;\n    this.ionChange.emit({\n      checked: isNowChecked,\n      value,\n    });\n  }\n  async connectedCallback() {\n    const { el } = this;\n    this.legacyFormController = createLegacyFormController(el);\n    this.gesture = (await import('../../utils/gesture')).createGesture({\n      el,\n      gestureName: 'toggle',\n      gesturePriority: 100,\n      threshold: 5,\n      passive: false,\n      onStart: () => this.onStart(),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  componentWillLoad() {\n    this.emitStyle();\n    if (!this.legacyFormController.hasLegacyControl()) {\n      this.inheritedAttributes = Object.assign({}, inheritAriaAttributes(this.el));\n    }\n  }\n  emitStyle() {\n    if (this.legacyFormController.hasLegacyControl()) {\n      this.ionStyle.emit({\n        'interactive-disabled': this.disabled,\n      });\n    }\n  }\n  onStart() {\n    this.activated = true;\n    // touch-action does not work in iOS\n    this.setFocus();\n  }\n  onMove(detail) {\n    if (shouldToggle(isRTL(this.el), this.checked, detail.deltaX, -10)) {\n      this.toggleChecked();\n      hapticSelection();\n    }\n  }\n  onEnd(ev) {\n    this.activated = false;\n    this.lastDrag = Date.now();\n    ev.event.preventDefault();\n    ev.event.stopImmediatePropagation();\n  }\n  getValue() {\n    return this.value || '';\n  }\n  setFocus() {\n    if (this.focusEl) {\n      this.focusEl.focus();\n    }\n  }\n  renderOnOffSwitchLabels(mode, checked) {\n    const icon = this.getSwitchLabelIcon(mode, checked);\n    return (h(\"ion-icon\", { class: {\n        'toggle-switch-icon': true,\n        'toggle-switch-icon-checked': checked,\n      }, icon: icon, \"aria-hidden\": \"true\" }));\n  }\n  renderToggleControl() {\n    const mode = getIonMode(this);\n    const { enableOnOffLabels, checked } = this;\n    return (h(\"div\", { class: \"toggle-icon\", part: \"track\" }, enableOnOffLabels &&\n      mode === 'ios' && [this.renderOnOffSwitchLabels(mode, true), this.renderOnOffSwitchLabels(mode, false)], h(\"div\", { class: \"toggle-icon-wrapper\" }, h(\"div\", { class: \"toggle-inner\", part: \"handle\" }, enableOnOffLabels && mode === 'md' && this.renderOnOffSwitchLabels(mode, checked)))));\n  }\n  get hasLabel() {\n    return this.el.textContent !== '';\n  }\n  render() {\n    const { legacyFormController } = this;\n    return legacyFormController.hasLegacyControl() ? this.renderLegacyToggle() : this.renderToggle();\n  }\n  renderToggle() {\n    const { activated, color, checked, disabled, el, justify, labelPlacement, inputId, name } = this;\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const rtl = isRTL(el) ? 'rtl' : 'ltr';\n    renderHiddenInput(true, el, name, checked ? value : '', disabled);\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(color, {\n        [mode]: true,\n        'in-item': hostContext('ion-item', el),\n        'toggle-activated': activated,\n        'toggle-checked': checked,\n        'toggle-disabled': disabled,\n        [`toggle-justify-${justify}`]: true,\n        [`toggle-label-placement-${labelPlacement}`]: true,\n        [`toggle-${rtl}`]: true,\n      }) }, h(\"label\", { class: \"toggle-wrapper\" }, h(\"input\", Object.assign({ type: \"checkbox\", role: \"switch\", \"aria-checked\": `${checked}`, checked: checked, disabled: disabled, id: inputId, onFocus: () => this.onFocus(), onBlur: () => this.onBlur(), ref: (focusEl) => (this.focusEl = focusEl) }, this.inheritedAttributes)), h(\"div\", { class: {\n        'label-text-wrapper': true,\n        'label-text-wrapper-hidden': !this.hasLabel,\n      } }, h(\"slot\", null)), h(\"div\", { class: \"native-wrapper\" }, this.renderToggleControl()))));\n  }\n  renderLegacyToggle() {\n    if (!this.hasLoggedDeprecationWarning) {\n      printIonWarning(`ion-toggle now requires providing a label with either the default slot or the \"aria-label\" attribute. To migrate, remove any usage of \"ion-label\" and pass the label text to either the component or the \"aria-label\" attribute.\n\nExample: <ion-toggle>Email</ion-toggle>\nExample with aria-label: <ion-toggle aria-label=\"Email\"></ion-toggle>\n\nDevelopers can use the \"legacy\" property to continue using the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.`, this.el);\n      if (this.legacy) {\n        printIonWarning(`ion-toggle is being used with the \"legacy\" property enabled which will forcibly enable the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.\n\nDevelopers can dismiss this warning by removing their usage of the \"legacy\" property and using the new toggle syntax.`, this.el);\n      }\n      this.hasLoggedDeprecationWarning = true;\n    }\n    const { activated, color, checked, disabled, el, inputId, name } = this;\n    const mode = getIonMode(this);\n    const { label, labelId, labelText } = getAriaLabel(el, inputId);\n    const value = this.getValue();\n    const rtl = isRTL(el) ? 'rtl' : 'ltr';\n    renderHiddenInput(true, el, name, checked ? value : '', disabled);\n    return (h(Host, { onClick: this.onClick, \"aria-labelledby\": label ? labelId : null, \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, role: \"switch\", class: createColorClasses(color, {\n        [mode]: true,\n        'in-item': hostContext('ion-item', el),\n        'toggle-activated': activated,\n        'toggle-checked': checked,\n        'toggle-disabled': disabled,\n        'legacy-toggle': true,\n        interactive: true,\n        [`toggle-${rtl}`]: true,\n      }) }, this.renderToggleControl(), h(\"label\", { htmlFor: inputId }, labelText), h(\"input\", { type: \"checkbox\", role: \"switch\", \"aria-checked\": `${checked}`, disabled: disabled, id: inputId, onFocus: () => this.onFocus(), onBlur: () => this.onBlur(), ref: (focusEl) => (this.focusEl = focusEl) })));\n  }\n  static get is() { return \"ion-toggle\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"toggle.ios.scss\"],\n      \"md\": [\"toggle.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"toggle.ios.css\"],\n      \"md\": [\"toggle.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the control, which is submitted with the form data.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": false,\n        \"defaultValue\": \"this.inputId\"\n      },\n      \"checked\": {\n        \"type\": \"boolean\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toggle is selected.\"\n        },\n        \"attribute\": \"checked\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the toggle.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | null\",\n          \"resolved\": \"null | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the toggle does not mean if it's checked or not, use the `checked`\\nproperty for that.\\n\\nThe value of a toggle is analogous to the value of a `<input type=\\\"checkbox\\\">`,\\nit's only used when the toggle participates in a native `<form>`.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"'on'\"\n      },\n      \"enableOnOffLabels\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean | undefined\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Enables the on/off accessibility switch labels within the toggle.\"\n        },\n        \"attribute\": \"enable-on-off-labels\",\n        \"reflect\": false,\n        \"defaultValue\": \"config.get('toggleOnOffLabels')\"\n      },\n      \"labelPlacement\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'start' | 'end' | 'fixed'\",\n          \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"start\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Where to place the label relative to the input.\\n`\\\"start\\\"`: The label will appear to the left of the toggle in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the toggle in LTR and to the left in RTL.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n        },\n        \"attribute\": \"label-placement\",\n        \"reflect\": false,\n        \"defaultValue\": \"'start'\"\n      },\n      \"legacy\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the `legacy` property to `true` to forcibly use the legacy form control markup.\\nIonic will only opt components in to the modern form markup when they are\\nusing either the `aria-label` attribute or the default slot that contains\\nthe label text. As a result, the `legacy` property should only be used as\\nan escape hatch when you want to avoid this automatic opt-in behavior.\\nNote that this property will be removed in an upcoming major release\\nof Ionic, and all form components will be opted-in to using the modern form markup.\"\n        },\n        \"attribute\": \"legacy\",\n        \"reflect\": false\n      },\n      \"justify\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'start' | 'end' | 'space-between'\",\n          \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"How to pack the label and toggle within a line.\\n`\\\"start\\\"`: The label and toggle will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and toggle will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and toggle will appear on opposite\\nends of the line with space between the two elements.\"\n        },\n        \"attribute\": \"justify\",\n        \"reflect\": false,\n        \"defaultValue\": \"'space-between'\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"activated\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the user switches the toggle on or off. Does not emit\\nwhen programmatically changing the value of the `checked` property.\"\n        },\n        \"complexType\": {\n          \"original\": \"ToggleChangeEventDetail\",\n          \"resolved\": \"ToggleChangeEventDetail<any>\",\n          \"references\": {\n            \"ToggleChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./toggle-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionFocus\",\n        \"name\": \"ionFocus\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the toggle has focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionBlur\",\n        \"name\": \"ionBlur\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the toggle loses focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionStyle\",\n        \"name\": \"ionStyle\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the styles change.\"\n        },\n        \"complexType\": {\n          \"original\": \"StyleEventDetail\",\n          \"resolved\": \"StyleEventDetail\",\n          \"references\": {\n            \"StyleEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }];\n  }\n}\nconst shouldToggle = (rtl, checked, deltaX, margin) => {\n  if (checked) {\n    return (!rtl && margin > deltaX) || (rtl && -margin < deltaX);\n  }\n  else {\n    return (!rtl && -margin < deltaX) || (rtl && margin > deltaX);\n  }\n};\nlet toggleIds = 0;\n"],"names":[],"sourceRoot":""}