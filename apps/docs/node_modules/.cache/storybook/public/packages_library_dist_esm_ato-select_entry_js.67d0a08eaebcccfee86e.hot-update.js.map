{"version":3,"file":"packages_library_dist_esm_ato-select_entry_js.67d0a08eaebcccfee86e.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;ACQA;;;;;;;;AA0CA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AA3DA;;;;;;;AAOA;;;AAIA;AAMA;;AAQA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AA2BA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA","sources":["webpack://atomium-docs/./src/components/select/select.scss","webpack://atomium-docs/./src/components/select/select.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Mode } from '@ionic/core'\nimport { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\n\n@Component({\n  tag: 'ato-select',\n  styleUrl: 'select.scss',\n  shadow: false,\n})\nexport class AtoSelect {\n  @Element() selectEl!: HTMLIonSelectElement\n\n  @Prop() color?: 'primary' | 'secondary'\n  @Prop() name: string\n  @Prop() interface?: 'popover' | 'action-sheet' = 'popover'\n  @Prop() placeholder: string\n  @Prop() cancelText?: string\n  @Prop() okText?: string\n  @Prop() disabled?: boolean\n  @Prop() multiple?: boolean\n  @Prop() size?: 'small' | 'large'\n  @Prop() mode: Mode = 'md'\n  @Prop() overlayDismiss?: boolean\n\n  @Prop() label?: string\n  @Prop() labelPlacement?: 'fixed' | 'stacked' = 'stacked'\n\n  @Prop({ mutable: true }) options: Array<{\n    value: string\n    selected?: boolean\n    disabled?: boolean\n  }> = []\n\n  @Event() atoBlur!: EventEmitter<void>\n  @Event() atoCancel!: EventEmitter<void>\n  @Event({ bubbles: true, composed: true }) atoChange!: EventEmitter<string>\n  @Event() atoDimiss!: EventEmitter<void>\n  @Event() atoFocus!: EventEmitter<void>\n\n  componentDidLoad() {\n    this.selectEl.addEventListener('ionChange', this.handleChange)\n    this.selectEl.addEventListener('ionBlur', this.handleBlur)\n    this.selectEl.addEventListener('ionFocus', this.handleFocus)\n  }\n\n  disconnectedCallback() {\n    this.selectEl.removeEventListener('ionChange', this.handleChange)\n    this.selectEl.removeEventListener('ionBlur', this.handleBlur)\n    this.selectEl.removeEventListener('ionFocus', this.handleFocus)\n  }\n\n  private handleChange = (event: CustomEvent<{ value: string }>) => {\n    this.atoChange.emit(event.detail.value)\n  }\n\n  private handleCancel = () => {\n    this.selectEl.removeEventListener('ionCancel', this.handleCancel)\n    this.atoCancel.emit()\n  }\n\n  private handleBlur = () => {\n    this.selectEl.removeEventListener('ionBlur', this.handleBlur)\n    this.atoBlur.emit()\n  }\n\n  private handleFocus = () => {\n    this.selectEl.removeEventListener('ionFocus', this.handleBlur)\n    this.atoFocus.emit()\n  }\n\n  private handleDimiss = () => {\n    this.selectEl.removeEventListener('ionDimiss', this.handleDimiss)\n    this.atoDimiss.emit()\n  }\n\n  render(): JSX.Element {\n    return (\n      <ion-item>\n        <ion-select\n          name={this.name}\n          label={this.label}\n          label-placement={this.labelPlacement}\n          interface={this.interface}\n          placeholder={this.placeholder}\n          cancel-text={this.cancelText}\n          ok-text={this.okText}\n          disabled={this.disabled}\n          multiple={this.multiple}\n          color={this.color}\n          mode={this.mode}\n          overlay-dismiss={this.overlayDismiss}\n          onIonChange={this.handleChange}\n          onIonBlur={this.handleBlur}\n          onIonFocus={this.handleFocus}\n        >\n          {this.options.map((option) => (\n            <ion-select-option value={option.value} disabled={option.disabled}>\n              {option.value}\n            </ion-select-option>\n          ))}\n        </ion-select>\n      </ion-item>\n    )\n  }\n}\n"],"names":[],"sourceRoot":""}