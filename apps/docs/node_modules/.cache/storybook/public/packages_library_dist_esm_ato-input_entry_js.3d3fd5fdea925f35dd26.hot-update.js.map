{"version":3,"file":"packages_library_dist_esm_ato-input_entry_js.3d3fd5fdea925f35dd26.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACQA;;;;;;AAmDA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AA1DA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AASA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA","sources":["webpack://atomium-docs/./src/components/input/input.scss","webpack://atomium-docs/./src/components/input/input.tsx"],"sourcesContent":[":host(.ion-button) {\n  display: inline-block;\n}\n","import { Mode, TextFieldTypes } from '@ionic/core'\nimport { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\n\n@Component({\n  tag: 'ato-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class AtoInput {\n  @Element() inputEl!: HTMLInputElement\n\n  @Prop() color?: 'primary' | 'secondary'\n  @Prop() value: string\n  @Prop() type: TextFieldTypes = 'text'\n  @Prop() placeholder?: string\n  @Prop() name?: string\n  @Prop() minlength?: number\n  @Prop() maxlength?: number\n  @Prop() disabled = false\n  @Prop() required = false\n  @Prop() mode: Mode = 'md'\n  @Prop() fill: 'solid' | 'outline' = 'outline'\n  @Prop() autofocus = false\n  @Prop() pattern?: string\n  @Prop() accept?: string\n  @Prop() multiple = false\n  @Prop() clearOnEdit = false\n  @Prop() clearInput = false\n  @Prop() inputmode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search' = 'none'\n\n  @Prop() labelPlacement?: 'fixed' | 'stacked' | 'floating' = 'floating'\n  @Prop() label?: string\n\n  @Event() atoFocus!: EventEmitter<void>\n  @Event() atoBlur!: EventEmitter<void>\n  @Event({ bubbles: true, composed: true }) atoChange!: EventEmitter<string>\n\n  componentDidLoad() {\n    this.inputEl.addEventListener('ionChange', this.handleChange)\n    this.inputEl.addEventListener('ionInput', this.handleChange)\n    this.inputEl.addEventListener('ionBlur', this.handleBlur)\n    this.inputEl.addEventListener('ionFocus', this.handleFocus)\n  }\n\n  disconnectedCallback() {\n    this.inputEl.removeEventListener('ionChange', this.handleChange)\n    this.inputEl.removeEventListener('ionInput', this.handleChange)\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n  }\n\n  private handleChange = (event: any) => {\n    this.atoChange.emit(event.detail.value)\n  }\n\n  private handleBlur = () => {\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.atoBlur.emit()\n  }\n\n  private handleFocus = () => {\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n    this.atoFocus.emit()\n  }\n\n  render(): JSX.Element {\n    return (\n      <ion-input\n        class=\"ion-input\"\n        label={this.label}\n        labelPlacement={this.labelPlacement}\n        value={this.value}\n        type={this.type}\n        placeholder={this.placeholder}\n        name={this.name}\n        minlength={this.minlength}\n        maxlength={this.maxlength}\n        disabled={this.disabled}\n        required={this.required}\n        color={this.color}\n        mode={this.mode}\n        fill={this.fill}\n        autofocus={this.autofocus}\n        pattern={this.pattern}\n        inputmode={this.inputmode}\n        multiple={this.multiple}\n        clearInput={this.clearInput}\n        clearOnEdit={this.clearOnEdit}\n        onIonChange={this.handleChange}\n        onIonInput={this.handleChange}\n        onIonBlur={this.handleBlur}\n        onIonFocus={this.handleFocus}\n      />\n    )\n  }\n}\n"],"names":[],"sourceRoot":""}