{"version":3,"file":"library_dist_esm_ion-textarea_entry_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACUA;AACA;;;;;;;AACA;AACA;AACA;AASA;AACA;AAKA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAKA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;;;AAQA;AACA;AACA;;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAEA;;;AAMA;AACA;AACA;;AAGA;AAEA;;AAGA;;AAEA;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAikBA;;;;;;;;;;;;;;;;;;;;;;AChyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://atomium-storybook/../../node_modules/@ionic/core/dist/collection/components/textarea/textarea.ios.css","webpack://atomium-storybook/../../node_modules/@ionic/core/dist/collection/components/textarea/textarea.md.css","webpack://atomium-storybook/../../node_modules/@ionic/core/dist/collection/components/textarea/textarea.js","webpack://atomium-storybook/../../node_modules/@ionic/core/dist/collection/utils/theme.js"],"sourcesContent":[":host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: 0.5;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --border-radius: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  white-space: pre-wrap;\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  background: initial;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n.textarea-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n}\n.textarea-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-textarea,\n.textarea-wrapper::after {\n  padding-left: var(--padding-start);\n  padding-right: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n@supports (margin-inline-start: 0) or (-webkit-margin-start: 0) {\n  .native-textarea,\n.textarea-wrapper::after {\n    padding-left: unset;\n    padding-right: unset;\n    -webkit-padding-start: var(--padding-start);\n    padding-inline-start: var(--padding-start);\n    -webkit-padding-end: var(--padding-end);\n    padding-inline-end: var(--padding-end);\n  }\n}\n\n.native-textarea {\n  border-radius: var(--border-radius);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea[disabled]:not(.cloned-input) {\n  opacity: 0.4;\n}\n\n.cloned-input {\n  left: 0;\n  top: 0;\n  position: absolute;\n  pointer-events: none;\n}\n[dir=rtl] .cloned-input, :host-context([dir=rtl]) .cloned-input {\n  left: unset;\n  right: unset;\n  right: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow=true]) .cloned-input {\n  height: 100%;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n:host([auto-grow=true]) .native-textarea {\n  overflow: hidden;\n}\n\n:host {\n  --padding-top: 10px;\n  --padding-end: 10px;\n  --padding-bottom: 10px;\n  --padding-start: 0;\n  font-size: inherit;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n}",":host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: 0.5;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --border-radius: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  white-space: pre-wrap;\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  background: initial;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n.textarea-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n}\n.textarea-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-textarea,\n.textarea-wrapper::after {\n  padding-left: var(--padding-start);\n  padding-right: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n@supports (margin-inline-start: 0) or (-webkit-margin-start: 0) {\n  .native-textarea,\n.textarea-wrapper::after {\n    padding-left: unset;\n    padding-right: unset;\n    -webkit-padding-start: var(--padding-start);\n    padding-inline-start: var(--padding-start);\n    -webkit-padding-end: var(--padding-end);\n    padding-inline-end: var(--padding-end);\n  }\n}\n\n.native-textarea {\n  border-radius: var(--border-radius);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea[disabled]:not(.cloned-input) {\n  opacity: 0.4;\n}\n\n.cloned-input {\n  left: 0;\n  top: 0;\n  position: absolute;\n  pointer-events: none;\n}\n[dir=rtl] .cloned-input, :host-context([dir=rtl]) .cloned-input {\n  left: unset;\n  right: unset;\n  right: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow=true]) .cloned-input {\n  height: 100%;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n:host([auto-grow=true]) .native-textarea {\n  overflow: hidden;\n}\n\n:host {\n  --padding-top: 10px;\n  --padding-end: 0;\n  --padding-bottom: 11px;\n  --padding-start: 8px;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 8px;\n  margin-bottom: 0;\n  font-size: inherit;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h, writeTask } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { inheritAriaAttributes, debounceEvent, findItemLabel, inheritAttributes } from '../../utils/helpers';\nimport { createColorClasses } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Textarea {\n  constructor() {\n    this.inputId = `ion-textarea-${textareaIds++}`;\n    this.didBlurAfterEdit = false;\n    this.inheritedAttributes = {};\n    /**\n     * This is required for a WebKit bug which requires us to\n     * blur and focus an input to properly focus the input in\n     * an item with delegatesFocus. It will no longer be needed\n     * with iOS 14.\n     *\n     * @internal\n     */\n    this.fireFocusEvents = true;\n    this.hasFocus = false;\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     * Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.\n     */\n    this.autocapitalize = 'none';\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n    this.autofocus = false;\n    /**\n     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n     */\n    this.clearOnEdit = false;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n     */\n    this.debounce = 0;\n    /**\n     * If `true`, the user cannot interact with the textarea.\n     */\n    this.disabled = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    this.readonly = false;\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n    this.required = false;\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n    this.spellcheck = false;\n    /**\n     * If `true`, the textarea container will grow and shrink based\n     * on the contents of the textarea.\n     */\n    this.autoGrow = false;\n    /**\n     * The value of the textarea.\n     */\n    this.value = '';\n    this.onInput = (ev) => {\n      if (this.nativeInput) {\n        this.value = this.nativeInput.value;\n      }\n      this.emitStyle();\n      this.ionInput.emit(ev);\n    };\n    this.onFocus = (ev) => {\n      this.hasFocus = true;\n      this.focusChange();\n      if (this.fireFocusEvents) {\n        this.ionFocus.emit(ev);\n      }\n    };\n    this.onBlur = (ev) => {\n      this.hasFocus = false;\n      this.focusChange();\n      if (this.fireFocusEvents) {\n        this.ionBlur.emit(ev);\n      }\n    };\n    this.onKeyDown = () => {\n      this.checkClearOnEdit();\n    };\n  }\n  debounceChanged() {\n    this.ionChange = debounceEvent(this.ionChange, this.debounce);\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the native input element when the value changes\n   */\n  valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n    this.runAutoGrow();\n    this.emitStyle();\n    this.ionChange.emit({ value });\n  }\n  connectedCallback() {\n    this.emitStyle();\n    this.debounceChanged();\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n        detail: this.el,\n      }));\n    }\n  }\n  disconnectedCallback() {\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n        detail: this.el,\n      }));\n    }\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['data-form-type', 'title', 'tabindex']));\n  }\n  componentDidLoad() {\n    this.runAutoGrow();\n  }\n  /**\n   * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n  /**\n   * Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global\n   * `textarea.blur()`.\n   * @internal\n   */\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n  /**\n   * Returns the native `<textarea>` element used under the hood.\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      interactive: true,\n      textarea: true,\n      input: true,\n      'interactive-disabled': this.disabled,\n      'has-placeholder': this.placeholder !== undefined,\n      'has-value': this.hasValue(),\n      'has-focus': this.hasFocus,\n    });\n  }\n  runAutoGrow() {\n    if (this.nativeInput && this.autoGrow) {\n      writeTask(() => {\n        var _a;\n        if (this.textareaWrapper) {\n          // Replicated value is an attribute to be used in the stylesheet\n          // to set the inner contents of a pseudo element.\n          this.textareaWrapper.dataset.replicatedValue = (_a = this.value) !== null && _a !== void 0 ? _a : '';\n        }\n      });\n    }\n  }\n  /**\n   * Check if we need to clear the text input if clearOnEdit is enabled\n   */\n  checkClearOnEdit() {\n    if (!this.clearOnEdit) {\n      return;\n    }\n    // Did the input value change after it was blurred and edited?\n    if (this.didBlurAfterEdit && this.hasValue()) {\n      // Clear the input\n      this.value = '';\n    }\n    // Reset the flag\n    this.didBlurAfterEdit = false;\n  }\n  focusChange() {\n    // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n    if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n      this.didBlurAfterEdit = true;\n    }\n    this.emitStyle();\n  }\n  hasValue() {\n    return this.getValue() !== '';\n  }\n  getValue() {\n    return this.value || '';\n  }\n  render() {\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n    if (label) {\n      label.id = labelId;\n    }\n    return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n        [mode]: true,\n      }) }, h(\"div\", { class: \"textarea-wrapper\", ref: (el) => (this.textareaWrapper = el) }, h(\"textarea\", Object.assign({ class: \"native-textarea\", \"aria-labelledby\": label ? labelId : null, ref: (el) => (this.nativeInput = el), autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, disabled: this.disabled, maxLength: this.maxlength, minLength: this.minlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, this.inheritedAttributes), value))));\n  }\n  static get is() { return \"ion-textarea\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"textarea.ios.scss\"],\n      \"md\": [\"textarea.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"textarea.ios.css\"],\n      \"md\": [\"textarea.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"fireFocusEvents\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"This is required for a WebKit bug which requires us to\\nblur and focus an input to properly focus the input in\\nan item with delegatesFocus. It will no longer be needed\\nwith iOS 14.\"\n        },\n        \"attribute\": \"fire-focus-events\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"autocapitalize\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n        },\n        \"attribute\": \"autocapitalize\",\n        \"reflect\": false,\n        \"defaultValue\": \"'none'\"\n      },\n      \"autofocus\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"This Boolean attribute lets you specify that a form control should have input focus when the page loads.\"\n        },\n        \"attribute\": \"autofocus\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"clearOnEdit\": {\n        \"type\": \"boolean\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\\\"password\\\"`, `false` for all other types.\"\n        },\n        \"attribute\": \"clear-on-edit\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"debounce\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\"\n        },\n        \"attribute\": \"debounce\",\n        \"reflect\": false,\n        \"defaultValue\": \"0\"\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the textarea.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"inputmode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n          \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n        },\n        \"attribute\": \"inputmode\",\n        \"reflect\": false\n      },\n      \"enterkeyhint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n          \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n        },\n        \"attribute\": \"enterkeyhint\",\n        \"reflect\": false\n      },\n      \"maxlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"maxlength\",\n        \"reflect\": false\n      },\n      \"minlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"minlength\",\n        \"reflect\": false\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the control, which is submitted with the form data.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": false,\n        \"defaultValue\": \"this.inputId\"\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Instructional text that shows before the input has a value.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"readonly\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot modify the value.\"\n        },\n        \"attribute\": \"readonly\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"required\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n        },\n        \"attribute\": \"required\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"spellcheck\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n        },\n        \"attribute\": \"spellcheck\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"cols\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\"\n        },\n        \"attribute\": \"cols\",\n        \"reflect\": false\n      },\n      \"rows\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The number of visible text lines for the control.\"\n        },\n        \"attribute\": \"rows\",\n        \"reflect\": false\n      },\n      \"wrap\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'hard' | 'soft' | 'off'\",\n          \"resolved\": \"\\\"hard\\\" | \\\"off\\\" | \\\"soft\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates how the control wraps text.\"\n        },\n        \"attribute\": \"wrap\",\n        \"reflect\": false\n      },\n      \"autoGrow\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the textarea container will grow and shrink based\\non the contents of the textarea.\"\n        },\n        \"attribute\": \"auto-grow\",\n        \"reflect\": true,\n        \"defaultValue\": \"false\"\n      },\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string | null\",\n          \"resolved\": \"null | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the textarea.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"hasFocus\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input value has changed.\"\n        },\n        \"complexType\": {\n          \"original\": \"TextareaChangeEventDetail\",\n          \"resolved\": \"TextareaChangeEventDetail\",\n          \"references\": {\n            \"TextareaChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionInput\",\n        \"name\": \"ionInput\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when a keyboard input occurred.\"\n        },\n        \"complexType\": {\n          \"original\": \"InputEvent\",\n          \"resolved\": \"InputEvent\",\n          \"references\": {\n            \"InputEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionStyle\",\n        \"name\": \"ionStyle\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the styles change.\"\n        },\n        \"complexType\": {\n          \"original\": \"StyleEventDetail\",\n          \"resolved\": \"StyleEventDetail\",\n          \"references\": {\n            \"StyleEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionBlur\",\n        \"name\": \"ionBlur\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input loses focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionFocus\",\n        \"name\": \"ionFocus\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input has focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\\n`textarea.focus()`.\",\n          \"tags\": []\n        }\n      },\n      \"setBlur\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global\\n`textarea.blur()`.\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"getInputElement\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<HTMLTextAreaElement>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"HTMLTextAreaElement\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<HTMLTextAreaElement>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns the native `<textarea>` element used under the hood.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"debounce\",\n        \"methodName\": \"debounceChanged\"\n      }, {\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }, {\n        \"propName\": \"value\",\n        \"methodName\": \"valueChanged\"\n      }];\n  }\n}\nlet textareaIds = 0;\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nexport const createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nexport const getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nexport const getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nexport const openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n"],"names":[],"sourceRoot":""}