{"version":3,"file":"packages_library_dist_esm_ion-tab-bar_entry_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;ACAA;ACUA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/utils/window/index.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/tab-bar/tab-bar.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/tab-bar/tab-bar.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/tab-bar/tab-bar.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard-controller.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/utils/theme.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * When accessing the window, it is important\n * to account for SSR applications where the\n * window is not available. Code that accesses\n * window when it is not available will crash.\n * Even checking if `window === undefined` will cause\n * apps to crash in SSR.\n *\n * Use win below to access an SSR-safe version\n * of the window.\n *\n * Example 1:\n * Before:\n * if (window.innerWidth > 768) { ... }\n *\n * After:\n * import { win } from 'path/to/this/file';\n * if (win?.innerWidth > 768) { ... }\n *\n * Note: Code inside of this if-block will\n * not run in an SSR environment.\n */\nexport const win = typeof window !== 'undefined' ? window : undefined;\n",":host {\n  /**\n   * @prop --background: Background of the tab bar\n   * @prop --border: Border of the tab bar\n   * @prop --color: Color of the tab bar\n   */\n  -webkit-padding-start: var(--ion-safe-area-left);\n  padding-inline-start: var(--ion-safe-area-left);\n  -webkit-padding-end: var(--ion-safe-area-right);\n  padding-inline-end: var(--ion-safe-area-right);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  padding-bottom: var(--ion-safe-area-bottom, 0);\n  border-top: var(--border);\n  background: var(--background);\n  color: var(--color);\n  text-align: center;\n  contain: strict;\n  user-select: none;\n  z-index: 10;\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n}\n\n:host(.ion-color) ::slotted(ion-tab-button) {\n  --background-focused: var(--ion-color-shade);\n  --color-selected: var(--ion-color-contrast);\n}\n\n:host(.ion-color) ::slotted(.tab-selected) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color),\n:host(.ion-color) ::slotted(ion-tab-button) {\n  color: rgba(var(--ion-color-contrast-rgb), 0.7);\n}\n\n:host(.ion-color),\n:host(.ion-color) ::slotted(ion-tab-button) {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color) ::slotted(ion-tab-button.ion-focused),\n:host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused) {\n  background: var(--background-focused);\n}\n\n:host(.tab-bar-translucent) ::slotted(ion-tab-button) {\n  background: transparent;\n}\n\n:host([slot=top]) {\n  padding-top: var(--ion-safe-area-top, 0);\n  padding-bottom: 0;\n  border-top: 0;\n  border-bottom: var(--border);\n}\n\n:host(.tab-bar-hidden) {\n  /* stylelint-disable-next-line declaration-no-important */\n  display: none !important;\n}\n\n:host {\n  --background: var(--ion-tab-bar-background, var(--ion-color-step-50, #f7f7f7));\n  --background-focused: var(--ion-tab-bar-background-focused, #e0e0e0);\n  --border: 0.55px solid var(--ion-tab-bar-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.2))));\n  --color: var(--ion-tab-bar-color, var(--ion-color-step-400, #999999));\n  --color-selected: var(--ion-tab-bar-color-selected, var(--ion-color-primary, #3880ff));\n  height: 50px;\n}\n\n@supports (backdrop-filter: blur(0)) {\n  :host(.tab-bar-translucent) {\n    --background: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);\n    backdrop-filter: saturate(210%) blur(20px);\n  }\n  :host(.ion-color.tab-bar-translucent) {\n    background: rgba(var(--ion-color-base-rgb), 0.8);\n  }\n  :host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused) {\n    background: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.6);\n  }\n}",":host {\n  /**\n   * @prop --background: Background of the tab bar\n   * @prop --border: Border of the tab bar\n   * @prop --color: Color of the tab bar\n   */\n  -webkit-padding-start: var(--ion-safe-area-left);\n  padding-inline-start: var(--ion-safe-area-left);\n  -webkit-padding-end: var(--ion-safe-area-right);\n  padding-inline-end: var(--ion-safe-area-right);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  padding-bottom: var(--ion-safe-area-bottom, 0);\n  border-top: var(--border);\n  background: var(--background);\n  color: var(--color);\n  text-align: center;\n  contain: strict;\n  user-select: none;\n  z-index: 10;\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n}\n\n:host(.ion-color) ::slotted(ion-tab-button) {\n  --background-focused: var(--ion-color-shade);\n  --color-selected: var(--ion-color-contrast);\n}\n\n:host(.ion-color) ::slotted(.tab-selected) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color),\n:host(.ion-color) ::slotted(ion-tab-button) {\n  color: rgba(var(--ion-color-contrast-rgb), 0.7);\n}\n\n:host(.ion-color),\n:host(.ion-color) ::slotted(ion-tab-button) {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color) ::slotted(ion-tab-button.ion-focused),\n:host(.tab-bar-translucent) ::slotted(ion-tab-button.ion-focused) {\n  background: var(--background-focused);\n}\n\n:host(.tab-bar-translucent) ::slotted(ion-tab-button) {\n  background: transparent;\n}\n\n:host([slot=top]) {\n  padding-top: var(--ion-safe-area-top, 0);\n  padding-bottom: 0;\n  border-top: 0;\n  border-bottom: var(--border);\n}\n\n:host(.tab-bar-hidden) {\n  /* stylelint-disable-next-line declaration-no-important */\n  display: none !important;\n}\n\n:host {\n  --background: var(--ion-tab-bar-background, var(--ion-background-color, #fff));\n  --background-focused: var(--ion-tab-bar-background-focused, #e0e0e0);\n  --border: 1px solid var(--ion-tab-bar-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.07))));\n  --color: var(--ion-tab-bar-color, var(--ion-color-step-600, #666666));\n  --color-selected: var(--ion-tab-bar-color-selected, var(--ion-color-primary, #3880ff));\n  height: 56px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { createKeyboardController } from '../../utils/keyboard/keyboard-controller';\nimport { createColorClasses } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class TabBar {\n  constructor() {\n    this.keyboardCtrl = null;\n    this.keyboardVisible = false;\n    this.color = undefined;\n    this.selectedTab = undefined;\n    this.translucent = false;\n  }\n  selectedTabChanged() {\n    if (this.selectedTab !== undefined) {\n      this.ionTabBarChanged.emit({\n        tab: this.selectedTab,\n      });\n    }\n  }\n  componentWillLoad() {\n    this.selectedTabChanged();\n  }\n  connectedCallback() {\n    this.keyboardCtrl = createKeyboardController((keyboardOpen) => {\n      this.keyboardVisible = keyboardOpen; // trigger re-render by updating state\n    });\n  }\n  disconnectedCallback() {\n    if (this.keyboardCtrl) {\n      this.keyboardCtrl.destroy();\n    }\n  }\n  render() {\n    const { color, translucent, keyboardVisible } = this;\n    const mode = getIonMode(this);\n    const shouldHide = keyboardVisible && this.el.getAttribute('slot') !== 'top';\n    return (h(Host, { role: \"tablist\", \"aria-hidden\": shouldHide ? 'true' : null, class: createColorClasses(color, {\n        [mode]: true,\n        'tab-bar-translucent': translucent,\n        'tab-bar-hidden': shouldHide,\n      }) }, h(\"slot\", null)));\n  }\n  static get is() { return \"ion-tab-bar\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"tab-bar.ios.scss\"],\n      \"md\": [\"tab-bar.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"tab-bar.ios.css\"],\n      \"md\": [\"tab-bar.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"selectedTab\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The selected tab component\"\n        },\n        \"attribute\": \"selected-tab\",\n        \"reflect\": false\n      },\n      \"translucent\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the tab bar will be translucent.\\nOnly applies when the mode is `\\\"ios\\\"` and the device supports\\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\"\n        },\n        \"attribute\": \"translucent\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"keyboardVisible\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionTabBarChanged\",\n        \"name\": \"ionTabBarChanged\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        },\n        \"complexType\": {\n          \"original\": \"TabBarChangedEventDetail\",\n          \"resolved\": \"TabBarChangedEventDetail\",\n          \"references\": {\n            \"TabBarChangedEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./tab-bar-interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"selectedTab\",\n        \"methodName\": \"selectedTabChanged\"\n      }];\n  }\n}\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from '../window';\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nexport const createKeyboardController = (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  const init = () => {\n    keyboardWillShowHandler = () => {\n      keyboardVisible = true;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(true);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(false);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  init();\n  return { init, destroy, isKeyboardVisible };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nexport const createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nexport const getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nexport const getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nexport const openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n"],"names":[],"sourceRoot":""}