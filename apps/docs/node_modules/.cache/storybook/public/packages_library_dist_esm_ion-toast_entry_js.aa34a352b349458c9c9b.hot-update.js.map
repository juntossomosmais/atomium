{"version":3,"file":"packages_library_dist_esm_ion-toast_entry_js.aa34a352b349458c9c9b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;;AC9BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;;AC5BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;;AChCA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;ACAA;ACyBA;AACA;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAKA;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAKA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;;AAEA;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AA2pBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/animations/ios.enter.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/animations/ios.leave.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/animations/md.enter.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/animations/md.leave.js","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/toast.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/toast.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/toast/toast.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from '../../../utils/animation/animation';\nimport { getElementRoot } from '../../../utils/helpers';\n/**\n * iOS Toast Enter Animation\n */\nexport const iosEnterAnimation = (baseEl, position) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  const bottom = `calc(-10px - var(--ion-safe-area-bottom, 0px))`;\n  const top = `calc(10px + var(--ion-safe-area-top, 0px))`;\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', 'translateY(-100%)', `translateY(${top})`);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', 'translateY(100%)', `translateY(${bottom})`);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.155,1.105,.295,1.12)').duration(400).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from '../../../utils/animation/animation';\nimport { getElementRoot } from '../../../utils/helpers';\n/**\n * iOS Toast Leave Animation\n */\nexport const iosLeaveAnimation = (baseEl, position) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  const bottom = `calc(-10px - var(--ion-safe-area-bottom, 0px))`;\n  const top = `calc(10px + var(--ion-safe-area-top, 0px))`;\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', `translateY(${top})`, 'translateY(-100%)');\n      break;\n    case 'middle':\n      wrapperAnimation.fromTo('opacity', 0.99, 0);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', `translateY(${bottom})`, 'translateY(100%)');\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from '../../../utils/animation/animation';\nimport { getElementRoot } from '../../../utils/helpers';\n/**\n * MD Toast Enter Animation\n */\nexport const mdEnterAnimation = (baseEl, position) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  const bottom = `calc(8px + var(--ion-safe-area-bottom, 0px))`;\n  const top = `calc(8px + var(--ion-safe-area-top, 0px))`;\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperEl.style.top = top;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperEl.style.bottom = bottom;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from '../../../utils/animation/animation';\nimport { getElementRoot } from '../../../utils/helpers';\n/**\n * md Toast Leave Animation\n */\nexport const mdLeaveAnimation = (baseEl) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl).fromTo('opacity', 0.99, 0);\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n",":host {\n  /**\n   * @prop --background: Background of the toast\n   * @prop --color: Color of the toast text\n   *\n   * @prop --border-color: Border color of the toast\n   * @prop --border-radius: Border radius of the toast\n   * @prop --border-width: Border width of the toast\n   * @prop --border-style: Border style of the toast\n   *\n   * @prop --white-space: White space of the toast message\n   *\n   * @prop --box-shadow: Box shadow of the toast\n   *\n   * @prop --min-width: Minimum width of the toast\n   * @prop --width: Width of the toast\n   * @prop --max-width: Maximum width of the toast\n   *\n   * @prop --min-height: Minimum height of the toast\n   * @prop --height: Height of the toast\n   * @prop --max-height: Maximum height of the toast\n   *\n   * @prop --button-color: Color of the button text\n   *\n   * @prop --start: Position from the left if direction is left-to-right, and from the right if direction is right-to-left\n   * @prop --end: Position from the right if direction is left-to-right, and from the left if direction is right-to-left\n   */\n  --border-width: 0;\n  --border-style: none;\n  --border-color: initial;\n  --box-shadow: none;\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  --max-height: auto;\n  --white-space: normal;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  z-index: 1001;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host {\n    left: 0;\n  }\n  :host-context([dir=rtl]) {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n:host(.ion-color) {\n  --button-color: inherit;\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toast-button-cancel {\n  color: inherit;\n}\n\n:host(.ion-color) .toast-wrapper {\n  background: var(--ion-color-base);\n}\n\n.toast-wrapper {\n  border-radius: var(--border-radius);\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  box-shadow: var(--box-shadow);\n}\n@supports (inset-inline-start: 0) {\n  .toast-wrapper {\n    inset-inline-start: var(--start);\n    inset-inline-end: var(--end);\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .toast-wrapper {\n    left: var(--start);\n    right: var(--end);\n  }\n  [dir=rtl] .toast-wrapper, :host-context([dir=rtl]) .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n}\n\n.toast-container {\n  display: flex;\n  align-items: center;\n  pointer-events: auto;\n  height: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  contain: content;\n}\n\n.toast-layout-stacked .toast-container {\n  flex-wrap: wrap;\n}\n\n.toast-layout-baseline .toast-content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.toast-icon {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n.toast-message {\n  flex: 1;\n  white-space: var(--white-space);\n}\n\n.toast-button-group {\n  display: flex;\n}\n\n.toast-layout-stacked .toast-button-group {\n  justify-content: end;\n  width: 100%;\n}\n\n.toast-button {\n  border: 0;\n  outline: none;\n  color: var(--button-color);\n  z-index: 0;\n}\n\n.toast-icon,\n.toast-button-icon {\n  font-size: 1.4em;\n}\n\n.toast-button-inner {\n  display: flex;\n  align-items: center;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    cursor: pointer;\n  }\n}\n:host {\n  --background: var(--ion-color-step-50, #f2f2f2);\n  --border-radius: 14px;\n  --button-color: var(--ion-color-primary, #3880ff);\n  --color: var(--ion-color-step-850, #262626);\n  --max-width: 700px;\n  --start: 10px;\n  --end: 10px;\n  font-size: 14px;\n}\n\n.toast-wrapper {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  display: block;\n  position: absolute;\n  z-index: 10;\n}\n\n@supports (backdrop-filter: blur(0)) {\n  :host(.toast-translucent) .toast-wrapper {\n    background: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);\n    backdrop-filter: saturate(180%) blur(20px);\n  }\n}\n.toast-wrapper.toast-top {\n  transform: translate3d(0,  -100%,  0);\n  top: 0;\n}\n\n.toast-wrapper.toast-middle {\n  opacity: 0.01;\n}\n\n.toast-wrapper.toast-bottom {\n  transform: translate3d(0,  100%,  0);\n  bottom: 0;\n}\n\n.toast-content {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n.toast-header {\n  margin-bottom: 2px;\n  font-weight: 500;\n}\n\n.toast-button {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  height: 44px;\n  transition: background-color, opacity 100ms linear;\n  border: 0;\n  background-color: transparent;\n  font-family: var(--ion-font-family);\n  font-size: 17px;\n  font-weight: 500;\n  overflow: hidden;\n}\n\n.toast-button.ion-activated {\n  opacity: 0.4;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    opacity: 0.6;\n  }\n}",":host {\n  /**\n   * @prop --background: Background of the toast\n   * @prop --color: Color of the toast text\n   *\n   * @prop --border-color: Border color of the toast\n   * @prop --border-radius: Border radius of the toast\n   * @prop --border-width: Border width of the toast\n   * @prop --border-style: Border style of the toast\n   *\n   * @prop --white-space: White space of the toast message\n   *\n   * @prop --box-shadow: Box shadow of the toast\n   *\n   * @prop --min-width: Minimum width of the toast\n   * @prop --width: Width of the toast\n   * @prop --max-width: Maximum width of the toast\n   *\n   * @prop --min-height: Minimum height of the toast\n   * @prop --height: Height of the toast\n   * @prop --max-height: Maximum height of the toast\n   *\n   * @prop --button-color: Color of the button text\n   *\n   * @prop --start: Position from the left if direction is left-to-right, and from the right if direction is right-to-left\n   * @prop --end: Position from the right if direction is left-to-right, and from the left if direction is right-to-left\n   */\n  --border-width: 0;\n  --border-style: none;\n  --border-color: initial;\n  --box-shadow: none;\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  --max-height: auto;\n  --white-space: normal;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  z-index: 1001;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host {\n    left: 0;\n  }\n  :host-context([dir=rtl]) {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n:host(.ion-color) {\n  --button-color: inherit;\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toast-button-cancel {\n  color: inherit;\n}\n\n:host(.ion-color) .toast-wrapper {\n  background: var(--ion-color-base);\n}\n\n.toast-wrapper {\n  border-radius: var(--border-radius);\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  box-shadow: var(--box-shadow);\n}\n@supports (inset-inline-start: 0) {\n  .toast-wrapper {\n    inset-inline-start: var(--start);\n    inset-inline-end: var(--end);\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .toast-wrapper {\n    left: var(--start);\n    right: var(--end);\n  }\n  [dir=rtl] .toast-wrapper, :host-context([dir=rtl]) .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n}\n\n.toast-container {\n  display: flex;\n  align-items: center;\n  pointer-events: auto;\n  height: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  contain: content;\n}\n\n.toast-layout-stacked .toast-container {\n  flex-wrap: wrap;\n}\n\n.toast-layout-baseline .toast-content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.toast-icon {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n.toast-message {\n  flex: 1;\n  white-space: var(--white-space);\n}\n\n.toast-button-group {\n  display: flex;\n}\n\n.toast-layout-stacked .toast-button-group {\n  justify-content: end;\n  width: 100%;\n}\n\n.toast-button {\n  border: 0;\n  outline: none;\n  color: var(--button-color);\n  z-index: 0;\n}\n\n.toast-icon,\n.toast-button-icon {\n  font-size: 1.4em;\n}\n\n.toast-button-inner {\n  display: flex;\n  align-items: center;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    cursor: pointer;\n  }\n}\n:host {\n  --background: var(--ion-color-step-800, #333333);\n  --border-radius: 4px;\n  --box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12);\n  --button-color: var(--ion-color-primary, #3880ff);\n  --color: var(--ion-color-step-50, #f2f2f2);\n  --max-width: 700px;\n  --start: 8px;\n  --end: 8px;\n  font-size: 14px;\n}\n\n.toast-wrapper {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  display: block;\n  position: absolute;\n  opacity: 0.01;\n  z-index: 10;\n}\n\n.toast-content {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 14px;\n  padding-bottom: 14px;\n}\n\n.toast-header {\n  margin-bottom: 2px;\n  font-weight: 500;\n  line-height: 20px;\n}\n\n.toast-message {\n  line-height: 20px;\n}\n\n.toast-layout-baseline .toast-button-group-start {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n}\n\n.toast-layout-stacked .toast-button-group-start {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 8px;\n}\n\n.toast-layout-baseline .toast-button-group-end {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n}\n\n.toast-layout-stacked .toast-button-group-end {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-bottom: 8px;\n}\n\n.toast-button {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  position: relative;\n  background-color: transparent;\n  font-family: var(--ion-font-family);\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: 0.84px;\n  text-transform: uppercase;\n  overflow: hidden;\n}\n\n.toast-button-cancel {\n  color: var(--ion-color-step-100, #e6e6e6);\n}\n\n.toast-button-icon-only {\n  border-radius: 50%;\n  -webkit-padding-start: 9px;\n  padding-inline-start: 9px;\n  -webkit-padding-end: 9px;\n  padding-inline-end: 9px;\n  padding-top: 9px;\n  padding-bottom: 9px;\n  width: 36px;\n  height: 36px;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    background-color: rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.08);\n  }\n  .toast-button-cancel:hover {\n    background-color: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.08);\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { h, Host } from '@stencil/core';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { ENABLE_HTML_CONTENT_DEFAULT } from '../../utils/config';\nimport { printIonWarning } from '../../utils/logging';\nimport { createDelegateController, createTriggerController, dismiss, eventMethod, isCancel, prepareOverlay, present, safeCall, } from '../../utils/overlays';\nimport { sanitizeDOMString } from '../../utils/sanitization';\nimport { createColorClasses, getClassMap } from '../../utils/theme';\nimport { iosEnterAnimation } from './animations/ios.enter';\nimport { iosLeaveAnimation } from './animations/ios.leave';\nimport { mdEnterAnimation } from './animations/md.enter';\nimport { mdLeaveAnimation } from './animations/md.leave';\n// TODO(FW-2832): types\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part button - Any button element that is displayed inside of the toast.\n * @part container - The element that wraps all child elements.\n * @part header - The header text of the toast.\n * @part message - The body text of the toast.\n * @part icon - The icon that appears next to the toast content.\n */\nexport class Toast {\n  constructor() {\n    this.delegateController = createDelegateController(this);\n    this.triggerController = createTriggerController();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.presented = false;\n    this.dispatchCancelHandler = (ev) => {\n      const role = ev.detail.role;\n      if (isCancel(role)) {\n        const cancelButton = this.getButtons().find((b) => b.role === 'cancel');\n        this.callButtonHandler(cancelButton);\n      }\n    };\n    this.overlayIndex = undefined;\n    this.delegate = undefined;\n    this.hasController = false;\n    this.color = undefined;\n    this.enterAnimation = undefined;\n    this.leaveAnimation = undefined;\n    this.cssClass = undefined;\n    this.duration = config.getNumber('toastDuration', 0);\n    this.header = undefined;\n    this.layout = 'baseline';\n    this.message = undefined;\n    this.keyboardClose = false;\n    this.position = 'bottom';\n    this.buttons = undefined;\n    this.translucent = false;\n    this.animated = true;\n    this.icon = undefined;\n    this.htmlAttributes = undefined;\n    this.isOpen = false;\n    this.trigger = undefined;\n  }\n  onIsOpenChange(newValue, oldValue) {\n    if (newValue === true && oldValue === false) {\n      this.present();\n    }\n    else if (newValue === false && oldValue === true) {\n      this.dismiss();\n    }\n  }\n  triggerChanged() {\n    const { trigger, el, triggerController } = this;\n    if (trigger) {\n      triggerController.addClickListener(el, trigger);\n    }\n  }\n  connectedCallback() {\n    prepareOverlay(this.el);\n    this.triggerChanged();\n  }\n  disconnectedCallback() {\n    this.triggerController.removeClickListener();\n  }\n  /**\n   * Present the toast overlay after it has been created.\n   */\n  async present() {\n    /**\n     * When using an inline toast\n     * and dismissing a toast it is possible to\n     * quickly present the toast while it is\n     * dismissing. We need to await any current\n     * transition to allow the dismiss to finish\n     * before presenting again.\n     */\n    if (this.currentTransition !== undefined) {\n      await this.currentTransition;\n    }\n    await this.delegateController.attachViewToDom();\n    this.currentTransition = present(this, 'toastEnter', iosEnterAnimation, mdEnterAnimation, this.position);\n    await this.currentTransition;\n    this.currentTransition = undefined;\n    if (this.duration > 0) {\n      this.durationTimeout = setTimeout(() => this.dismiss(undefined, 'timeout'), this.duration);\n    }\n  }\n  /**\n   * Dismiss the toast overlay after it has been presented.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the toast.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   */\n  async dismiss(data, role) {\n    if (this.durationTimeout) {\n      clearTimeout(this.durationTimeout);\n    }\n    this.currentTransition = dismiss(this, data, role, 'toastLeave', iosLeaveAnimation, mdLeaveAnimation, this.position);\n    const dismissed = await this.currentTransition;\n    if (dismissed) {\n      this.delegateController.removeViewFromDom();\n    }\n    return dismissed;\n  }\n  /**\n   * Returns a promise that resolves when the toast did dismiss.\n   */\n  onDidDismiss() {\n    return eventMethod(this.el, 'ionToastDidDismiss');\n  }\n  /**\n   * Returns a promise that resolves when the toast will dismiss.\n   */\n  onWillDismiss() {\n    return eventMethod(this.el, 'ionToastWillDismiss');\n  }\n  getButtons() {\n    const buttons = this.buttons\n      ? this.buttons.map((b) => {\n        return typeof b === 'string' ? { text: b } : b;\n      })\n      : [];\n    return buttons;\n  }\n  async buttonClick(button) {\n    const role = button.role;\n    if (isCancel(role)) {\n      return this.dismiss(undefined, role);\n    }\n    const shouldDismiss = await this.callButtonHandler(button);\n    if (shouldDismiss) {\n      return this.dismiss(undefined, role);\n    }\n    return Promise.resolve();\n  }\n  async callButtonHandler(button) {\n    if (button === null || button === void 0 ? void 0 : button.handler) {\n      // a handler has been provided, execute it\n      // pass the handler the values from the inputs\n      try {\n        const rtn = await safeCall(button.handler);\n        if (rtn === false) {\n          // if the return value of the handler is false then do not dismiss\n          return false;\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n    return true;\n  }\n  renderButtons(buttons, side) {\n    if (buttons.length === 0) {\n      return;\n    }\n    const mode = getIonMode(this);\n    const buttonGroupsClasses = {\n      'toast-button-group': true,\n      [`toast-button-group-${side}`]: true,\n    };\n    return (h(\"div\", { class: buttonGroupsClasses }, buttons.map((b) => (h(\"button\", { type: \"button\", class: buttonClass(b), tabIndex: 0, onClick: () => this.buttonClick(b), part: \"button\" }, h(\"div\", { class: \"toast-button-inner\" }, b.icon && (h(\"ion-icon\", { \"aria-hidden\": \"true\", icon: b.icon, slot: b.text === undefined ? 'icon-only' : undefined, class: \"toast-button-icon\" })), b.text), mode === 'md' && (h(\"ion-ripple-effect\", { type: b.icon !== undefined && b.text === undefined ? 'unbounded' : 'bounded' })))))));\n  }\n  renderToastMessage() {\n    const { customHTMLEnabled, message } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"toast-message\", part: \"message\", innerHTML: sanitizeDOMString(message) });\n    }\n    return (h(\"div\", { class: \"toast-message\", part: \"message\" }, message));\n  }\n  render() {\n    const { layout, el } = this;\n    const allButtons = this.getButtons();\n    const startButtons = allButtons.filter((b) => b.side === 'start');\n    const endButtons = allButtons.filter((b) => b.side !== 'start');\n    const mode = getIonMode(this);\n    const wrapperClass = {\n      'toast-wrapper': true,\n      [`toast-${this.position}`]: true,\n      [`toast-layout-${layout}`]: true,\n    };\n    const role = allButtons.length > 0 ? 'dialog' : 'status';\n    /**\n     * Stacked buttons are only meant to be\n     *  used with one type of button.\n     */\n    if (layout === 'stacked' && startButtons.length > 0 && endButtons.length > 0) {\n      printIonWarning('This toast is using start and end buttons with the stacked toast layout. We recommend following the best practice of using either start or end buttons with the stacked toast layout.', el);\n    }\n    return (h(Host, Object.assign({ \"aria-live\": \"polite\", \"aria-atomic\": \"true\", role: role, tabindex: \"-1\" }, this.htmlAttributes, { style: {\n        zIndex: `${60000 + this.overlayIndex}`,\n      }, class: createColorClasses(this.color, Object.assign(Object.assign({ [mode]: true }, getClassMap(this.cssClass)), { 'overlay-hidden': true, 'toast-translucent': this.translucent })), onIonToastWillDismiss: this.dispatchCancelHandler }), h(\"div\", { class: wrapperClass }, h(\"div\", { class: \"toast-container\", part: \"container\" }, this.renderButtons(startButtons, 'start'), this.icon !== undefined && (h(\"ion-icon\", { class: \"toast-icon\", part: \"icon\", icon: this.icon, lazy: false, \"aria-hidden\": \"true\" })), h(\"div\", { class: \"toast-content\" }, this.header !== undefined && (h(\"div\", { class: \"toast-header\", part: \"header\" }, this.header)), this.message !== undefined && this.renderToastMessage()), this.renderButtons(endButtons, 'end')))));\n  }\n  static get is() { return \"ion-toast\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"toast.ios.scss\"],\n      \"md\": [\"toast.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"toast.ios.css\"],\n      \"md\": [\"toast.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"overlayIndex\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": true,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        },\n        \"attribute\": \"overlay-index\",\n        \"reflect\": false\n      },\n      \"delegate\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"FrameworkDelegate\",\n          \"resolved\": \"FrameworkDelegate | undefined\",\n          \"references\": {\n            \"FrameworkDelegate\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        }\n      },\n      \"hasController\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        },\n        \"attribute\": \"has-controller\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"enterAnimation\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AnimationBuilder\",\n          \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n          \"references\": {\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Animation to use when the toast is presented.\"\n        }\n      },\n      \"leaveAnimation\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AnimationBuilder\",\n          \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n          \"references\": {\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Animation to use when the toast is dismissed.\"\n        }\n      },\n      \"cssClass\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | string[]\",\n          \"resolved\": \"string | string[] | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Additional classes to apply for custom CSS. If multiple classes are\\nprovided they should be separated by spaces.\"\n        },\n        \"attribute\": \"css-class\",\n        \"reflect\": false\n      },\n      \"duration\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"How many milliseconds to wait before hiding the toast. By default, it will show\\nuntil `dismiss()` is called.\"\n        },\n        \"attribute\": \"duration\",\n        \"reflect\": false,\n        \"defaultValue\": \"config.getNumber('toastDuration', 0)\"\n      },\n      \"header\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Header to be shown in the toast.\"\n        },\n        \"attribute\": \"header\",\n        \"reflect\": false\n      },\n      \"layout\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ToastLayout\",\n          \"resolved\": \"\\\"baseline\\\" | \\\"stacked\\\"\",\n          \"references\": {\n            \"ToastLayout\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Defines how the message and buttons are laid out in the toast.\\n'baseline': The message and the buttons will appear on the same line.\\nMessage text may wrap within the message container.\\n'stacked': The buttons containers and message will stack on top\\nof each other. Use this if you have long text in your buttons.\"\n        },\n        \"attribute\": \"layout\",\n        \"reflect\": false,\n        \"defaultValue\": \"'baseline'\"\n      },\n      \"message\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Message to be shown in the toast.\\nThis property accepts custom HTML as a string.\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n        },\n        \"attribute\": \"message\",\n        \"reflect\": false\n      },\n      \"keyboardClose\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the keyboard will be automatically dismissed when the overlay is presented.\"\n        },\n        \"attribute\": \"keyboard-close\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"position\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ToastPosition\",\n          \"resolved\": \"\\\"bottom\\\" | \\\"middle\\\" | \\\"top\\\"\",\n          \"references\": {\n            \"ToastPosition\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The position of the toast on the screen.\"\n        },\n        \"attribute\": \"position\",\n        \"reflect\": false,\n        \"defaultValue\": \"'bottom'\"\n      },\n      \"buttons\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(ToastButton | string)[]\",\n          \"resolved\": \"(string | ToastButton)[] | undefined\",\n          \"references\": {\n            \"ToastButton\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An array of buttons for the toast.\"\n        }\n      },\n      \"translucent\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will be translucent.\\nOnly applies when the mode is `\\\"ios\\\"` and the device supports\\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\"\n        },\n        \"attribute\": \"translucent\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"animated\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will animate.\"\n        },\n        \"attribute\": \"animated\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"icon\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the icon to display, or the path to a valid SVG file. See `ion-icon`.\\nhttps://ionic.io/ionicons\"\n        },\n        \"attribute\": \"icon\",\n        \"reflect\": false\n      },\n      \"htmlAttributes\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"{ [key: string]: any }\",\n          \"resolved\": \"undefined | { [key: string]: any; }\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Additional attributes to pass to the toast.\"\n        }\n      },\n      \"isOpen\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will open. If `false`, the toast will close.\\nUse this if you need finer grained control over presentation, otherwise\\njust use the toastController or the `trigger` property.\\nNote: `isOpen` will not automatically be set back to `false` when\\nthe toast dismisses. You will need to do that in your code.\"\n        },\n        \"attribute\": \"is-open\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"trigger\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | undefined\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An ID corresponding to the trigger element that\\ncauses the toast to open when clicked.\"\n        },\n        \"attribute\": \"trigger\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"didPresent\",\n        \"name\": \"ionToastDidPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has presented.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willPresent\",\n        \"name\": \"ionToastWillPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has presented.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willDismiss\",\n        \"name\": \"ionToastWillDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has dismissed.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didDismiss\",\n        \"name\": \"ionToastDidDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has dismissed.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didPresentShorthand\",\n        \"name\": \"didPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has presented.\\nShorthand for ionToastWillDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willPresentShorthand\",\n        \"name\": \"willPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has presented.\\nShorthand for ionToastWillPresent.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willDismissShorthand\",\n        \"name\": \"willDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has dismissed.\\nShorthand for ionToastWillDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didDismissShorthand\",\n        \"name\": \"didDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has dismissed.\\nShorthand for ionToastDidDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"present\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"ToastPresentOptions\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Present the toast overlay after it has been created.\",\n          \"tags\": []\n        }\n      },\n      \"dismiss\": {\n        \"complexType\": {\n          \"signature\": \"(data?: any, role?: string) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"data Any data to emit in the dismiss events.\"\n                }],\n              \"text\": \"Any data to emit in the dismiss events.\"\n            }, {\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"role The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n                }],\n              \"text\": \"The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"ToastDismissOptions\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Dismiss the toast overlay after it has been presented.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"data Any data to emit in the dismiss events.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"role The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n            }]\n        }\n      },\n      \"onDidDismiss\": {\n        \"complexType\": {\n          \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            },\n            \"T\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<OverlayEventDetail<T>>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns a promise that resolves when the toast did dismiss.\",\n          \"tags\": []\n        }\n      },\n      \"onWillDismiss\": {\n        \"complexType\": {\n          \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\"\n            },\n            \"T\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<OverlayEventDetail<T>>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns a promise that resolves when the toast will dismiss.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"isOpen\",\n        \"methodName\": \"onIsOpenChange\"\n      }, {\n        \"propName\": \"trigger\",\n        \"methodName\": \"triggerChanged\"\n      }];\n  }\n}\nconst buttonClass = (button) => {\n  return Object.assign({ 'toast-button': true, 'toast-button-icon-only': button.icon !== undefined && button.text === undefined, [`toast-button-${button.role}`]: button.role !== undefined, 'ion-focusable': true, 'ion-activatable': true }, getClassMap(button.cssClass));\n};\n"],"names":[],"sourceRoot":""}