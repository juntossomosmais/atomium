{"version":3,"file":"packages_library_dist_esm_ion-infinite-scroll-content_entry_js.c47ca8902f74116b32a1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACQA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AACA;AAEA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.js"],"sourcesContent":["ion-infinite-scroll-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 84px;\n  text-align: center;\n  user-select: none;\n}\n\n.infinite-loading {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 32px;\n  display: none;\n  width: 100%;\n}\n\n.infinite-loading-text {\n  -webkit-margin-start: 32px;\n  margin-inline-start: 32px;\n  -webkit-margin-end: 32px;\n  margin-inline-end: 32px;\n  margin-top: 4px;\n  margin-bottom: 0;\n}\n\n.infinite-scroll-loading ion-infinite-scroll-content > .infinite-loading {\n  display: block;\n}\n\n.infinite-scroll-content-ios .infinite-loading-text {\n  color: var(--ion-color-step-600, #666666);\n}\n\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle {\n  stroke: var(--ion-color-step-600, #666666);\n}\n\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle {\n  fill: var(--ion-color-step-600, #666666);\n}","ion-infinite-scroll-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 84px;\n  text-align: center;\n  user-select: none;\n}\n\n.infinite-loading {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 32px;\n  display: none;\n  width: 100%;\n}\n\n.infinite-loading-text {\n  -webkit-margin-start: 32px;\n  margin-inline-start: 32px;\n  -webkit-margin-end: 32px;\n  margin-inline-end: 32px;\n  margin-top: 4px;\n  margin-bottom: 0;\n}\n\n.infinite-scroll-loading ion-infinite-scroll-content > .infinite-loading {\n  display: block;\n}\n\n.infinite-scroll-content-md .infinite-loading-text {\n  color: var(--ion-color-step-600, #666666);\n}\n\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle {\n  stroke: var(--ion-color-step-600, #666666);\n}\n\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle {\n  fill: var(--ion-color-step-600, #666666);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { ENABLE_HTML_CONTENT_DEFAULT } from '../../utils/config';\nimport { sanitizeDOMString } from '../../utils/sanitization';\nexport class InfiniteScrollContent {\n  constructor() {\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.loadingSpinner = undefined;\n    this.loadingText = undefined;\n  }\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n  renderLoadingText() {\n    const { customHTMLEnabled, loadingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(loadingText) });\n    }\n    return h(\"div\", { class: \"infinite-loading-text\" }, this.loadingText);\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true,\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText !== undefined && this.renderLoadingText())));\n  }\n  static get is() { return \"ion-infinite-scroll-content\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"infinite-scroll-content.ios.scss\"],\n      \"md\": [\"infinite-scroll-content.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"infinite-scroll-content.ios.css\"],\n      \"md\": [\"infinite-scroll-content.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"loadingSpinner\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"SpinnerTypes | null\",\n          \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n          \"references\": {\n            \"SpinnerTypes\": {\n              \"location\": \"import\",\n              \"path\": \"../spinner/spinner-configs\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An animated SVG spinner that shows while loading.\"\n        },\n        \"attribute\": \"loading-spinner\",\n        \"reflect\": false\n      },\n      \"loadingText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Optional text to display while loading.\\n`loadingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nThis property accepts custom HTML as a string.\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n        },\n        \"attribute\": \"loading-text\",\n        \"reflect\": false\n      }\n    };\n  }\n}\n"],"names":[],"sourceRoot":""}