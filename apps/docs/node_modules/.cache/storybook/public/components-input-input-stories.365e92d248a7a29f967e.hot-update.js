"use strict";
globalThis["webpackHotUpdateatomium_docs"]("components-input-input-stories",{

/***/ "../../packages/library/src/components/input/input.stories.tsx":
/*!*********************************************************************!*\
  !*** ../../packages/library/src/components/input/input.stories.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Default": () => (/* binding */ Default),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _storybook_addon_actions_decorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @storybook/addon-actions/decorator */ "../../node_modules/@storybook/addon-actions/dist/decorator.mjs");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/Input',
  parameters: {
    actions: {
      handles: ['atoChange', 'atoFocus', 'atoBlur']
    }
  },
  decorators: [_storybook_addon_actions_decorator__WEBPACK_IMPORTED_MODULE_0__.withActions],
  argTypes: {
    label: {
      control: 'text'
    },
    labelPlacement: {
      control: 'select',
      options: ['fixed', 'stacked', 'floating']
    },
    placeholder: {
      control: 'text'
    },
    color: {
      control: 'select',
      options: ['primary', 'secondary']
    },
    fill: {
      control: 'select',
      options: ['outline', 'solid']
    },
    disabled: {
      control: 'boolean'
    },
    type: {
      control: 'inline-radio',
      options: {
        text: 'text',
        password: 'password'
      }
    },
    mode: {
      control: 'select',
      options: ['ios', 'md']
    },
    clearInput: {
      control: 'boolean'
    },
    clearOnEdit: {
      control: 'boolean'
    },
    pattern: {
      control: 'text'
    },
    required: {
      control: 'boolean'
    },
    inputmode: {
      control: 'select',
      options: ['none', 'decimal', 'numeric', 'tel', 'search', 'text', 'url', 'email']
    }
  }
});
const createInput = args => {
  return `
<ato-input
  label="${args.label}"
  label-placement="${args.labelPlacement}"
  fill="${args.fill}"
  color="${args.color}"
  mode="${args.mode}"
  disabled="${args.disabled}"
  placeholder="${args.placeholder}"
  type="${args.type}"
  clear-on-edit="${args.clearOnEdit}"
  pattern="${args.pattern}"
  required="${args.required}"
  inputmode="${args.inputmode}"
/>
  `;
};
const Default = {
  render: args => createInput(args),
  args: {
    label: 'Example input',
    labelPlacement: 'floating',
    fill: 'outline',
    color: 'primary',
    mode: 'md',
    disabled: false,
    placeholder: 'Placeholder'
  }
};
const __namedExportsOrder = ["Default"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => createInput(args),\n  args: {\n    label: 'Example input',\n    labelPlacement: 'floating',\n    fill: 'outline',\n    color: 'primary',\n    mode: 'md',\n    disabled: false,\n    placeholder: 'Placeholder'\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};

/***/ })

});