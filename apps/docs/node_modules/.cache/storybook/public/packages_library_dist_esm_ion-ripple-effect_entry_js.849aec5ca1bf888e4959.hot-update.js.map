{"version":3,"file":"packages_library_dist_esm_ion-ripple-effect_entry_js.849aec5ca1bf888e4959.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;ACKA;AACA;;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AACA;;;;;;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/ripple-effect/ripple-effect.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/ripple-effect/ripple-effect.js"],"sourcesContent":[":host {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  contain: strict;\n  pointer-events: none;\n}\n\n:host(.unbounded) {\n  contain: layout size style;\n}\n\n.ripple-effect {\n  border-radius: 50%;\n  position: absolute;\n  background-color: currentColor;\n  color: inherit;\n  contain: strict;\n  opacity: 0;\n  animation: 225ms rippleAnimation forwards, 75ms fadeInAnimation forwards;\n  will-change: transform, opacity;\n  pointer-events: none;\n}\n\n.fade-out {\n  transform: translate(var(--translate-end)) scale(var(--final-scale, 1));\n  animation: 150ms fadeOutAnimation forwards;\n}\n\n@keyframes rippleAnimation {\n  from {\n    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transform: scale(1);\n  }\n  to {\n    transform: translate(var(--translate-end)) scale(var(--final-scale, 1));\n  }\n}\n@keyframes fadeInAnimation {\n  from {\n    animation-timing-function: linear;\n    opacity: 0;\n  }\n  to {\n    opacity: 0.16;\n  }\n}\n@keyframes fadeOutAnimation {\n  from {\n    animation-timing-function: linear;\n    opacity: 0.16;\n  }\n  to {\n    opacity: 0;\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h, readTask, writeTask } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nexport class RippleEffect {\n  constructor() {\n    this.type = 'bounded';\n  }\n  /**\n   * Adds the ripple effect to the parent element.\n   *\n   * @param x The horizontal coordinate of where the ripple should start.\n   * @param y The vertical coordinate of where the ripple should start.\n   */\n  async addRipple(x, y) {\n    return new Promise((resolve) => {\n      readTask(() => {\n        const rect = this.el.getBoundingClientRect();\n        const width = rect.width;\n        const height = rect.height;\n        const hypotenuse = Math.sqrt(width * width + height * height);\n        const maxDim = Math.max(height, width);\n        const maxRadius = this.unbounded ? maxDim : hypotenuse + PADDING;\n        const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);\n        const finalScale = maxRadius / initialSize;\n        let posX = x - rect.left;\n        let posY = y - rect.top;\n        if (this.unbounded) {\n          posX = width * 0.5;\n          posY = height * 0.5;\n        }\n        const styleX = posX - initialSize * 0.5;\n        const styleY = posY - initialSize * 0.5;\n        const moveX = width * 0.5 - posX;\n        const moveY = height * 0.5 - posY;\n        writeTask(() => {\n          const div = document.createElement('div');\n          div.classList.add('ripple-effect');\n          const style = div.style;\n          style.top = styleY + 'px';\n          style.left = styleX + 'px';\n          style.width = style.height = initialSize + 'px';\n          style.setProperty('--final-scale', `${finalScale}`);\n          style.setProperty('--translate-end', `${moveX}px, ${moveY}px`);\n          const container = this.el.shadowRoot || this.el;\n          container.appendChild(div);\n          setTimeout(() => {\n            resolve(() => {\n              removeRipple(div);\n            });\n          }, 225 + 100);\n        });\n      });\n    });\n  }\n  get unbounded() {\n    return this.type === 'unbounded';\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"presentation\", class: {\n        [mode]: true,\n        unbounded: this.unbounded,\n      } }));\n  }\n  static get is() { return \"ion-ripple-effect\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"ripple-effect.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"ripple-effect.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"type\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'bounded' | 'unbounded'\",\n          \"resolved\": \"\\\"bounded\\\" | \\\"unbounded\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Sets the type of ripple-effect:\\n\\n- `bounded`: the ripple effect expands from the user's click position\\n- `unbounded`: the ripple effect expands from the center of the button and overflows the container.\\n\\nNOTE: Surfaces for bounded ripples should have the overflow property set to hidden,\\nwhile surfaces for unbounded ripples should have it set to visible.\"\n        },\n        \"attribute\": \"type\",\n        \"reflect\": false,\n        \"defaultValue\": \"'bounded'\"\n      }\n    };\n  }\n  static get methods() {\n    return {\n      \"addRipple\": {\n        \"complexType\": {\n          \"signature\": \"(x: number, y: number) => Promise<() => void>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"x The horizontal coordinate of where the ripple should start.\"\n                }],\n              \"text\": \"The horizontal coordinate of where the ripple should start.\"\n            }, {\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"y The vertical coordinate of where the ripple should start.\"\n                }],\n              \"text\": \"The vertical coordinate of where the ripple should start.\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<() => void>\"\n        },\n        \"docs\": {\n          \"text\": \"Adds the ripple effect to the parent element.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"x The horizontal coordinate of where the ripple should start.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"y The vertical coordinate of where the ripple should start.\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\nconst removeRipple = (ripple) => {\n  ripple.classList.add('fade-out');\n  setTimeout(() => {\n    ripple.remove();\n  }, 200);\n};\nconst PADDING = 10;\nconst INITIAL_ORIGIN_SCALE = 0.5;\n"],"names":[],"sourceRoot":""}