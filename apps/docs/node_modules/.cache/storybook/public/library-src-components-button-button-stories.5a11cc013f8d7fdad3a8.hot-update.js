"use strict";
self["webpackHotUpdateatomium_storybook"]("library-src-components-button-button-stories",{

/***/ "../library/src/components/button/button.stories.tsx":
/*!***********************************************************!*\
  !*** ../library/src/components/button/button.stories.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Clear": () => (/* binding */ Clear),
/* harmony export */   "Outline": () => (/* binding */ Outline),
/* harmony export */   "Primary": () => (/* binding */ Primary),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const meta = {
  title: 'Components/Button',
  argTypes: {
    label: {
      control: 'text',
      description: 'The label of the button'
    },
    color: {
      control: 'select',
      options: ['primary', 'secondary', 'tertiary'],
      description: "The color to use from your application's color palette."
    },
    fill: {
      control: 'select',
      options: ['solid', 'clear', 'outline'],
      description: 'The fill style to use.'
    },
    shape: {
      control: 'select',
      options: ['default', 'round'],
      description: 'The shape of the button.'
    },
    size: {
      control: 'select',
      options: ['small', 'default', 'large'],
      description: 'The size of the button.'
    },
    disabled: {
      control: 'boolean',
      description: 'If `true`, the user cannot interact with the button.'
    },
    type: {
      control: 'select',
      options: ['submit', 'reset', 'button'],
      description: 'The type of the button.'
    },
    mode: {
      control: 'select',
      options: ['md', 'ios'],
      description: 'The mode determines which platform styles to use.'
    },
    atoClick: {
      description: 'Emitted when the button is clicked.',
      handleClick: {
        action: 'atoClick'
      }
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const createButton = args => {
  return `
<ato-button
  color="${args.color}"
  fill="${args.fill}"
  shape="${args.shape}"
  size="${args.size}"
  disabled="${args.disabled}"
  type="${args.type}"
  mode="${args.mode}"
>
  ${args.label}
</ato-button>
  `;
};
const Primary = {
  render: args => createButton(args),
  parameters: {
    actions: {
      handles: [{
        click: 'clicked',
        contextmenu: 'right clicked'
      }]
    }
  },
  args: {
    color: 'primary',
    fill: 'solid',
    shape: 'round',
    size: 'default',
    disabled: false,
    type: 'button',
    mode: 'md',
    label: 'Button'
  }
};
const Outline = {
  render: args => createButton(args),
  args: {
    ...Primary.args,
    fill: 'outline'
  }
};
const Clear = {
  render: args => createButton(args),
  args: {
    ...Primary.args,
    fill: 'clear'
  }
};
const __namedExportsOrder = ["Primary", "Outline", "Clear"];
Primary.parameters = {
  ...Primary.parameters,
  docs: {
    ...Primary.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => createButton(args),\n  parameters: {\n    actions: {\n      handles: [{\n        click: 'clicked',\n        contextmenu: 'right clicked'\n      }]\n    }\n  },\n  args: {\n    color: 'primary',\n    fill: 'solid',\n    shape: 'round',\n    size: 'default',\n    disabled: false,\n    type: 'button',\n    mode: 'md',\n    label: 'Button'\n  }\n}",
      ...Primary.parameters?.docs?.source
    }
  }
};
Outline.parameters = {
  ...Outline.parameters,
  docs: {
    ...Outline.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => createButton(args),\n  args: {\n    ...Primary.args,\n    fill: 'outline'\n  }\n}",
      ...Outline.parameters?.docs?.source
    }
  }
};
Clear.parameters = {
  ...Clear.parameters,
  docs: {
    ...Clear.parameters?.docs,
    source: {
      originalSource: "{\n  render: args => createButton(args),\n  args: {\n    ...Primary.args,\n    fill: 'clear'\n  }\n}",
      ...Clear.parameters?.docs?.source
    }
  }
};

/***/ })

});