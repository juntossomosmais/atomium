{"version":3,"file":"packages_library_dist_esm_ion-menu-button_entry_js.87c064bc5622a63510d3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACAA;ACiBA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.ios.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.md.css","webpack://atomium-docs/../../node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.js"],"sourcesContent":[":host {\n  /**\n   * @prop --border-radius: Border radius of the menu button\n   *\n   * @prop --background: Background of the menu button\n   * @prop --background-hover: Background of the menu button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   * @prop --background-focused: Background of the menu button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the menu button background when focused with the tab key\n   *\n   * @prop --color: Color of the menu button\n   * @prop --color-hover: Color of the menu button on hover\n   * @prop --color-focused: Color of the menu button when focused with the tab key\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --background: transparent;\n  --color-focused: currentColor;\n  --border-radius: initial;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  color: var(--color);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  font-kerning: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\nion-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  pointer-events: none;\n}\n\n:host(.menu-button-hidden) {\n  display: none;\n}\n\n:host(.menu-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity, 0);\n  }\n}\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host {\n  --background-focused: currentColor;\n  --background-focused-opacity: .1;\n  --border-radius: 4px;\n  --color: var(--ion-color-primary, #3880ff);\n  --padding-start: 5px;\n  --padding-end: 5px;\n  height: 32px;\n  font-size: 31px;\n}\n\n:host(.ion-activated) {\n  opacity: 0.4;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) {\n    opacity: 0.6;\n  }\n}",":host {\n  /**\n   * @prop --border-radius: Border radius of the menu button\n   *\n   * @prop --background: Background of the menu button\n   * @prop --background-hover: Background of the menu button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   * @prop --background-focused: Background of the menu button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the menu button background when focused with the tab key\n   *\n   * @prop --color: Color of the menu button\n   * @prop --color-hover: Color of the menu button on hover\n   * @prop --color-focused: Color of the menu button when focused with the tab key\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --background: transparent;\n  --color-focused: currentColor;\n  --border-radius: initial;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  color: var(--color);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  font-kerning: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\nion-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  pointer-events: none;\n}\n\n:host(.menu-button-hidden) {\n  display: none;\n}\n\n:host(.menu-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity, 0);\n  }\n}\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host {\n  --background-focused: currentColor;\n  --background-focused-opacity: .12;\n  --background-hover: currentColor;\n  --background-hover-opacity: .04;\n  --border-radius: 50%;\n  --color: initial;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  width: 48px;\n  height: 48px;\n  font-size: 24px;\n}\n\n:host(.ion-color.ion-focused)::after {\n  background: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color:hover) .button-native::after {\n    background: var(--ion-color-base);\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { menuOutline, menuSharp } from 'ionicons/icons';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { inheritAriaAttributes } from '../../utils/helpers';\nimport { menuController } from '../../utils/menu-controller';\nimport { createColorClasses, hostContext } from '../../utils/theme';\nimport { updateVisibility } from '../menu-toggle/menu-toggle-util';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part native - The native HTML button element that wraps all child elements.\n * @part icon - The menu button icon (uses ion-icon).\n */\nexport class MenuButton {\n  constructor() {\n    this.inheritedAttributes = {};\n    this.onClick = async () => {\n      return menuController.toggle(this.menu);\n    };\n    this.visible = false;\n    this.color = undefined;\n    this.disabled = false;\n    this.menu = undefined;\n    this.autoHide = true;\n    this.type = 'button';\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAriaAttributes(this.el);\n  }\n  componentDidLoad() {\n    this.visibilityChanged();\n  }\n  async visibilityChanged() {\n    this.visible = await updateVisibility(this.menu);\n  }\n  render() {\n    const { color, disabled, inheritedAttributes } = this;\n    const mode = getIonMode(this);\n    const menuIcon = config.get('menuIcon', mode === 'ios' ? menuOutline : menuSharp);\n    const hidden = this.autoHide && !this.visible;\n    const attrs = {\n      type: this.type,\n    };\n    const ariaLabel = inheritedAttributes['aria-label'] || 'menu';\n    return (h(Host, { onClick: this.onClick, \"aria-disabled\": disabled ? 'true' : null, \"aria-hidden\": hidden ? 'true' : null, class: createColorClasses(color, {\n        [mode]: true,\n        button: true,\n        'menu-button-hidden': hidden,\n        'menu-button-disabled': disabled,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'ion-activatable': true,\n        'ion-focusable': true,\n      }) }, h(\"button\", Object.assign({}, attrs, { disabled: disabled, class: \"button-native\", part: \"native\", \"aria-label\": ariaLabel }), h(\"span\", { class: \"button-inner\" }, h(\"slot\", null, h(\"ion-icon\", { part: \"icon\", icon: menuIcon, mode: mode, lazy: false, \"aria-hidden\": \"true\" }))), mode === 'md' && h(\"ion-ripple-effect\", { type: \"unbounded\" }))));\n  }\n  static get is() { return \"ion-menu-button\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"menu-button.ios.scss\"],\n      \"md\": [\"menu-button.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"menu-button.ios.css\"],\n      \"md\": [\"menu-button.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the menu button.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"menu\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle\"\n        },\n        \"attribute\": \"menu\",\n        \"reflect\": false\n      },\n      \"autoHide\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Automatically hides the menu button when the corresponding menu is not active\"\n        },\n        \"attribute\": \"auto-hide\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"type\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'submit' | 'reset' | 'button'\",\n          \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The type of the button.\"\n        },\n        \"attribute\": \"type\",\n        \"reflect\": false,\n        \"defaultValue\": \"'button'\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"visible\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get listeners() {\n    return [{\n        \"name\": \"ionMenuChange\",\n        \"method\": \"visibilityChanged\",\n        \"target\": \"body\",\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"ionSplitPaneVisible\",\n        \"method\": \"visibilityChanged\",\n        \"target\": \"body\",\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n"],"names":[],"sourceRoot":""}