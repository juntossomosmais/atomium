{"version":3,"file":"library_dist_esm_ato-input_entry_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACQA;;;;;;AA0DA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAlEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;;;AAYA;AAEA;;;AAOA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA","sources":["webpack://atomium-storybook/./src/components/input/input.scss","webpack://atomium-storybook/./src/components/input/input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Color, Mode, TextFieldTypes } from '@ionic/core'\nimport { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core'\n\n@Component({\n  tag: 'ato-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class AtoInput {\n  @Element() inputEl!: HTMLInputElement\n\n  @Prop({ reflect: true }) value: string\n  @Prop({ reflect: true }) type: TextFieldTypes = 'text'\n  @Prop() placeholder?: string\n  @Prop() name?: string\n  @Prop() minlength?: number\n  @Prop() maxlength?: number\n  @Prop() disabled = false\n  @Prop() required = false\n  @Prop({ reflect: true }) color: Color = 'primary'\n  @Prop() mode: Mode = 'md'\n  @Prop() expandable = false\n  @Prop({ reflect: true }) fill: 'default' | 'solid' | 'outline' = 'default'\n  @Prop() size?: 'small' | 'default' | 'large' = 'default'\n  @Prop() autofocus = false\n  @Prop() clearInput = false\n  @Prop() pattern?: string\n  @Prop() readonly = false\n  @Prop() spellcheck = false\n  @Prop() autocapitalize: 'words' | 'characters' | 'sentences' | 'none' = 'none'\n  @Prop() autocomplete?: 'on' | 'off'\n  @Prop() accept?: string\n  @Prop() multiple = false\n  @Prop() clearOnEdit = false\n  @Prop() debounce?: number\n  @Prop() clearIcon?: string\n  @Prop() icon?: string\n  @Prop() inputmode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search' = 'none'\n\n  @Prop() labelPosition?: 'fixed' | 'stacked' | 'floating' = 'floating'\n  @Prop() labelText?: string\n\n  @Event() atoFocus!: EventEmitter<void>\n  @Event() atoBlur!: EventEmitter<void>\n  @Event({ bubbles: true, composed: true }) atoChange!: EventEmitter<string>\n\n  componentDidLoad() {\n    this.inputEl.addEventListener('ionChange', this.handleChange)\n    this.inputEl.addEventListener('ionBlur', this.handleBlur)\n    this.inputEl.addEventListener('ionFocus', this.handleFocus)\n  }\n\n  disconnectedCallback() {\n    this.inputEl.removeEventListener('ionChange', this.handleChange)\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n  }\n\n  private handleChange = (event: any) => {\n    this.atoChange.emit(event.detail)\n  }\n\n  private handleBlur = () => {\n    this.inputEl.removeEventListener('ionBlur', this.handleBlur)\n    this.atoBlur.emit()\n  }\n\n  private handleFocus = () => {\n    this.inputEl.removeEventListener('ionFocus', this.handleFocus)\n    this.atoFocus.emit()\n  }\n\n  render(): JSX.Element {\n    return (\n      <ion-item fill={this.fill}>\n        {this.labelText && (\n          <ion-label color={this.color} position={this.labelPosition}>\n            {this.labelText}\n          </ion-label>\n        )}\n        <ion-input\n          value={this.value}\n          type={this.type}\n          placeholder={this.placeholder}\n          name={this.name}\n          minlength={this.minlength}\n          maxlength={this.maxlength}\n          disabled={this.disabled}\n          required={this.required}\n          color={this.color}\n          mode={this.mode}\n          expandable={this.expandable}\n          fill={this.fill}\n          size={this.size}\n          icon={this.icon}\n          autofocus={this.autofocus}\n          clearInput={this.clearInput}\n          pattern={this.pattern}\n          readonly={this.readonly}\n          spellcheck={this.spellcheck}\n          autocapitalize={this.autocapitalize}\n          autocomplete={this.autocomplete}\n          inputmode={this.inputmode}\n          accept={this.accept}\n          multiple={this.multiple}\n          clear-on-edit={this.clearOnEdit}\n          debounce={this.debounce}\n          clear-icon={this.clearIcon}\n          ionChange={this.handleChange}\n          ionFocus={this.handleFocus}\n          ionBlur={this.handleBlur}\n        />\n      </ion-item>\n    )\n  }\n}\n"],"names":[],"sourceRoot":""}