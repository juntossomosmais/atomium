"use strict";(globalThis.webpackChunk_atomium_docs=globalThis.webpackChunk_atomium_docs||[]).push([[3088],{"../../packages/core/src/components/button/stories/button.core.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Clear:()=>Clear,Default:()=>Default,Outline:()=>Outline,Secondary:()=>Secondary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>button_core_stories});var chunk_OPEUWD42=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-OPEUWD42.mjs"),actions=(...args)=>{let options=chunk_OPEUWD42.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_OPEUWD42.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_OPEUWD42.aD)(namesObject[name],options)})),actionsObject},chunk_VWCVBQ22=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs"),dist=__webpack_require__("../../node_modules/@storybook/global/dist/index.mjs"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),{document:decorator_document,Element}=dist.C,delegateEventSplitter=/^(\S+)\s*(.*)$/,matchesMethod=null!=Element&&!Element.prototype.matches?"msMatchesSelector":"matches",hasMatchInAncestry=(element,selector)=>{if(element[matchesMethod](selector))return!0;let parent=element.parentElement;return!!parent&&hasMatchInAncestry(parent,selector)},applyEventHandlers=(actionsFn,...handles)=>{let root=decorator_document&&decorator_document.getElementById("storybook-root");(0,external_STORYBOOK_MODULE_PREVIEW_API_.useEffect)((()=>{if(null!=root){let handlers=((actionsFn,...handles)=>{let actionsObject=actionsFn(...handles);return Object.entries(actionsObject).map((([key,action])=>{let[_,eventName,selector]=key.match(delegateEventSplitter)||[];return{eventName,handler:e=>{(!selector||hasMatchInAncestry(e.target,selector))&&action(e)}}}))})(actionsFn,...handles);return handlers.forEach((({eventName,handler})=>root.addEventListener(eventName,handler))),()=>handlers.forEach((({eventName,handler})=>root.removeEventListener(eventName,handler)))}}),[root,actionsFn,handles])};const button_core_stories={title:"Components/Button",...{parameters:{actions:{handles:["atomClick"]}},decorators:[(0,external_STORYBOOK_MODULE_PREVIEW_API_.makeDecorator)({name:"withActions",parameterName:chunk_VWCVBQ22.Sz,skipIfNoParametersOrOptions:!0,wrapper:(getStory,context,{parameters})=>(parameters?.handles&&applyEventHandlers(actions,...parameters.handles),getStory(context))})],argTypes:{label:{control:"text",description:"The label of the button"},color:{control:"select",options:["primary","secondary"],description:"The color to use from your application's color palette."},fill:{control:"select",options:["solid","clear","outline"],description:"The fill style to use."},shape:{control:"select",options:["none","round"],description:"The shape of the button."},expand:{control:"select",options:["none","block","full"],description:"Expands the button to fill its parent container."},size:{control:"select",options:["small","default","large"],description:"The size of the button."},disabled:{control:"boolean",description:"If `true`, the user cannot interact with the button."},type:{control:"select",options:["submit","reset","button"],description:"The type of the button."},mode:{control:"select",options:["md","ios"],description:"The mode determines which platform styles to use."},atoClick:{action:"atoClick",description:"Emitted when the button is clicked."}}}},createButton=args=>`\n<atom-button\n  color="${args.color}"\n  fill="${args.fill}"\n  shape="${args.shape}"\n  expand="${args.expand}"\n  size="${args.size}"\n  disabled="${args.disabled}"\n  type="${args.type}"\n  mode="${args.mode}"\n>\n  ${args.label}\n</atom-button>\n  `,Default={render:args=>createButton(args),args:{...{color:"primary",fill:"solid",shape:"round",size:void 0,expand:void 0,disabled:!1,type:"button",mode:"md",label:"Button"}}},Secondary={render:args=>createButton(args),args:{...Default.args,color:"secondary"}},Outline={render:args=>createButton(args),args:{...Default.args,fill:"outline"}},Clear={render:args=>createButton(args),args:{...Default.args,fill:"clear"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...ButtonComponentArgs\n  }\n}",...Default.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    color: 'secondary'\n  }\n}",...Secondary.parameters?.docs?.source}}},Outline.parameters={...Outline.parameters,docs:{...Outline.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    fill: 'outline'\n  }\n}",...Outline.parameters?.docs?.source}}},Clear.parameters={...Clear.parameters,docs:{...Clear.parameters?.docs,source:{originalSource:"{\n  render: args => createButton(args),\n  args: {\n    ...Default.args,\n    fill: 'clear'\n  }\n}",...Clear.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Secondary","Outline","Clear"]}}]);