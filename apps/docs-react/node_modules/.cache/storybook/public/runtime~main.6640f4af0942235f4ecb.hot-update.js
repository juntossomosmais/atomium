"use strict";
globalThis["webpackHotUpdate_atomium_docs_react"]("runtime~main",{},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/amd options */
/******/ (() => {
/******/ 	__webpack_require__.amdO = {};
/******/ })();
/******/ 
/******/ /* webpack/runtime/chunk loaded */
/******/ (() => {
/******/ 	var deferred = [];
/******/ 	__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 		if(chunkIds) {
/******/ 			priority = priority || 0;
/******/ 			for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 			deferred[i] = [chunkIds, fn, priority];
/******/ 			return;
/******/ 		}
/******/ 		var notFulfilled = Infinity;
/******/ 		for (var i = 0; i < deferred.length; i++) {
/******/ 			var [chunkIds, fn, priority] = deferred[i];
/******/ 			var fulfilled = true;
/******/ 			for (var j = 0; j < chunkIds.length; j++) {
/******/ 				if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 					chunkIds.splice(j--, 1);
/******/ 				} else {
/******/ 					fulfilled = false;
/******/ 					if(priority < notFulfilled) notFulfilled = priority;
/******/ 				}
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferred.splice(i--, 1)
/******/ 				var r = fn();
/******/ 				if (r !== undefined) result = r;
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/create fake namespace object */
/******/ (() => {
/******/ 	var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 	var leafPrototypes;
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 16: return value when it's Promise-like
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = this(value);
/******/ 		if(mode & 8) return value;
/******/ 		if(typeof value === 'object' && value) {
/******/ 			if((mode & 4) && value.__esModule) return value;
/******/ 			if((mode & 16) && typeof value.then === 'function') return value;
/******/ 		}
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		var def = {};
/******/ 		leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 		for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 			Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 		}
/******/ 		def['default'] = () => (value);
/******/ 		__webpack_require__.d(ns, def);
/******/ 		return ns;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__webpack_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 			__webpack_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks
/******/ 	__webpack_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".iframe.bundle.js";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("fb87de90a3257b2818c7")
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__webpack_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/jsonp chunk loading */
/******/ (() => {
/******/ 	// no baseURI
/******/ 	
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 		"runtime~main": 0
/******/ 	};
/******/ 	
/******/ 	__webpack_require__.f.j = (chunkId, promises) => {
/******/ 			// JSONP chunk loading for javascript
/******/ 			var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 	
/******/ 				// a Promise means "currently loading".
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[2]);
/******/ 				} else {
/******/ 					if("runtime~main" != chunkId) {
/******/ 						// setup Promise in chunk cache
/******/ 						var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 						promises.push(installedChunkData[2] = promise);
/******/ 	
/******/ 						// start chunk loading
/******/ 						var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 						// create error before stack unwound to get useful stacktrace later
/******/ 						var error = new Error();
/******/ 						var loadingEnded = (event) => {
/******/ 							if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 								installedChunkData = installedChunks[chunkId];
/******/ 								if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 								if(installedChunkData) {
/******/ 									var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 									var realSrc = event && event.target && event.target.src;
/******/ 									error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 									error.name = 'ChunkLoadError';
/******/ 									error.type = errorType;
/******/ 									error.request = realSrc;
/******/ 									installedChunkData[1](error);
/******/ 								}
/******/ 							}
/******/ 						};
/******/ 						__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 	};
/******/ 	
/******/ 	// no prefetching
/******/ 	
/******/ 	// no preloaded
/******/ 	
/******/ 	var currentUpdatedModulesList;
/******/ 	var waitingUpdateResolves = {};
/******/ 	function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 		currentUpdatedModulesList = updatedModulesList;
/******/ 		return new Promise((resolve, reject) => {
/******/ 			waitingUpdateResolves[chunkId] = resolve;
/******/ 			// start update chunk loading
/******/ 			var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 			// create error before stack unwound to get useful stacktrace later
/******/ 			var error = new Error();
/******/ 			var loadingEnded = (event) => {
/******/ 				if(waitingUpdateResolves[chunkId]) {
/******/ 					waitingUpdateResolves[chunkId] = undefined
/******/ 					var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 					var realSrc = event && event.target && event.target.src;
/******/ 					error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 					error.name = 'ChunkLoadError';
/******/ 					error.type = errorType;
/******/ 					error.request = realSrc;
/******/ 					reject(error);
/******/ 				}
/******/ 			};
/******/ 			__webpack_require__.l(url, loadingEnded);
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	globalThis["webpackHotUpdate_atomium_docs_react"] = (chunkId, moreModules, runtime) => {
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 				currentUpdate[moduleId] = moreModules[moduleId];
/******/ 				if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 			}
/******/ 		}
/******/ 		if(runtime) currentUpdateRuntime.push(runtime);
/******/ 		if(waitingUpdateResolves[chunkId]) {
/******/ 			waitingUpdateResolves[chunkId]();
/******/ 			waitingUpdateResolves[chunkId] = undefined;
/******/ 		}
/******/ 	};
/******/ 	
/******/ 	  var currentUpdateChunks;
/******/ 	  var currentUpdate;
/******/ 	  var currentUpdateRemovedChunks;
/******/ 	  var currentUpdateRuntime;
/******/ 	  function applyHandler(options) {
/******/ 	    if (__webpack_require__.f)
/******/ 	      delete __webpack_require__.f.jsonpHmr;
/******/ 	    currentUpdateChunks = void 0;
/******/ 	    function getAffectedModuleEffects(updateModuleId) {
/******/ 	      var outdatedModules2 = [updateModuleId];
/******/ 	      var outdatedDependencies2 = {};
/******/ 	      var queue = outdatedModules2.map(function(id) {
/******/ 	        return {
/******/ 	          chain: [id],
/******/ 	          id
/******/ 	        };
/******/ 	      });
/******/ 	      while (queue.length > 0) {
/******/ 	        var queueItem = queue.pop();
/******/ 	        var moduleId2 = queueItem.id;
/******/ 	        var chain = queueItem.chain;
/******/ 	        var module3 = __webpack_require__.c[moduleId2];
/******/ 	        if (!module3 || module3.hot._selfAccepted && !module3.hot._selfInvalidated)
/******/ 	          continue;
/******/ 	        if (module3.hot._selfDeclined) {
/******/ 	          return {
/******/ 	            type: "self-declined",
/******/ 	            chain,
/******/ 	            moduleId: moduleId2
/******/ 	          };
/******/ 	        }
/******/ 	        if (module3.hot._main) {
/******/ 	          return {
/******/ 	            type: "unaccepted",
/******/ 	            chain,
/******/ 	            moduleId: moduleId2
/******/ 	          };
/******/ 	        }
/******/ 	        for (var i = 0; i < module3.parents.length; i++) {
/******/ 	          var parentId = module3.parents[i];
/******/ 	          var parent = __webpack_require__.c[parentId];
/******/ 	          if (!parent)
/******/ 	            continue;
/******/ 	          if (parent.hot._declinedDependencies[moduleId2]) {
/******/ 	            return {
/******/ 	              type: "declined",
/******/ 	              chain: chain.concat([parentId]),
/******/ 	              moduleId: moduleId2,
/******/ 	              parentId
/******/ 	            };
/******/ 	          }
/******/ 	          if (outdatedModules2.indexOf(parentId) !== -1)
/******/ 	            continue;
/******/ 	          if (parent.hot._acceptedDependencies[moduleId2]) {
/******/ 	            if (!outdatedDependencies2[parentId])
/******/ 	              outdatedDependencies2[parentId] = [];
/******/ 	            addAllToSet(outdatedDependencies2[parentId], [moduleId2]);
/******/ 	            continue;
/******/ 	          }
/******/ 	          delete outdatedDependencies2[parentId];
/******/ 	          outdatedModules2.push(parentId);
/******/ 	          queue.push({
/******/ 	            chain: chain.concat([parentId]),
/******/ 	            id: parentId
/******/ 	          });
/******/ 	        }
/******/ 	      }
/******/ 	      return {
/******/ 	        type: "accepted",
/******/ 	        moduleId: updateModuleId,
/******/ 	        outdatedModules: outdatedModules2,
/******/ 	        outdatedDependencies: outdatedDependencies2
/******/ 	      };
/******/ 	    }
/******/ 	    function addAllToSet(a, b) {
/******/ 	      for (var i = 0; i < b.length; i++) {
/******/ 	        var item = b[i];
/******/ 	        if (a.indexOf(item) === -1)
/******/ 	          a.push(item);
/******/ 	      }
/******/ 	    }
/******/ 	    var outdatedDependencies = {};
/******/ 	    var outdatedModules = [];
/******/ 	    var appliedUpdate = {};
/******/ 	    var warnUnexpectedRequire = function warnUnexpectedRequire2(module3) {
/******/ 	      console.warn(
/******/ 	        "[HMR] unexpected require(" + module3.id + ") to disposed module"
/******/ 	      );
/******/ 	    };
/******/ 	    for (var moduleId in currentUpdate) {
/******/ 	      if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 	        var newModuleFactory = currentUpdate[moduleId];
/******/ 	        var result;
/******/ 	        if (newModuleFactory) {
/******/ 	          result = getAffectedModuleEffects(moduleId);
/******/ 	        } else {
/******/ 	          result = {
/******/ 	            type: "disposed",
/******/ 	            moduleId
/******/ 	          };
/******/ 	        }
/******/ 	        var abortError = false;
/******/ 	        var doApply = false;
/******/ 	        var doDispose = false;
/******/ 	        var chainInfo = "";
/******/ 	        if (result.chain) {
/******/ 	          chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 	        }
/******/ 	        switch (result.type) {
/******/ 	          case "self-declined":
/******/ 	            if (options.onDeclined)
/******/ 	              options.onDeclined(result);
/******/ 	            if (!options.ignoreDeclined)
/******/ 	              abortError = new Error(
/******/ 	                "Aborted because of self decline: " + result.moduleId + chainInfo
/******/ 	              );
/******/ 	            break;
/******/ 	          case "declined":
/******/ 	            if (options.onDeclined)
/******/ 	              options.onDeclined(result);
/******/ 	            if (!options.ignoreDeclined)
/******/ 	              abortError = new Error(
/******/ 	                "Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo
/******/ 	              );
/******/ 	            break;
/******/ 	          case "unaccepted":
/******/ 	            if (options.onUnaccepted)
/******/ 	              options.onUnaccepted(result);
/******/ 	            if (!options.ignoreUnaccepted)
/******/ 	              abortError = new Error(
/******/ 	                "Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 	              );
/******/ 	            break;
/******/ 	          case "accepted":
/******/ 	            if (options.onAccepted)
/******/ 	              options.onAccepted(result);
/******/ 	            doApply = true;
/******/ 	            break;
/******/ 	          case "disposed":
/******/ 	            if (options.onDisposed)
/******/ 	              options.onDisposed(result);
/******/ 	            doDispose = true;
/******/ 	            break;
/******/ 	          default:
/******/ 	            throw new Error("Unexception type " + result.type);
/******/ 	        }
/******/ 	        if (abortError) {
/******/ 	          return {
/******/ 	            error: abortError
/******/ 	          };
/******/ 	        }
/******/ 	        if (doApply) {
/******/ 	          appliedUpdate[moduleId] = newModuleFactory;
/******/ 	          addAllToSet(outdatedModules, result.outdatedModules);
/******/ 	          for (moduleId in result.outdatedDependencies) {
/******/ 	            if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 	              if (!outdatedDependencies[moduleId])
/******/ 	                outdatedDependencies[moduleId] = [];
/******/ 	              addAllToSet(
/******/ 	                outdatedDependencies[moduleId],
/******/ 	                result.outdatedDependencies[moduleId]
/******/ 	              );
/******/ 	            }
/******/ 	          }
/******/ 	        }
/******/ 	        if (doDispose) {
/******/ 	          addAllToSet(outdatedModules, [result.moduleId]);
/******/ 	          appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 	        }
/******/ 	      }
/******/ 	    }
/******/ 	    currentUpdate = void 0;
/******/ 	    var outdatedSelfAcceptedModules = [];
/******/ 	    for (var j = 0; j < outdatedModules.length; j++) {
/******/ 	      var outdatedModuleId = outdatedModules[j];
/******/ 	      var module2 = __webpack_require__.c[outdatedModuleId];
/******/ 	      if (module2 && (module2.hot._selfAccepted || module2.hot._main) && // removed self-accepted modules should not be required
/******/ 	      appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire && // when called invalidate self-accepting is not possible
/******/ 	      !module2.hot._selfInvalidated) {
/******/ 	        outdatedSelfAcceptedModules.push({
/******/ 	          module: outdatedModuleId,
/******/ 	          require: module2.hot._requireSelf,
/******/ 	          errorHandler: module2.hot._selfAccepted
/******/ 	        });
/******/ 	      }
/******/ 	    }
/******/ 	    var moduleOutdatedDependencies;
/******/ 	    return {
/******/ 	      dispose: function() {
/******/ 	        currentUpdateRemovedChunks.forEach(function(chunkId) {
/******/ 	          delete installedChunks[chunkId];
/******/ 	        });
/******/ 	        currentUpdateRemovedChunks = void 0;
/******/ 	        var idx;
/******/ 	        var queue = outdatedModules.slice();
/******/ 	        while (queue.length > 0) {
/******/ 	          var moduleId2 = queue.pop();
/******/ 	          var module3 = __webpack_require__.c[moduleId2];
/******/ 	          if (!module3)
/******/ 	            continue;
/******/ 	          var data = {};
/******/ 	          var disposeHandlers = module3.hot._disposeHandlers;
/******/ 	          for (j = 0; j < disposeHandlers.length; j++) {
/******/ 	            disposeHandlers[j].call(null, data);
/******/ 	          }
/******/ 	          __webpack_require__.hmrD[moduleId2] = data;
/******/ 	          module3.hot.active = false;
/******/ 	          delete __webpack_require__.c[moduleId2];
/******/ 	          delete outdatedDependencies[moduleId2];
/******/ 	          for (j = 0; j < module3.children.length; j++) {
/******/ 	            var child = __webpack_require__.c[module3.children[j]];
/******/ 	            if (!child)
/******/ 	              continue;
/******/ 	            idx = child.parents.indexOf(moduleId2);
/******/ 	            if (idx >= 0) {
/******/ 	              child.parents.splice(idx, 1);
/******/ 	            }
/******/ 	          }
/******/ 	        }
/******/ 	        var dependency;
/******/ 	        for (var outdatedModuleId2 in outdatedDependencies) {
/******/ 	          if (__webpack_require__.o(outdatedDependencies, outdatedModuleId2)) {
/******/ 	            module3 = __webpack_require__.c[outdatedModuleId2];
/******/ 	            if (module3) {
/******/ 	              moduleOutdatedDependencies = outdatedDependencies[outdatedModuleId2];
/******/ 	              for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 	                dependency = moduleOutdatedDependencies[j];
/******/ 	                idx = module3.children.indexOf(dependency);
/******/ 	                if (idx >= 0)
/******/ 	                  module3.children.splice(idx, 1);
/******/ 	              }
/******/ 	            }
/******/ 	          }
/******/ 	        }
/******/ 	      },
/******/ 	      apply: function(reportError) {
/******/ 	        for (var updateModuleId in appliedUpdate) {
/******/ 	          if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 	            __webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 	          }
/******/ 	        }
/******/ 	        for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 	          currentUpdateRuntime[i](__webpack_require__);
/******/ 	        }
/******/ 	        for (var outdatedModuleId2 in outdatedDependencies) {
/******/ 	          if (__webpack_require__.o(outdatedDependencies, outdatedModuleId2)) {
/******/ 	            var module3 = __webpack_require__.c[outdatedModuleId2];
/******/ 	            if (module3) {
/******/ 	              moduleOutdatedDependencies = outdatedDependencies[outdatedModuleId2];
/******/ 	              var callbacks = [];
/******/ 	              var errorHandlers = [];
/******/ 	              var dependenciesForCallbacks = [];
/******/ 	              for (var j2 = 0; j2 < moduleOutdatedDependencies.length; j2++) {
/******/ 	                var dependency = moduleOutdatedDependencies[j2];
/******/ 	                var acceptCallback = module3.hot._acceptedDependencies[dependency];
/******/ 	                var errorHandler = module3.hot._acceptedErrorHandlers[dependency];
/******/ 	                if (acceptCallback) {
/******/ 	                  if (callbacks.indexOf(acceptCallback) !== -1)
/******/ 	                    continue;
/******/ 	                  callbacks.push(acceptCallback);
/******/ 	                  errorHandlers.push(errorHandler);
/******/ 	                  dependenciesForCallbacks.push(dependency);
/******/ 	                }
/******/ 	              }
/******/ 	              for (var k = 0; k < callbacks.length; k++) {
/******/ 	                try {
/******/ 	                  callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 	                } catch (err) {
/******/ 	                  if (typeof errorHandlers[k] === "function") {
/******/ 	                    try {
/******/ 	                      errorHandlers[k](err, {
/******/ 	                        moduleId: outdatedModuleId2,
/******/ 	                        dependencyId: dependenciesForCallbacks[k]
/******/ 	                      });
/******/ 	                    } catch (err2) {
/******/ 	                      if (options.onErrored) {
/******/ 	                        options.onErrored({
/******/ 	                          type: "accept-error-handler-errored",
/******/ 	                          moduleId: outdatedModuleId2,
/******/ 	                          dependencyId: dependenciesForCallbacks[k],
/******/ 	                          error: err2,
/******/ 	                          originalError: err
/******/ 	                        });
/******/ 	                      }
/******/ 	                      if (!options.ignoreErrored) {
/******/ 	                        reportError(err2);
/******/ 	                        reportError(err);
/******/ 	                      }
/******/ 	                    }
/******/ 	                  } else {
/******/ 	                    if (options.onErrored) {
/******/ 	                      options.onErrored({
/******/ 	                        type: "accept-errored",
/******/ 	                        moduleId: outdatedModuleId2,
/******/ 	                        dependencyId: dependenciesForCallbacks[k],
/******/ 	                        error: err
/******/ 	                      });
/******/ 	                    }
/******/ 	                    if (!options.ignoreErrored) {
/******/ 	                      reportError(err);
/******/ 	                    }
/******/ 	                  }
/******/ 	                }
/******/ 	              }
/******/ 	            }
/******/ 	          }
/******/ 	        }
/******/ 	        for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 	          var item = outdatedSelfAcceptedModules[o];
/******/ 	          var moduleId2 = item.module;
/******/ 	          try {
/******/ 	            item.require(moduleId2);
/******/ 	          } catch (err) {
/******/ 	            if (typeof item.errorHandler === "function") {
/******/ 	              try {
/******/ 	                item.errorHandler(err, {
/******/ 	                  moduleId: moduleId2,
/******/ 	                  module: __webpack_require__.c[moduleId2]
/******/ 	                });
/******/ 	              } catch (err2) {
/******/ 	                if (options.onErrored) {
/******/ 	                  options.onErrored({
/******/ 	                    type: "self-accept-error-handler-errored",
/******/ 	                    moduleId: moduleId2,
/******/ 	                    error: err2,
/******/ 	                    originalError: err
/******/ 	                  });
/******/ 	                }
/******/ 	                if (!options.ignoreErrored) {
/******/ 	                  reportError(err2);
/******/ 	                  reportError(err);
/******/ 	                }
/******/ 	              }
/******/ 	            } else {
/******/ 	              if (options.onErrored) {
/******/ 	                options.onErrored({
/******/ 	                  type: "self-accept-errored",
/******/ 	                  moduleId: moduleId2,
/******/ 	                  error: err
/******/ 	                });
/******/ 	              }
/******/ 	              if (!options.ignoreErrored) {
/******/ 	                reportError(err);
/******/ 	              }
/******/ 	            }
/******/ 	          }
/******/ 	        }
/******/ 	        return outdatedModules;
/******/ 	      }
/******/ 	    };
/******/ 	  }
/******/ 	  __webpack_require__.hmrI.jsonp = function(moduleId, applyHandlers) {
/******/ 	    if (!currentUpdate) {
/******/ 	      currentUpdate = {};
/******/ 	      currentUpdateRuntime = [];
/******/ 	      currentUpdateRemovedChunks = [];
/******/ 	      applyHandlers.push(applyHandler);
/******/ 	    }
/******/ 	    if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 	      currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 	    }
/******/ 	  };
/******/ 	  __webpack_require__.hmrC.jsonp = function(chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) {
/******/ 	    applyHandlers.push(applyHandler);
/******/ 	    currentUpdateChunks = {};
/******/ 	    currentUpdateRemovedChunks = removedChunks;
/******/ 	    currentUpdate = removedModules.reduce(function(obj, key) {
/******/ 	      obj[key] = false;
/******/ 	      return obj;
/******/ 	    }, {});
/******/ 	    currentUpdateRuntime = [];
/******/ 	    chunkIds.forEach(function(chunkId) {
/******/ 	      if (__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId] !== void 0) {
/******/ 	        promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 	        currentUpdateChunks[chunkId] = true;
/******/ 	      } else {
/******/ 	        currentUpdateChunks[chunkId] = false;
/******/ 	      }
/******/ 	    });
/******/ 	    if (__webpack_require__.f) {
/******/ 	      __webpack_require__.f.jsonpHmr = function(chunkId, promises2) {
/******/ 	        if (currentUpdateChunks && __webpack_require__.o(currentUpdateChunks, chunkId) && !currentUpdateChunks[chunkId]) {
/******/ 	          promises2.push(loadUpdateChunk(chunkId));
/******/ 	          currentUpdateChunks[chunkId] = true;
/******/ 	        }
/******/ 	      };
/******/ 	    }
/******/ 	  };
/******/ 	
/******/ 	__webpack_require__.hmrM = () => {
/******/ 		if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 		return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 			if(response.status === 404) return; // no update available
/******/ 			if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 			return response.json();
/******/ 		});
/******/ 	};
/******/ 	
/******/ 	__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 	
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 		var [chunkIds, moreModules, runtime] = data;
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0;
/******/ 		if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 		}
/******/ 		if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				installedChunks[chunkId][0]();
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		return __webpack_require__.O(result);
/******/ 	}
/******/ 	
/******/ 	var chunkLoadingGlobal = globalThis["webpackChunk_atomium_docs_react"] = globalThis["webpackChunk_atomium_docs_react"] || [];
/******/ 	chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 	chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ })();
/******/ 
/******/ /* webpack/runtime/nonce */
/******/ (() => {
/******/ 	__webpack_require__.nc = undefined;
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=runtime~main.6640f4af0942235f4ecb.hot-update.js.map