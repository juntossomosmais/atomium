"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nxE2EPreset = exports.nxBaseCypressPreset = void 0;
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const fs_1 = require("fs");
const preprocessor_vite_1 = require("../src/plugins/preprocessor-vite");
function nxBaseCypressPreset(pathToConfig) {
    // prevent from placing path outside the root of the workspace
    // if they pass in a file or directory
    const normalizedPath = (0, fs_1.lstatSync)(pathToConfig).isDirectory()
        ? pathToConfig
        : (0, path_1.dirname)(pathToConfig);
    const projectPath = (0, path_1.relative)(devkit_1.workspaceRoot, normalizedPath);
    const offset = (0, path_1.relative)(normalizedPath, devkit_1.workspaceRoot);
    const videosFolder = (0, path_1.join)(offset, 'dist', 'cypress', projectPath, 'videos');
    const screenshotsFolder = (0, path_1.join)(offset, 'dist', 'cypress', projectPath, 'screenshots');
    return {
        videosFolder,
        screenshotsFolder,
        video: true,
        chromeWebSecurity: false,
    };
}
exports.nxBaseCypressPreset = nxBaseCypressPreset;
/**
 * nx E2E Preset for Cypress
 * @description
 * this preset contains the base configuration
 * for your e2e tests that nx recommends.
 * you can easily extend this within your cypress config via spreading the preset
 * @example
 * export default defineConfig({
 *   e2e: {
 *     ...nxE2EPreset(__dirname)
 *     // add your own config here
 *   }
 * })
 *
 * @param pathToConfig will be used to construct the output paths for videos and screenshots
 */
function nxE2EPreset(pathToConfig, options) {
    const basePath = (options === null || options === void 0 ? void 0 : options.cypressDir) || 'src';
    const baseConfig = Object.assign(Object.assign({}, nxBaseCypressPreset(pathToConfig)), { fileServerFolder: '.', supportFile: `${basePath}/support/e2e.ts`, specPattern: `${basePath}/**/*.cy.{js,jsx,ts,tsx}`, fixturesFolder: `${basePath}/fixtures` });
    if ((options === null || options === void 0 ? void 0 : options.bundler) === 'vite') {
        return Object.assign(Object.assign({}, baseConfig), { setupNodeEvents(on) {
                on('file:preprocessor', (0, preprocessor_vite_1.default)());
            } });
    }
    return baseConfig;
}
exports.nxE2EPreset = nxE2EPreset;
//# sourceMappingURL=cypress-preset.js.map