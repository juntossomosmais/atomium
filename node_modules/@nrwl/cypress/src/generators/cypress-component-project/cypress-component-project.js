"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTsConfigForComponentTesting = exports.cypressComponentProject = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const cypress_version_1 = require("../../utils/cypress-version");
const versions_1 = require("../../utils/versions");
function cypressComponentProject(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const cyVersion = (0, cypress_version_1.installedCypressVersion)();
        if (cyVersion && cyVersion < 10) {
            throw new Error('Cypress version of 10 or higher is required to use component testing. See the migration guide to upgrade. https://nx.dev/cypress/v10-migration-guide');
        }
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const installDepsTask = updateDeps(tree, options);
        addProjectFiles(tree, projectConfig, options);
        addTargetToProject(tree, projectConfig, options);
        updateNxJsonConfiguration(tree);
        updateTsConfigForComponentTesting(tree, projectConfig);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => {
            installDepsTask();
        };
    });
}
exports.cypressComponentProject = cypressComponentProject;
function updateDeps(tree, options) {
    const devDeps = {
        cypress: versions_1.cypressVersion,
    };
    if (options.bundler === 'vite') {
        devDeps['@cypress/vite-dev-server'] = versions_1.cypressViteDevServerVersion;
    }
    else {
        devDeps['@cypress/webpack-dev-server'] = versions_1.cypressWebpackVersion;
        devDeps['html-webpack-plugin'] = versions_1.htmlWebpackPluginVersion;
    }
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDeps);
}
function addProjectFiles(tree, projectConfig, options) {
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), projectConfig.root, Object.assign(Object.assign({}, options), { projectRoot: projectConfig.root, offsetFromRoot: (0, devkit_1.offsetFromRoot)(projectConfig.root), ext: '' }));
}
function addTargetToProject(tree, projectConfig, options) {
    projectConfig.targets['component-test'] = {
        executor: '@nrwl/cypress:cypress',
        options: {
            cypressConfig: (0, devkit_1.joinPathFragments)(projectConfig.root, 'cypress.config.ts'),
            testingType: 'component',
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
}
function updateNxJsonConfiguration(tree) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    var _m, _o;
    const nxJson = (0, devkit_1.readNxJson)(tree);
    nxJson.tasksRunnerOptions = Object.assign(Object.assign({}, nxJson === null || nxJson === void 0 ? void 0 : nxJson.tasksRunnerOptions), { default: Object.assign(Object.assign({}, (_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.tasksRunnerOptions) === null || _a === void 0 ? void 0 : _a.default), { options: Object.assign(Object.assign({}, (_c = (_b = nxJson === null || nxJson === void 0 ? void 0 : nxJson.tasksRunnerOptions) === null || _b === void 0 ? void 0 : _b.default) === null || _c === void 0 ? void 0 : _c.options), { cacheableOperations: Array.from(new Set([
                    ...((_g = (_f = (_e = (_d = nxJson === null || nxJson === void 0 ? void 0 : nxJson.tasksRunnerOptions) === null || _d === void 0 ? void 0 : _d.default) === null || _e === void 0 ? void 0 : _e.options) === null || _f === void 0 ? void 0 : _f.cacheableOperations) !== null && _g !== void 0 ? _g : []),
                    'component-test',
                ])) }) }) });
    if (nxJson.namedInputs) {
        (_h = nxJson.targetDefaults) !== null && _h !== void 0 ? _h : (nxJson.targetDefaults = {});
        const productionFileSet = (_j = nxJson.namedInputs) === null || _j === void 0 ? void 0 : _j.production;
        if (productionFileSet) {
            nxJson.namedInputs.production = Array.from(new Set([
                ...productionFileSet,
                '!{projectRoot}/cypress/**/*',
                '!{projectRoot}/**/*.cy.[jt]s?(x)',
                '!{projectRoot}/cypress.config.[jt]s',
            ]));
        }
        (_k = (_m = nxJson.targetDefaults)['component-test']) !== null && _k !== void 0 ? _k : (_m['component-test'] = {});
        (_l = (_o = nxJson.targetDefaults['component-test']).inputs) !== null && _l !== void 0 ? _l : (_o.inputs = [
            'default',
            productionFileSet ? '^production' : '^default',
        ]);
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function updateTsConfigForComponentTesting(tree, projectConfig) {
    const tsConfigPath = (0, devkit_1.joinPathFragments)(projectConfig.root, projectConfig.projectType === 'library'
        ? 'tsconfig.lib.json'
        : 'tsconfig.app.json');
    if (tree.exists(tsConfigPath)) {
        (0, devkit_1.updateJson)(tree, tsConfigPath, (json) => {
            const excluded = new Set([
                ...(json.exclude || []),
                'cypress/**/*',
                'cypress.config.ts',
                '**/*.cy.ts',
                '**/*.cy.js',
                '**/*.cy.tsx',
                '**/*.cy.jsx',
            ]);
            json.exclude = Array.from(excluded);
            return json;
        });
    }
    const projectBaseTsConfig = (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json');
    if (tree.exists(projectBaseTsConfig)) {
        (0, devkit_1.updateJson)(tree, projectBaseTsConfig, (json) => {
            if (json.references) {
                const hasCyTsConfig = json.references.some((r) => r.path === './cypress/tsconfig.cy.json');
                if (!hasCyTsConfig) {
                    json.references.push({ path: './cypress/tsconfig.cy.json' });
                }
            }
            else {
                const excluded = new Set([
                    ...(json.exclude || []),
                    'cypress/**/*',
                    'cypress.config.ts',
                    '**/*.cy.ts',
                    '**/*.cy.js',
                    '**/*.cy.tsx',
                    '**/*.cy.jsx',
                ]);
                json.exclude = Array.from(excluded);
            }
            return json;
        });
    }
}
exports.updateTsConfigForComponentTesting = updateTsConfigForComponentTesting;
//# sourceMappingURL=cypress-component-project.js.map