"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectSchematic = exports.cypressProjectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
const js_1 = require("@nrwl/js");
const path_1 = require("path");
const cypress_version_1 = require("../../utils/cypress-version");
const project_name_1 = require("../../utils/project-name");
const versions_1 = require("../../utils/versions");
const init_1 = require("../init/init");
const add_linter_1 = require("../../utils/add-linter");
function createFiles(tree, options) {
    // if not installed or >v10 use v10 folder
    // else use v9 folder
    const cypressVersion = (0, cypress_version_1.installedCypressVersion)();
    const cypressFiles = cypressVersion && cypressVersion < 10 ? 'v9-and-under' : 'v10-and-after';
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, './files', cypressFiles), options.projectRoot, Object.assign(Object.assign({ tmpl: '' }, options), { project: options.project || 'Project', ext: options.js ? 'js' : 'ts', offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(tree, options.projectRoot), bundler: options.bundler }));
    if (cypressVersion && cypressVersion < 7) {
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(options.projectRoot, 'cypress.json'), (json) => {
            json.pluginsFile = './src/plugins/index';
            return json;
        });
    }
    else if (cypressVersion < 10) {
        const pluginPath = (0, path_1.join)(options.projectRoot, 'src/plugins/index.js');
        if (tree.exists(pluginPath)) {
            tree.delete(pluginPath);
        }
    }
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
}
function addProject(tree, options) {
    var _a, _b, _c, _d, _e;
    let e2eProjectConfig;
    const detectedCypressVersion = (_a = (0, cypress_version_1.installedCypressVersion)()) !== null && _a !== void 0 ? _a : versions_1.cypressVersion;
    const cypressConfig = detectedCypressVersion < 10 ? 'cypress.json' : 'cypress.config.ts';
    if (options.baseUrl) {
        e2eProjectConfig = {
            root: options.projectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.projectRoot, 'src'),
            projectType: 'application',
            targets: {
                e2e: {
                    executor: '@nrwl/cypress:cypress',
                    options: {
                        cypressConfig: (0, devkit_1.joinPathFragments)(options.projectRoot, cypressConfig),
                        baseUrl: options.baseUrl,
                        testingType: 'e2e',
                    },
                },
            },
            tags: [],
            implicitDependencies: options.project ? [options.project] : undefined,
        };
    }
    else if (options.project) {
        const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        if (!project.targets) {
            devkit_1.logger.warn((0, devkit_1.stripIndents) `
      NOTE: Project, "${options.project}", does not have any targets defined and a baseUrl was not provided. Nx will use
      "${options.project}:serve" as the devServerTarget. But you may need to define this target within the project, "${options.project}".
      `);
        }
        const devServerTarget = ((_b = project.targets) === null || _b === void 0 ? void 0 : _b.serve) && ((_d = (_c = project.targets) === null || _c === void 0 ? void 0 : _c.serve) === null || _d === void 0 ? void 0 : _d.defaultConfiguration)
            ? `${options.project}:serve:${project.targets.serve.defaultConfiguration}`
            : `${options.project}:serve`;
        e2eProjectConfig = {
            root: options.projectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.projectRoot, 'src'),
            projectType: 'application',
            targets: {
                e2e: {
                    executor: '@nrwl/cypress:cypress',
                    options: {
                        cypressConfig: (0, devkit_1.joinPathFragments)(options.projectRoot, cypressConfig),
                        devServerTarget,
                        testingType: 'e2e',
                    },
                    configurations: {
                        production: {
                            devServerTarget: `${options.project}:serve:production`,
                        },
                    },
                },
            },
            tags: [],
            implicitDependencies: options.project ? [options.project] : undefined,
        };
        if ((_e = project.targets) === null || _e === void 0 ? void 0 : _e['serve-static']) {
            e2eProjectConfig.targets.e2e.configurations.ci = {
                devServerTarget: `${options.project}:serve-static`,
            };
        }
    }
    else {
        throw new Error(`Either project or baseUrl should be specified.`);
    }
    if (detectedCypressVersion < 7) {
        e2eProjectConfig.targets.e2e.options.tsConfig = (0, devkit_1.joinPathFragments)(options.projectRoot, 'tsconfig.json');
    }
    (0, devkit_1.addProjectConfiguration)(tree, options.projectName, e2eProjectConfig);
}
/**
 * @deprecated use cypressE2EConfigurationGenerator instead
 **/
function cypressProjectGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(host, schema);
        const tasks = [];
        const cypressVersion = (0, cypress_version_1.installedCypressVersion)();
        // if there is an installed cypress version, then we don't call
        // init since we want to keep the existing version that is installed
        if (!cypressVersion) {
            tasks.push(yield (0, init_1.cypressInitGenerator)(host, options));
        }
        if (schema.bundler === 'vite') {
            tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, {}, {
                vite: versions_1.viteVersion,
            }));
        }
        createFiles(host, options);
        addProject(host, options);
        const installTask = yield (0, add_linter_1.addLinterToCyProject)(host, Object.assign(Object.assign({}, options), { cypressDir: 'src', linter: schema.linter, project: options.projectName, overwriteExisting: true }));
        tasks.push(installTask);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.cypressProjectGenerator = cypressProjectGenerator;
function normalizeOptions(host, options) {
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const appsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : (0, devkit_1.getWorkspaceLayout)(host).appsDir;
    let projectName;
    let projectRoot;
    let maybeRootProject;
    let isRootProject = false;
    const projects = (0, devkit_1.getProjects)(host);
    // nx will set the project option for generators when ran within a project.
    // since the root project will always be set for standlone projects we can just check it here.
    if (options.project) {
        maybeRootProject = projects.get(options.project);
    }
    if ((maybeRootProject === null || maybeRootProject === void 0 ? void 0 : maybeRootProject.root) === '.' ||
        // should still check to see if we are in a standalone based workspace
        (!maybeRootProject &&
            Array.from(projects.values()).some((config) => config.root === '.'))) {
        projectName = options.name;
        projectRoot = options.name;
        isRootProject = true;
    }
    else {
        projectName = (0, project_name_1.filePathPrefix)(projectDirectory ? `${projectDirectory}-${options.name}` : options.name);
        projectRoot = projectDirectory
            ? (0, devkit_1.joinPathFragments)(appsDir, (0, devkit_1.names)(projectDirectory).fileName, options.name)
            : (0, devkit_1.joinPathFragments)(appsDir, options.name);
    }
    options.linter = options.linter || linter_1.Linter.EsLint;
    options.bundler = options.bundler || 'webpack';
    return Object.assign(Object.assign({}, options), { 
        // other generators depend on the rootProject flag down stream
        rootProject: isRootProject, projectName,
        projectRoot });
}
exports.default = cypressProjectGenerator;
exports.cypressProjectSchematic = (0, devkit_1.convertNxGenerator)(cypressProjectGenerator);
//# sourceMappingURL=cypress-project.js.map