import { ProjectConfiguration, Tree } from '@nrwl/devkit';
export declare function findCypressConfigs(tree: Tree, projectConfig: ProjectConfiguration, target: string, config: string): {
    cypressConfigPathJson: string;
    cypressConfigPathTs: string;
};
/**
 * update the existing cypress.json config to the new cypress.config.ts structure.
 * return both the old and new configs
 */
export declare function createNewCypressConfig(tree: Tree, projectConfig: ProjectConfiguration, cypressConfigPathJson: string): {
    cypressConfigTs: Record<string, any>;
    cypressConfigJson: Record<string, any>;
};
export declare function createSupportFileImport(oldSupportFilePath: string, newSupportFilePath: string, projectSourceRoot: string): {
    oldImportPathLeaf: string;
    newImportPathLeaf: string;
};
export declare function updateProjectPaths(tree: Tree, projectConfig: ProjectConfiguration, { cypressConfigTs, cypressConfigJson, }: {
    cypressConfigTs: Record<string, any>;
    cypressConfigJson: Record<string, any>;
}): void;
export declare function updateImports(tree: Tree, filePath: string, oldImportPath: string, newImportPath: string): void;
export declare function writeNewConfig(tree: Tree, cypressConfigPathTs: string, cypressConfigs: {
    cypressConfigTs: Record<string, any>;
    cypressConfigJson: Record<string, any>;
}): void;
export declare function addConfigToTsConfig(tree: Tree, tsconfigPath: string, cypressConfigPath: string): void;
export declare function updatePluginFile(tree: Tree, projectConfig: ProjectConfiguration, cypressConfigs: {
    cypressConfigTs: Record<string, any>;
    cypressConfigJson: Record<string, any>;
}): {
    cypressConfigTs: Record<string, any>;
    cypressConfigJson: Record<string, any>;
};
