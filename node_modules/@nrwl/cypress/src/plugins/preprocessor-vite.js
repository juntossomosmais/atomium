"use strict";
// Adapted from: https://github.com/mammadataei/cypress-vite
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
/**
 * Cypress preprocessor for running e2e tests using vite.
 *
 * @param {string} userConfigPath
 * @example
 * setupNodeEvents(on) {
 *   on(
 *     'file:preprocessor',
 *     vitePreprocessor(path.resolve(__dirname, './vite.config.ts')),
 *   )
 * },
 */
function vitePreprocessor(userConfigPath) {
    return (file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { outputPath, filePath, shouldWatch } = file;
        const fileName = path.basename(outputPath);
        const filenameWithoutExtension = path.basename(outputPath, path.extname(outputPath));
        const defaultConfig = {
            logLevel: 'silent',
            define: {
                'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
            },
            build: {
                emptyOutDir: false,
                minify: false,
                outDir: path.dirname(outputPath),
                sourcemap: true,
                write: true,
                watch: getWatcherConfig(shouldWatch),
                lib: {
                    entry: filePath,
                    fileName: () => fileName,
                    formats: ['umd'],
                    name: filenameWithoutExtension,
                },
            },
        };
        const { build } = require('vite');
        const watcher = yield build(Object.assign({ configFile: userConfigPath }, defaultConfig));
        if (shouldWatch && isWatcher(watcher)) {
            watcher.on('event', (event) => {
                if (event.code === 'END') {
                    file.emit('rerun');
                }
                if (event.code === 'ERROR') {
                    console.error(event);
                }
            });
            file.on('close', () => {
                watcher.close();
            });
        }
        return outputPath;
    });
}
function getWatcherConfig(shouldWatch) {
    return shouldWatch ? {} : null;
}
function isWatcher(watcher) {
    return watcher.on !== undefined;
}
exports.default = vitePreprocessor;
//# sourceMappingURL=preprocessor-vite.js.map