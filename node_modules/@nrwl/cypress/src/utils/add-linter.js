"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLinterToCyProject = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
const global_eslint_config_1 = require("@nrwl/linter/src/generators/init/global-eslint-config");
const cypress_version_1 = require("./cypress-version");
const versions_1 = require("./versions");
function addLinterToCyProject(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.linter === linter_1.Linter.None) {
            return () => { };
        }
        const tasks = [];
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        if (!tree.exists((0, devkit_1.joinPathFragments)(projectConfig.root, '.eslintrc.json'))) {
            tasks.push(yield (0, linter_1.lintProjectGenerator)(tree, {
                project: options.project,
                linter: options.linter,
                skipFormat: true,
                tsConfigPaths: [(0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json')],
                eslintFilePatterns: [
                    `${projectConfig.root}/**/*.${options.js ? 'js' : '{js,ts}'}`,
                ],
                setParserOptionsProject: options.setParserOptionsProject,
                skipPackageJson: options.skipPackageJson,
                rootProject: options.rootProject,
            }));
        }
        if (!options.linter || options.linter !== linter_1.Linter.EsLint) {
            return (0, devkit_1.runTasksInSerial)(...tasks);
        }
        tasks.push(!options.skipPackageJson
            ? (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { 'eslint-plugin-cypress': versions_1.eslintPluginCypressVersion })
            : () => { });
        (0, devkit_1.updateJson)(tree, (0, devkit_1.joinPathFragments)(projectConfig.root, '.eslintrc.json'), (json) => {
            var _a;
            if (options.rootProject) {
                json.plugins = ['@nrwl/nx'];
                json.extends = ['plugin:cypress/recommended'];
            }
            else {
                json.extends = ['plugin:cypress/recommended', ...json.extends];
            }
            (_a = json.overrides) !== null && _a !== void 0 ? _a : (json.overrides = []);
            const globals = options.rootProject ? [global_eslint_config_1.globalJavaScriptOverrides] : [];
            const override = {
                files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
                parserOptions: !options.setParserOptionsProject
                    ? undefined
                    : {
                        project: `${projectConfig.root}/tsconfig.*?.json`,
                    },
                rules: {},
            };
            const cyFiles = [
                Object.assign(Object.assign({}, override), { files: [
                        '*.cy.{ts,js,tsx,jsx}',
                        `${options.cypressDir}/**/*.{ts,js,tsx,jsx}`,
                    ] }),
            ];
            if (options.overwriteExisting) {
                json.overrides = [...globals, override];
            }
            else {
                json.overrides.push(...globals);
                json.overrides.push(...cyFiles);
            }
            const cyVersion = (0, cypress_version_1.installedCypressVersion)();
            if (cyVersion && cyVersion < 7) {
                /**
                 * We need this override because we enabled allowJS in the tsconfig to allow for JS based Cypress tests.
                 * That however leads to issues with the CommonJS Cypress plugin file.
                 */
                json.overrides.push({
                    files: [`${options.cypressDir}/plugins/index.js`],
                    rules: {
                        '@typescript-eslint/no-var-requires': 'off',
                        'no-undef': 'off',
                    },
                });
            }
            return json;
        });
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.addLinterToCyProject = addLinterToCyProject;
//# sourceMappingURL=add-linter.js.map