"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callAutomigrate = exports.callUpgrade = void 0;
const devkit_1 = require("@nrwl/devkit");
const child_process_1 = require("child_process");
function callUpgrade(schema) {
    try {
        devkit_1.output.log({
            title: `Calling sb upgrade`,
            bodyLines: [
                `ℹ️ Nx will call the Storybook CLI to upgrade your @storybook/* packages to the latest version.`,
                `📖 You can read more about the Storybook upgrade command here: https://storybook.js.org/docs/7.0/react/configure/upgrading`,
            ],
            color: 'blue',
        });
        (0, child_process_1.execSync)(`npx storybook@next upgrade --prerelease ${schema.autoAcceptAllPrompts ? '--yes' : ''}`, {
            stdio: [0, 1, 2],
        });
        devkit_1.output.log({
            title: `Storybook packages upgraded.`,
            bodyLines: [
                `☑️ The upgrade command was successful.`,
                `Your Storybook packages are now at the latest version.`,
            ],
            color: 'green',
        });
    }
    catch (e) {
        devkit_1.output.log({
            title: 'Migration failed',
            bodyLines: [
                `🚨 The Storybook CLI failed to upgrade your @storybook/* packages to the latest version.`,
                `Please try running the sb upgrade command manually:`,
                `npx storybook@next upgrade --prerelease`,
            ],
            color: 'red',
        });
        console.log(e);
        return 1;
    }
}
exports.callUpgrade = callUpgrade;
function callAutomigrate(allStorybookProjects, schema) {
    devkit_1.output.log({
        title: `⚙️ Calling sb automigrate`,
        bodyLines: [
            `ℹ️  Nx will call the Storybook CLI to automigrate the Storybook configuration of all your projects that use Storybook.`,
            `📖 You can read more about the Storybook automigrate command here: https://storybook.js.org/docs/7.0/react/configure/upgrading#automigrate-script`,
        ],
        color: 'green',
    });
    const resultOfMigration = {
        successfulProjects: {},
        failedProjects: {},
    };
    Object.entries(allStorybookProjects).forEach(([projectName, storybookProjectInfo]) => {
        const commandToRun = `npx sb@next automigrate --config-dir ${storybookProjectInfo.configDir} --renderer ${storybookProjectInfo.uiFramework}`;
        try {
            devkit_1.output.log({
                title: `Calling sb automigrate for ${projectName}`,
                bodyLines: ['Command:', commandToRun],
                color: 'green',
            });
            (0, child_process_1.execSync)(`${commandToRun}  ${schema.autoAcceptAllPrompts ? '--yes' : ''}`, {
                stdio: 'inherit',
            });
            resultOfMigration.successfulProjects[projectName] = commandToRun;
        }
        catch (e) {
            devkit_1.output.error({
                title: 'Migration failed',
                bodyLines: [
                    `🚨 The Storybook CLI failed to automigrate the Storybook configuration of your project.`,
                    `The error was: ${e}`,
                    `Please try running the sb automigrate command manually:`,
                    commandToRun,
                ],
            });
            resultOfMigration.failedProjects[projectName] = commandToRun;
        }
    });
    return resultOfMigration;
}
exports.callAutomigrate = callAutomigrate;
//# sourceMappingURL=calling-storybook-cli.js.map