"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logResult = exports.afterMigration = exports.checkWebComponentsInstalled = exports.checkStorybookInstalled = exports.handleMigrationResult = exports.prepareFiles = exports.getAllStorybookInfo = exports.changeCoreCommonImportToFramework = exports.removeUiFrameworkFromProjectJson = exports.removeTypecastFromMainTs = exports.normalizeViteConfigFilePathWithTree = exports.addViteConfigFilePathInFrameworkOptions = exports.removeViteTsConfigPathsPlugin = exports.removePathResolvesFromNextConfig = exports.writeFile = exports.onlyShowGuide = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const executor_options_utils_1 = require("@nrwl/devkit/src/generators/executor-options-utils");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const fs = require("fs");
const fileutils_1 = require("nx/src/utils/fileutils");
const fs_1 = require("fs");
const path_1 = require("path");
function onlyShowGuide(storybookProjects) {
    devkit_1.output.log({
        title: 'Storybook 7 Migration Guide',
        bodyLines: [
            `You can run the following commands manually to upgrade your Storybook projects to Storybook 7:`,
            ``,
            `1. Call the Storybook upgrade script:`,
            `npx storybook@next upgrade --prerelease`,
            ``,
            `2. Call the Nx generator to prepare your files for migration:`,
            `nx g @nrwl/storybook:migrate-7 --onlyPrepare`,
            ``,
            `3. Call the Storybook automigrate scripts:`,
            `Run the following commands for each Storybook project:`,
            ...Object.entries(storybookProjects).map(([_projectName, storybookProjectInfo]) => {
                return `npx sb@next automigrate --config-dir ${storybookProjectInfo.configDir} --renderer ${storybookProjectInfo.uiFramework}`;
            }),
            ``,
            `4. Call the Nx generator to finish the migration:`,
            `nx g @nrwl/storybook:migrate-7 --afterMigration`,
        ],
    });
}
exports.onlyShowGuide = onlyShowGuide;
function writeFile(file) {
    if ((file === null || file === void 0 ? void 0 : file.path) && (file === null || file === void 0 ? void 0 : file.content)) {
        fs.writeFileSync(file.path, file.content);
    }
}
exports.writeFile = writeFile;
function removePathResolvesFromNextConfig(tree, mainJsTsPath) {
    var _a, _b;
    let mainJsTs = tree.read(mainJsTsPath, 'utf-8');
    const hasNextConfig = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="nextConfigPath"]))`);
    const nextConfigPathAssignment = hasNextConfig === null || hasNextConfig === void 0 ? void 0 : hasNextConfig.find((propertyAssignment) => {
        return propertyAssignment.getText().startsWith('nextConfigPath');
    });
    if (!nextConfigPathAssignment) {
        // No nextConfigPath found, nothing to do
        return;
    }
    const pathResolve = (_a = tsquery_1.tsquery.query(nextConfigPathAssignment, `CallExpression:has(PropertyAccessExpression:has([name="path"]):has([name="resolve"]))`)) === null || _a === void 0 ? void 0 : _a[0];
    if (pathResolve) {
        const getStringLiteral = (_b = tsquery_1.tsquery.query(pathResolve, 'StringLiteral')) === null || _b === void 0 ? void 0 : _b[0];
        if (getStringLiteral) {
            mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                {
                    type: devkit_1.ChangeType.Delete,
                    start: pathResolve.getStart(),
                    length: pathResolve.getText().length,
                },
                {
                    type: devkit_1.ChangeType.Insert,
                    index: pathResolve.getStart(),
                    text: getStringLiteral.getText(),
                },
            ]);
            return {
                path: mainJsTsPath,
                content: mainJsTs,
            };
        }
    }
}
exports.removePathResolvesFromNextConfig = removePathResolvesFromNextConfig;
function removeViteTsConfigPathsPlugin(tree, mainJsTsPath) {
    let mainJsTs = tree.read(mainJsTsPath, 'utf-8');
    const { vitePluginVariableName, importExpression } = getViteTsConfigPathsNameAndImport(mainJsTs);
    const viteTsConfigPathsPluginParent = tsquery_1.tsquery.query(mainJsTs, `CallExpression:has(Identifier[name="${vitePluginVariableName}"])`);
    const viteTsConfigPathsPlugin = viteTsConfigPathsPluginParent === null || viteTsConfigPathsPluginParent === void 0 ? void 0 : viteTsConfigPathsPluginParent.find((callExpression) => {
        return callExpression.getText().startsWith(vitePluginVariableName);
    });
    if (viteTsConfigPathsPlugin && importExpression) {
        mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
            {
                type: devkit_1.ChangeType.Delete,
                start: viteTsConfigPathsPlugin.getStart(),
                length: mainJsTs[viteTsConfigPathsPlugin.getEnd()] === ','
                    ? viteTsConfigPathsPlugin.getText().length + 1
                    : viteTsConfigPathsPlugin.getText().length,
            },
            {
                type: devkit_1.ChangeType.Delete,
                start: importExpression.getStart(),
                length: importExpression.getText().length,
            },
        ]);
        tree.write(mainJsTsPath, mainJsTs);
        removePluginsArrayIfEmpty(tree, mainJsTsPath);
    }
}
exports.removeViteTsConfigPathsPlugin = removeViteTsConfigPathsPlugin;
function getViteTsConfigPathsNameAndImport(mainJsTs) {
    var _a, _b, _c, _d;
    const requireVariableStatement = tsquery_1.tsquery.query(mainJsTs, `VariableStatement:has(CallExpression:has(Identifier[name="require"]))`);
    let vitePluginVariableName;
    let importExpression;
    if (requireVariableStatement === null || requireVariableStatement === void 0 ? void 0 : requireVariableStatement.length) {
        importExpression = requireVariableStatement.find((statement) => {
            var _a, _b;
            const requireCallExpression = tsquery_1.tsquery.query(statement, 'CallExpression:has(Identifier[name="require"])');
            return (_b = (_a = requireCallExpression === null || requireCallExpression === void 0 ? void 0 : requireCallExpression[0]) === null || _a === void 0 ? void 0 : _a.getText()) === null || _b === void 0 ? void 0 : _b.includes('vite-tsconfig-paths');
        });
        if (importExpression) {
            vitePluginVariableName = (_b = (_a = tsquery_1.tsquery
                .query(importExpression, 'Identifier')) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getText();
        }
    }
    else {
        const importDeclarations = tsquery_1.tsquery.query(mainJsTs, 'ImportDeclaration');
        importExpression = importDeclarations === null || importDeclarations === void 0 ? void 0 : importDeclarations.find((statement) => {
            var _a, _b;
            const stringLiteral = tsquery_1.tsquery.query(statement, 'StringLiteral');
            return (_b = (_a = stringLiteral === null || stringLiteral === void 0 ? void 0 : stringLiteral[0]) === null || _a === void 0 ? void 0 : _a.getText()) === null || _b === void 0 ? void 0 : _b.includes('vite-tsconfig-paths');
        });
        if (importExpression) {
            vitePluginVariableName = (_d = (_c = tsquery_1.tsquery
                .query(importExpression, 'Identifier')) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.getText();
        }
    }
    return {
        vitePluginVariableName,
        importExpression,
    };
}
function removePluginsArrayIfEmpty(tree, mainJsTsPath) {
    var _a, _b, _c, _d;
    let mainJsTs = tree.read(mainJsTsPath, 'utf-8');
    const viteFinalMethodDeclaration = (_a = tsquery_1.tsquery.query(mainJsTs, `MethodDeclaration:has([name="viteFinal"])`)) === null || _a === void 0 ? void 0 : _a[0];
    if (!viteFinalMethodDeclaration) {
        return;
    }
    const pluginsPropertyAssignment = (_b = tsquery_1.tsquery.query(viteFinalMethodDeclaration, `PropertyAssignment:has(Identifier:has([name="plugins"]))`)) === null || _b === void 0 ? void 0 : _b[0];
    if (!pluginsPropertyAssignment) {
        return;
    }
    const pluginsArrayLiteralExpression = (_c = tsquery_1.tsquery.query(pluginsPropertyAssignment, `ArrayLiteralExpression`)) === null || _c === void 0 ? void 0 : _c[0];
    if (((_d = pluginsArrayLiteralExpression === null || pluginsArrayLiteralExpression === void 0 ? void 0 : pluginsArrayLiteralExpression.getText()) === null || _d === void 0 ? void 0 : _d.replace(/\s/g, '')) === '[]') {
        mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
            {
                type: devkit_1.ChangeType.Delete,
                start: pluginsPropertyAssignment.getStart(),
                length: mainJsTs[pluginsPropertyAssignment.getEnd()] === ','
                    ? pluginsPropertyAssignment.getText().length + 1
                    : pluginsPropertyAssignment.getText().length,
            },
        ]);
        tree.write(mainJsTsPath, mainJsTs);
    }
}
function addViteConfigFilePathInFrameworkOptions(tree, mainJsTsPath, viteConfigPath) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    let mainJsTs = tree.read(mainJsTsPath, 'utf-8');
    const viteFramework = (_h = (_f = (_d = (_b = (_a = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="framework"])):has(StringLiteral:has([text="@storybook/react-vite"]))`)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : (_c = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="framework"])):has(StringLiteral:has([text="@storybook/web-components-vite"]))`)) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : (_e = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="framework"])):has(StringLiteral:has([text="@storybook/svelte-vite"]))`)) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : (_g = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="framework"])):has(StringLiteral:has([text="@storybook/vue-vite"]))`)) === null || _g === void 0 ? void 0 : _g[0]) !== null && _h !== void 0 ? _h : (_j = tsquery_1.tsquery.query(mainJsTs, `PropertyAssignment:has(Identifier:has([name="framework"])):has(StringLiteral:has([text="@storybook/vue3-vite"]))`)) === null || _j === void 0 ? void 0 : _j[0];
    if (viteFramework) {
        const optionsPropertyAssignments = tsquery_1.tsquery.query(viteFramework, `PropertyAssignment:has(Identifier:has([name="options"]))`);
        const frameworkOptionsPropertyAssignment = optionsPropertyAssignments === null || optionsPropertyAssignments === void 0 ? void 0 : optionsPropertyAssignments.find((expression) => {
            return expression.getText().startsWith('options');
        });
        if (frameworkOptionsPropertyAssignment) {
            const objectLiteralExpression = (_k = tsquery_1.tsquery.query(frameworkOptionsPropertyAssignment, `ObjectLiteralExpression`)) === null || _k === void 0 ? void 0 : _k[0];
            mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                {
                    type: devkit_1.ChangeType.Insert,
                    index: objectLiteralExpression.getStart() + 1,
                    text: `
                      builder: {
                        viteConfigPath: '${viteConfigPath}',
                      },
                      `,
                },
            ]);
            tree.write(mainJsTsPath, mainJsTs);
        }
        else {
            const objectLiteralExpression = (_l = tsquery_1.tsquery.query(viteFramework, `ObjectLiteralExpression`)) === null || _l === void 0 ? void 0 : _l[0];
            if (!objectLiteralExpression) {
                return;
            }
            mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                {
                    type: devkit_1.ChangeType.Insert,
                    index: objectLiteralExpression.getStart() + 1,
                    text: ` options: {
                      builder: {
                        viteConfigPath: '${viteConfigPath}',
                      },
                    },
                      `,
                },
            ]);
            tree.write(mainJsTsPath, mainJsTs);
        }
    }
}
exports.addViteConfigFilePathInFrameworkOptions = addViteConfigFilePathInFrameworkOptions;
function normalizeViteConfigFilePathWithTree(tree, projectRoot, configFile) {
    return configFile && tree.exists(configFile)
        ? configFile
        : tree.exists((0, devkit_1.joinPathFragments)(`${projectRoot}/vite.config.ts`))
            ? (0, devkit_1.joinPathFragments)(`${projectRoot}/vite.config.ts`)
            : tree.exists((0, devkit_1.joinPathFragments)(`${projectRoot}/vite.config.js`))
                ? (0, devkit_1.joinPathFragments)(`${projectRoot}/vite.config.js`)
                : undefined;
}
exports.normalizeViteConfigFilePathWithTree = normalizeViteConfigFilePathWithTree;
function removeTypecastFromMainTs(tree, mainTsPath) {
    let mainTs = tree.read(mainTsPath, 'utf-8');
    mainTs = mainTs.replace(/as StorybookConfig/g, '');
    return {
        path: mainTsPath,
        content: mainTs,
    };
}
exports.removeTypecastFromMainTs = removeTypecastFromMainTs;
function removeUiFrameworkFromProjectJson(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:build', (options, projectName, targetName) => {
        if (projectName && (options === null || options === void 0 ? void 0 : options['uiFramework'])) {
            const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
            delete projectConfiguration.targets[targetName].options['uiFramework'];
            (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfiguration);
        }
    });
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:storybook', (options, projectName, targetName) => {
        if (projectName && (options === null || options === void 0 ? void 0 : options['uiFramework'])) {
            const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
            delete projectConfiguration.targets[targetName].options['uiFramework'];
            (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfiguration);
        }
    });
}
exports.removeUiFrameworkFromProjectJson = removeUiFrameworkFromProjectJson;
function changeCoreCommonImportToFramework(tree, mainTsPath) {
    var _a, _b, _c, _d;
    let mainTs = tree.read(mainTsPath, 'utf-8');
    const importDeclarations = (_a = tsquery_1.tsquery.query(mainTs, 'ImportDeclaration:has(ImportSpecifier:has([text="StorybookConfig"]))')) === null || _a === void 0 ? void 0 : _a[0];
    if (!importDeclarations) {
        return;
    }
    const storybookConfigImportPackage = (_b = tsquery_1.tsquery.query(importDeclarations, 'StringLiteral')) === null || _b === void 0 ? void 0 : _b[0];
    if ((storybookConfigImportPackage === null || storybookConfigImportPackage === void 0 ? void 0 : storybookConfigImportPackage.getText()) === `'@storybook/core-common'`) {
        const frameworkPropertyAssignment = (_c = tsquery_1.tsquery.query(mainTs, `PropertyAssignment:has(Identifier:has([text="framework"]))`)) === null || _c === void 0 ? void 0 : _c[0];
        if (!frameworkPropertyAssignment) {
            return;
        }
        const propertyAssignments = tsquery_1.tsquery.query(frameworkPropertyAssignment, `PropertyAssignment:has(Identifier:has([text="name"]))`);
        const namePropertyAssignment = propertyAssignments === null || propertyAssignments === void 0 ? void 0 : propertyAssignments.find((expression) => {
            return expression.getText().startsWith('name');
        });
        if (!namePropertyAssignment) {
            return;
        }
        const frameworkName = (_d = tsquery_1.tsquery.query(namePropertyAssignment, `StringLiteral`)) === null || _d === void 0 ? void 0 : _d[0];
        if (frameworkName) {
            mainTs = (0, devkit_1.applyChangesToString)(mainTs, [
                {
                    type: devkit_1.ChangeType.Delete,
                    start: storybookConfigImportPackage.getStart(),
                    length: storybookConfigImportPackage.getWidth(),
                },
                {
                    type: devkit_1.ChangeType.Insert,
                    index: storybookConfigImportPackage.getStart(),
                    text: frameworkName.getText(),
                },
            ]);
            tree.write(mainTsPath, mainTs);
        }
    }
}
exports.changeCoreCommonImportToFramework = changeCoreCommonImportToFramework;
function getAllStorybookInfo(tree) {
    const allStorybookDirs = {};
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:build', (options, projectName) => {
        var _a, _b, _c;
        if (projectName && (options === null || options === void 0 ? void 0 : options['configDir'])) {
            const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
            allStorybookDirs[projectName] = {
                configDir: options === null || options === void 0 ? void 0 : options['configDir'],
                uiFramework: options === null || options === void 0 ? void 0 : options['uiFramework'],
                viteConfigFilePath: normalizeViteConfigFilePathWithTree(tree, projectConfiguration.root, (_c = (_b = (_a = projectConfiguration.targets) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.configFile),
            };
        }
    });
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@storybook/angular:build-storybook', (options, projectName) => {
        if (projectName && (options === null || options === void 0 ? void 0 : options['configDir'])) {
            allStorybookDirs[projectName] = {
                configDir: options === null || options === void 0 ? void 0 : options['configDir'],
                uiFramework: '@storybook/angular',
            };
        }
    });
    return allStorybookDirs;
}
exports.getAllStorybookInfo = getAllStorybookInfo;
function prepareFiles(tree, allStorybookProjects) {
    devkit_1.output.log({
        title: `Preparing Storybook files.`,
        bodyLines: [
            `Nx will make some adjustments to the Storybook configuration files of your workspace`,
            `so that the Storybook automigration scripts can run successfully.`,
            `The adjustments are:`,
            ` - Remove the "as StorybookConfig" typecast from the main.ts files, if any`,
            ` - Remove the "path.resolve" calls from the Next.js Storybook configuration, if any`,
        ],
        color: 'blue',
    });
    Object.entries(allStorybookProjects).forEach(([projectName, storybookProjectInfo]) => {
        const mainJsTsPath = tree.exists(`${storybookProjectInfo.configDir}/main.js`)
            ? `${storybookProjectInfo.configDir}/main.js`
            : tree.exists(`${storybookProjectInfo.configDir}/main.ts`)
                ? `${storybookProjectInfo.configDir}/main.ts`
                : undefined;
        if (!mainJsTsPath) {
            devkit_1.output.error({
                title: `Failed to prepare Storybook files for ${projectName}.`,
                bodyLines: [
                    `Could not find main.js or main.ts in ${storybookProjectInfo.configDir}`,
                    `Skipping project ${projectName}.`,
                ],
            });
        }
        if (mainJsTsPath.endsWith('.ts')) {
            writeFile(removeTypecastFromMainTs(tree, mainJsTsPath));
        }
        writeFile(removePathResolvesFromNextConfig(tree, mainJsTsPath));
    });
    devkit_1.output.log({
        title: `Files prepared successfully!`,
        bodyLines: [`Nx prepared your files successfully.`],
        color: 'green',
    });
}
exports.prepareFiles = prepareFiles;
function handleMigrationResult(migrateResult, allStorybookProjects) {
    var _a, _b, _c, _d;
    if ((0, fileutils_1.fileExists)((0, path_1.join)(devkit_1.workspaceRoot, 'migration-storybook.log')) &&
        ((_a = Object.keys(migrateResult.successfulProjects)) === null || _a === void 0 ? void 0 : _a.length)) {
        const sbLogFile = (0, fs_1.readFileSync)((0, path_1.join)(devkit_1.workspaceRoot, 'migration-storybook.log'), 'utf-8');
        Object.keys(migrateResult.successfulProjects).forEach((projectName) => {
            if (sbLogFile.includes(`The migration failed to update your ${allStorybookProjects[projectName].configDir}`)) {
                migrateResult.failedProjects[projectName] =
                    migrateResult.successfulProjects[projectName];
                delete migrateResult.successfulProjects[projectName];
            }
        });
    }
    if (((_b = Object.keys(allStorybookProjects)) === null || _b === void 0 ? void 0 : _b.length) ===
        ((_c = Object.keys(migrateResult.successfulProjects)) === null || _c === void 0 ? void 0 : _c.length) ||
        ((_d = Object.keys(migrateResult.failedProjects)) === null || _d === void 0 ? void 0 : _d.length) === 0) {
        devkit_1.output.log({
            title: `Storybook configuration migrated.`,
            bodyLines: [
                `☑️ The automigrate command was successful.`,
                `All your projects were migrated successfully.`,
            ],
            color: 'green',
        });
    }
    else {
        if (Object.keys(migrateResult.failedProjects).length) {
            if (Object.keys(migrateResult.failedProjects).length) {
                devkit_1.output.log({
                    title: `Storybook configuration migrated.`,
                    bodyLines: [
                        `☑️ The automigrate command was successful.`,
                        `The following projects were migrated successfully:`,
                        ...Object.keys(migrateResult.successfulProjects).map((project) => `  - ${project}`),
                    ],
                    color: 'green',
                });
            }
            devkit_1.output.log({
                title: `Failed migrations.`,
                bodyLines: [
                    `There were some projects that were not migrated successfully.`,
                    `⚠️ The following projects were not migrated successfully:`,
                    ...Object.keys(migrateResult.failedProjects).map((project) => `  - ${project}`),
                    `You can run the following commands to migrate them manually:`,
                    ...Object.entries(migrateResult.failedProjects).map(([_project, command]) => `- ${command}`),
                ],
                color: 'red',
            });
        }
    }
    return migrateResult;
}
exports.handleMigrationResult = handleMigrationResult;
function checkStorybookInstalled(packageJson) {
    return ((packageJson.dependencies['@storybook/core-server'] ||
        packageJson.devDependencies['@storybook/core-server']) &&
        (packageJson.dependencies['@nrwl/storybook'] ||
            packageJson.devDependencies['@nrwl/storybook']));
}
exports.checkStorybookInstalled = checkStorybookInstalled;
function checkWebComponentsInstalled(packageJson) {
    return (packageJson.dependencies['@storybook/web-components'] ||
        packageJson.devDependencies['@storybook/web-components-vite'] ||
        packageJson.dependencies['@storybook/web-components-vite'] ||
        packageJson.devDependencies['@storybook/web-components-webpack5'] ||
        packageJson.dependencies['@storybook/web-components-webpack5']);
}
exports.checkWebComponentsInstalled = checkWebComponentsInstalled;
function afterMigration(tree, allStorybookProjects) {
    Object.entries(allStorybookProjects).forEach(([_projectName, storybookProjectInfo]) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const mainJsTsPath = tree.exists(`${storybookProjectInfo.configDir}/main.js`)
            ? `${storybookProjectInfo.configDir}/main.js`
            : tree.exists(`${storybookProjectInfo.configDir}/main.ts`)
                ? `${storybookProjectInfo.configDir}/main.ts`
                : undefined;
        removeViteTsConfigPathsPlugin(tree, mainJsTsPath);
        if (storybookProjectInfo.viteConfigFilePath) {
            addViteConfigFilePathInFrameworkOptions(tree, mainJsTsPath, storybookProjectInfo.viteConfigFilePath);
        }
        changeCoreCommonImportToFramework(tree, mainJsTsPath);
    }));
}
exports.afterMigration = afterMigration;
function logResult(tree, migrationSummary) {
    var _a, _b, _c, _d;
    devkit_1.output.log({
        title: `Migration complete!`,
        bodyLines: [
            `🎉 Your Storybook configuration has been migrated to Storybook 7.0.0!`,
            `📖 You can see a summary of the tasks that were performed in the storybook-migration-summary.md file in the root of your workspace.`,
        ],
        color: 'green',
    });
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), '.', {
        tmpl: '',
        successfulProjects: (_a = Object.entries(migrationSummary === null || migrationSummary === void 0 ? void 0 : migrationSummary.successfulProjects)) === null || _a === void 0 ? void 0 : _a.map(([_projectName, command]) => command),
        failedProjects: (_b = Object.entries(migrationSummary === null || migrationSummary === void 0 ? void 0 : migrationSummary.failedProjects)) === null || _b === void 0 ? void 0 : _b.map(([_projectName, command]) => command),
        hasFailedProjects: ((_c = Object.keys(migrationSummary === null || migrationSummary === void 0 ? void 0 : migrationSummary.failedProjects)) === null || _c === void 0 ? void 0 : _c.length) > 0,
        hasSuccessfulProjects: ((_d = Object.keys(migrationSummary === null || migrationSummary === void 0 ? void 0 : migrationSummary.successfulProjects)) === null || _d === void 0 ? void 0 : _d.length) > 0,
    });
}
exports.logResult = logResult;
//# sourceMappingURL=helper-functions.js.map