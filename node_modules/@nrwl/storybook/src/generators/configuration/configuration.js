"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationSchematic = exports.configurationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const cypress_project_1 = require("../cypress-project/cypress-project");
const init_1 = require("../init/init");
const util_functions_1 = require("./lib/util-functions");
const linter_1 = require("@nrwl/linter");
const utilities_1 = require("../../utils/utilities");
const versions_1 = require("../../utils/versions");
const user_prompts_1 = require("./lib/user-prompts");
function configurationGenerator(tree, rawSchema) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (process.env.NX_INTERACTIVE === 'true') {
            rawSchema = yield (0, user_prompts_1.getGeneratorConfigurationOptions)(rawSchema);
        }
        const schema = normalizeSchema(rawSchema);
        const tasks = [];
        const { projectType, targets, root } = (0, devkit_1.readProjectConfiguration)(tree, schema.name);
        const { nextBuildTarget, compiler, viteBuildTarget } = (0, utilities_1.findStorybookAndBuildTargetsAndCompiler)(targets);
        /**
         * Make sure someone is not trying to configure Storybook
         * with the wrong version.
         */
        let storybook7;
        try {
            storybook7 = (0, utilities_1.isStorybookV7)();
        }
        catch (e) {
            storybook7 = schema.storybook7Configuration;
        }
        if (storybook7 && !schema.storybook7Configuration) {
            schema.storybook7Configuration = true;
            devkit_1.logger.info(`You are using Storybook version 7. 
       So Nx will configure Storybook for version 7.`);
        }
        let viteConfigFilePath;
        if (viteBuildTarget) {
            if (schema.bundler !== 'vite') {
                if (!schema.storybook7Configuration) {
                    // The warnings for v7 are handled in the next if statement
                    devkit_1.logger.info(`Your project ${schema.name} uses Vite as a bundler. 
          Nx will configure Storybook for this project to use Vite as well.`);
                }
                // We need this regardless of Storybook version
                // because we use it in the init task
                schema.bundler = 'vite';
            }
            viteConfigFilePath = (0, util_functions_1.getViteConfigFilePath)(tree, root, (_b = (_a = targets[viteBuildTarget]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.configFile);
        }
        if (schema.storybook7Configuration) {
            if (viteBuildTarget) {
                if (schema.storybook7UiFramework === '@storybook/react-webpack5') {
                    devkit_1.logger.info(`Your project ${schema.name} uses Vite as a bundler. 
        Nx will configure Storybook for this project to use Vite as well.`);
                    schema.storybook7UiFramework = '@storybook/react-vite';
                }
                if (schema.storybook7UiFramework === '@storybook/web-components-webpack5') {
                    devkit_1.logger.info(`Your project ${schema.name} uses Vite as a bundler. 
        Nx will configure Storybook for this project to use Vite as well.`);
                    schema.storybook7UiFramework = '@storybook/web-components-vite';
                }
            }
            if (nextBuildTarget) {
                schema.storybook7UiFramework = '@storybook/nextjs';
            }
            if (!schema.storybook7UiFramework) {
                if (schema.uiFramework === '@storybook/react') {
                    schema.storybook7UiFramework = viteBuildTarget
                        ? '@storybook/react-vite'
                        : '@storybook/react-webpack5';
                }
                else if (schema.uiFramework === '@storybook/web-components') {
                    schema.storybook7UiFramework = viteBuildTarget
                        ? '@storybook/web-components-vite'
                        : '@storybook/web-components-webpack5';
                }
                else if (schema.uiFramework === '@storybook/angular') {
                    schema.storybook7UiFramework = '@storybook/angular';
                }
                else if (schema.uiFramework !== '@storybook/react-native') {
                    schema.storybook7UiFramework = `${schema.uiFramework}-webpack5`;
                }
            }
        }
        // If we're on Storybook 7, ignore schema.uiFramework
        const uiFrameworkUsed = schema.storybook7Configuration
            ? schema.storybook7UiFramework
            : schema.uiFramework;
        const initTask = yield (0, init_1.initGenerator)(tree, {
            uiFramework: uiFrameworkUsed,
            js: schema.js,
            bundler: schema.bundler,
            storybook7Configuration: schema.storybook7Configuration,
        });
        tasks.push(initTask);
        (0, util_functions_1.createProjectStorybookDir)(tree, schema.name, uiFrameworkUsed, schema.js, schema.tsConfiguration, root, projectType, (0, util_functions_1.projectIsRootProjectInStandaloneWorkspace)(root), !!nextBuildTarget, compiler === 'swc', schema.bundler === 'vite', schema.storybook7Configuration, viteConfigFilePath);
        (0, util_functions_1.configureTsProjectConfig)(tree, schema);
        (0, util_functions_1.configureTsSolutionConfig)(tree, schema);
        (0, util_functions_1.updateLintConfig)(tree, schema);
        (0, util_functions_1.addBuildStorybookToCacheableOperations)(tree);
        (0, util_functions_1.addStorybookToNamedInputs)(tree);
        if (uiFrameworkUsed === '@storybook/angular') {
            (0, util_functions_1.addAngularStorybookTask)(tree, schema.name, schema.configureTestRunner);
        }
        else {
            (0, util_functions_1.addStorybookTask)(tree, schema.name, uiFrameworkUsed, schema.configureTestRunner, schema.storybook7Configuration);
        }
        if (schema.configureStaticServe) {
            (0, util_functions_1.addStaticTarget)(tree, schema);
        }
        if (schema.configureCypress) {
            const e2eProject = yield (0, util_functions_1.getE2EProjectName)(tree, schema.name);
            if (!e2eProject) {
                const cypressTask = yield (0, cypress_project_1.cypressProjectGenerator)(tree, {
                    name: schema.name,
                    js: schema.js,
                    linter: schema.linter,
                    directory: schema.cypressDirectory,
                    standaloneConfig: schema.standaloneConfig,
                    ciTargetName: schema.configureStaticServe
                        ? 'static-storybook'
                        : undefined,
                    skipFormat: true,
                });
                tasks.push(cypressTask);
            }
            else {
                devkit_1.logger.warn(`There is already an e2e project setup for ${schema.name}, called ${e2eProject}.`);
            }
        }
        const devDeps = {};
        if (schema.tsConfiguration) {
            devDeps['@storybook/core-common'] = versions_1.storybookVersion;
            devDeps['ts-node'] = versions_1.tsNodeVersion;
        }
        if (nextBuildTarget &&
            projectType === 'application' &&
            !schema.storybook7Configuration) {
            devDeps['storybook-addon-next'] = versions_1.storybookNextAddonVersion;
            devDeps['storybook-addon-swc'] = versions_1.storybookSwcAddonVersion;
        }
        else if (compiler === 'swc') {
            devDeps['storybook-addon-swc'] = versions_1.storybookSwcAddonVersion;
        }
        if (schema.configureTestRunner === true) {
            devDeps['@storybook/test-runner'] = versions_1.storybookTestRunnerVersion;
        }
        if (schema.configureStaticServe) {
            devDeps['@nrwl/web'] = versions_1.nxVersion;
        }
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDeps));
        if (!schema.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.configurationGenerator = configurationGenerator;
function normalizeSchema(schema) {
    const defaults = {
        configureCypress: true,
        linter: linter_1.Linter.EsLint,
        js: false,
    };
    return Object.assign(Object.assign({}, defaults), schema);
}
exports.default = configurationGenerator;
exports.configurationSchematic = (0, devkit_1.convertNxGenerator)(configurationGenerator);
//# sourceMappingURL=configuration.js.map