"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initSchematic = exports.initGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const js_1 = require("@nrwl/js");
const versions_1 = require("../../utils/versions");
function checkDependenciesInstalled(host, schema) {
    const packageJson = (0, devkit_1.readJson)(host, 'package.json');
    const devDependencies = {};
    const dependencies = {};
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencices = packageJson.devDependencices || {};
    // base deps
    devDependencies['@nrwl/storybook'] = versions_1.nxVersion;
    if (schema.storybook7Configuration) {
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/react-native'] = versions_1.storybookReactNativeVersion;
        }
        else {
            devDependencies[schema.uiFramework] = versions_1.storybook7Version;
        }
        devDependencies['@storybook/core-server'] = versions_1.storybook7Version;
        devDependencies['@storybook/addon-essentials'] = versions_1.storybook7Version;
        if (schema.uiFramework === '@storybook/angular') {
            if (!packageJson.dependencies['@angular/forms'] &&
                !packageJson.devDependencies['@angular/forms']) {
                devDependencies['@angular/forms'] = '*';
            }
        }
        if (schema.uiFramework === '@storybook/web-components-vite' ||
            schema.uiFramework === '@storybook/web-components-webpack5') {
            devDependencies['lit'] = versions_1.litVersion;
        }
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/addon-ondevice-actions'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-backgrounds'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-controls'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-notes'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['react-native-storybook-loader'] =
                versions_1.reactNativeStorybookLoader;
        }
    }
    else {
        // TODO(katerina): Remove when Storybook v7
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/react-native'] = versions_1.storybookReactNativeVersion;
        }
        else if (schema.uiFramework !== undefined) {
            devDependencies[schema.uiFramework] = versions_1.storybookVersion;
        }
        devDependencies['@storybook/core-server'] = versions_1.storybookVersion;
        devDependencies['@storybook/addon-essentials'] = versions_1.storybookVersion;
        if (schema.bundler === 'vite') {
            devDependencies['@storybook/builder-vite'] = versions_1.viteBuilderVersion;
        }
        else {
            devDependencies['@storybook/builder-webpack5'] = versions_1.storybookVersion;
            devDependencies['@storybook/manager-webpack5'] = versions_1.storybookVersion;
        }
        devDependencies['html-webpack-plugin'] = versions_1.htmlWebpackPluginVersion;
        if (schema.uiFramework === '@storybook/angular') {
            devDependencies['webpack'] = versions_1.webpack5Version;
            if (!packageJson.dependencies['@angular/forms'] &&
                !packageJson.devDependencies['@angular/forms']) {
                devDependencies['@angular/forms'] = '*';
            }
        }
        if (schema.uiFramework === '@storybook/react') {
            devDependencies['@svgr/webpack'] = versions_1.svgrVersion;
            devDependencies['url-loader'] = versions_1.urlLoaderVersion;
            devDependencies['babel-loader'] = versions_1.babelLoaderVersion;
            devDependencies['@babel/core'] = versions_1.babelCoreVersion;
            devDependencies['@babel/preset-typescript'] =
                versions_1.babelPresetTypescriptVersion;
            if (schema.bundler === 'webpack') {
                devDependencies['@nrwl/webpack'] = versions_1.nxVersion;
            }
        }
        if (schema.uiFramework === '@storybook/web-components') {
            devDependencies['lit-html'] = versions_1.litHtmlVersion;
        }
        if (schema.uiFramework === '@storybook/react-native') {
            devDependencies['@storybook/addon-ondevice-actions'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-backgrounds'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-controls'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['@storybook/addon-ondevice-notes'] =
                versions_1.storybookReactNativeVersion;
            devDependencies['react-native-storybook-loader'] =
                versions_1.reactNativeStorybookLoader;
        }
    }
    return (0, devkit_1.addDependenciesToPackageJson)(host, dependencies, devDependencies);
}
function addCacheableOperation(tree) {
    var _a;
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!nxJson.tasksRunnerOptions ||
        !nxJson.tasksRunnerOptions.default ||
        (nxJson.tasksRunnerOptions.default.runner !==
            '@nrwl/workspace/tasks-runners/default' &&
            nxJson.tasksRunnerOptions.default.runner !== 'nx/tasks-runners/default')) {
        return;
    }
    nxJson.tasksRunnerOptions.default.options =
        nxJson.tasksRunnerOptions.default.options || {};
    nxJson.tasksRunnerOptions.default.options.cacheableOperations =
        nxJson.tasksRunnerOptions.default.options.cacheableOperations || [];
    if (!((_a = nxJson.tasksRunnerOptions.default.options.cacheableOperations) === null || _a === void 0 ? void 0 : _a.includes('build-storybook'))) {
        nxJson.tasksRunnerOptions.default.options.cacheableOperations.push('build-storybook');
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function moveToDevDependencies(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (packageJson) => {
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nrwl/storybook']) {
            packageJson.devDependencies['@nrwl/storybook'] =
                packageJson.dependencies['@nrwl/storybook'];
            delete packageJson.dependencies['@nrwl/storybook'];
        }
        return packageJson;
    });
}
/**
 * This is a temporary fix for Storybook to support TypeScript configuration files.
 * The issue is that if there is a root tsconfig.json file, Storybook will use it, and
 * ignore the tsconfig.json file in the .storybook folder. This results in module being set
 * to esnext, and Storybook does not recognise the main.ts code as a module.
 */
function editRootTsConfig(tree) {
    if (tree.exists('tsconfig.json')) {
        (0, devkit_1.updateJson)(tree, 'tsconfig.json', (json) => {
            var _a;
            if (json['ts-node']) {
                json['ts-node'] = Object.assign(Object.assign({}, json['ts-node']), { compilerOptions: Object.assign(Object.assign({}, ((_a = json['ts-node'].compilerOptions) !== null && _a !== void 0 ? _a : {})), { module: 'commonjs' }) });
            }
            else {
                json['ts-node'] = {
                    compilerOptions: {
                        module: 'commonjs',
                    },
                };
            }
            return json;
        });
    }
}
function initGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        tasks.push(yield (0, js_1.initGenerator)(tree, Object.assign(Object.assign({}, schema), { skipFormat: true })));
        tasks.push(checkDependenciesInstalled(tree, schema));
        moveToDevDependencies(tree);
        editRootTsConfig(tree);
        addCacheableOperation(tree);
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
exports.initSchematic = (0, devkit_1.convertNxGenerator)(initGenerator);
//# sourceMappingURL=init.js.map