"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeStorybookTargetsSchematic = exports.changeStorybookTargetsGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const utilities_1 = require("../../utils/utilities");
function changeStorybookTargetsGenerator(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let changesMade = false;
        let changesMadeToAtLeastOne = false;
        const projects = (0, devkit_1.getProjects)(tree);
        [...projects.entries()].forEach(([projectName, projectConfiguration]) => {
            var _a, _b, _c;
            changesMade = false;
            const { storybookBuildTarget, storybookTarget, ngBuildTarget } = (0, utilities_1.findStorybookAndBuildTargetsAndCompiler)(projectConfiguration.targets);
            if (projectName &&
                storybookTarget &&
                ((_c = (_b = (_a = projectConfiguration === null || projectConfiguration === void 0 ? void 0 : projectConfiguration.targets) === null || _a === void 0 ? void 0 : _a[storybookTarget]) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.uiFramework) ===
                    '@storybook/angular') {
                projectConfiguration.targets[storybookTarget] = updateStorybookTarget(projectConfiguration, storybookTarget, projectName, ngBuildTarget, storybookBuildTarget);
                changesMade = true;
                changesMadeToAtLeastOne = true;
                if (storybookBuildTarget) {
                    projectConfiguration.targets[storybookBuildTarget] =
                        updateStorybookBuildTarget(projectConfiguration, projectName, ngBuildTarget, storybookBuildTarget);
                }
                else {
                    devkit_1.logger.info(`Project ${projectName} does not have a build target configured for Storybook.`);
                }
            }
            else {
                devkit_1.logger.warn(`Could not find a Storybook target for ${projectName}.`);
            }
            if (changesMade) {
                (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfiguration);
            }
        });
        if (changesMadeToAtLeastOne) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.changeStorybookTargetsGenerator = changeStorybookTargetsGenerator;
function updateStorybookTarget(projectConfiguration, storybookTarget, projectName, buildTarget, storybookBuildTarget) {
    var _a;
    const oldStorybookTargetConfig = projectConfiguration.targets[storybookTarget];
    const newStorybookTargetConfig = {
        executor: '@storybook/angular:start-storybook',
        options: {
            port: oldStorybookTargetConfig.options.port,
            configDir: (_a = oldStorybookTargetConfig.options.config) === null || _a === void 0 ? void 0 : _a.configFolder,
            browserTarget: undefined,
            compodoc: false,
        },
        configurations: oldStorybookTargetConfig.configurations,
    };
    const { project, target } = parseTargetStringCustom(oldStorybookTargetConfig.options.projectBuildConfig);
    if (project && target) {
        newStorybookTargetConfig.options.browserTarget =
            oldStorybookTargetConfig.options.projectBuildConfig;
    }
    else {
        newStorybookTargetConfig.options.browserTarget = `${projectName}:${buildTarget ? buildTarget : storybookBuildTarget}`;
    }
    const _b = oldStorybookTargetConfig.options, { uiFramework, outputPath, config, projectBuildConfig } = _b, optionsToCopy = tslib_1.__rest(_b, ["uiFramework", "outputPath", "config", "projectBuildConfig"]);
    newStorybookTargetConfig.options = Object.assign(Object.assign({}, optionsToCopy), newStorybookTargetConfig.options);
    return newStorybookTargetConfig;
}
function updateStorybookBuildTarget(projectConfiguration, projectName, buildTarget, storybookBuildTarget) {
    var _a;
    const oldStorybookBuildTargetConfig = projectConfiguration.targets[storybookBuildTarget];
    const newStorybookBuildTargetConfig = {
        executor: '@storybook/angular:build-storybook',
        outputs: oldStorybookBuildTargetConfig.outputs,
        options: {
            outputDir: oldStorybookBuildTargetConfig.options.outputPath,
            configDir: (_a = oldStorybookBuildTargetConfig.options.config) === null || _a === void 0 ? void 0 : _a.configFolder,
            browserTarget: undefined,
            compodoc: false,
        },
        configurations: oldStorybookBuildTargetConfig.configurations,
    };
    const { project, target } = parseTargetStringCustom(oldStorybookBuildTargetConfig.options.projectBuildConfig);
    if (project && target) {
        newStorybookBuildTargetConfig.options.browserTarget =
            oldStorybookBuildTargetConfig.options.projectBuildConfig;
    }
    else {
        newStorybookBuildTargetConfig.options.browserTarget = `${projectName}:${buildTarget ? buildTarget : storybookBuildTarget}`;
    }
    const _b = oldStorybookBuildTargetConfig.options, { uiFramework, outputPath, config, projectBuildConfig } = _b, optionsToCopy = tslib_1.__rest(_b, ["uiFramework", "outputPath", "config", "projectBuildConfig"]);
    newStorybookBuildTargetConfig.options = Object.assign(Object.assign({}, optionsToCopy), newStorybookBuildTargetConfig.options);
    return newStorybookBuildTargetConfig;
}
function parseTargetStringCustom(targetString) {
    const [project, target, configuration] = targetString.split(':');
    return {
        project,
        target,
        configuration,
    };
}
exports.default = changeStorybookTargetsGenerator;
exports.changeStorybookTargetsSchematic = (0, devkit_1.convertNxGenerator)(changeStorybookTargetsGenerator);
//# sourceMappingURL=change-storybook-targets-generator.js.map