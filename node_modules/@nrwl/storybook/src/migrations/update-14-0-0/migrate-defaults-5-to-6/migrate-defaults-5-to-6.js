"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveDirectory = exports.migrateStorybookInstance = exports.migrateAllStorybookInstances = exports.migrateDefaultsGenerator = void 0;
const devkit_1 = require("@nrwl/devkit");
const semver_1 = require("semver");
const semver_2 = require("@nrwl/devkit/src/utils/semver");
const versions_1 = require("../../../utils/versions");
const util_functions_1 = require("../../../generators/configuration/lib/util-functions");
const utilities_1 = require("../../../utils/utilities");
function migrateDefaultsGenerator(tree) {
    migrateAllStorybookInstances(tree);
    return upgradeStorybookPackagesInPackageJson(tree);
}
exports.migrateDefaultsGenerator = migrateDefaultsGenerator;
function migrateAllStorybookInstances(tree) {
    devkit_1.logger.debug('adding .storybook folder to project');
    const projects = (0, devkit_1.getProjects)(tree);
    const projectsThatHaveStorybookConfiguration = [...projects.entries()]
        .filter(([_, projectConfig]) => {
        var _a, _b, _c;
        return ((_a = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.targets) === null || _a === void 0 ? void 0 : _a.storybook) &&
            ((_c = (_b = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.targets) === null || _b === void 0 ? void 0 : _b.storybook) === null || _c === void 0 ? void 0 : _c.executor) !==
                '@nrwl/react-native:storybook';
    })
        .map(([projectName, projectConfig]) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return {
            name: projectName,
            uiFramework: (_c = (_b = (_a = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.targets) === null || _a === void 0 ? void 0 : _a.storybook) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.uiFramework,
            configFolder: (_h = (_g = (_f = (_e = (_d = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.targets) === null || _d === void 0 ? void 0 : _d.storybook) === null || _e === void 0 ? void 0 : _e.options) === null || _f === void 0 ? void 0 : _f.config) === null || _g === void 0 ? void 0 : _g.configFolder) !== null && _h !== void 0 ? _h : '',
        };
    });
    for (const projectWithStorybook of projectsThatHaveStorybookConfiguration) {
        migrateStorybookInstance(tree, projectWithStorybook.name, projectWithStorybook.uiFramework, projectWithStorybook.configFolder);
    }
}
exports.migrateAllStorybookInstances = migrateAllStorybookInstances;
function migrateStorybookInstance(tree, projectName, uiFramework, configFolder) {
    migrateProjectLevelStorybookInstance(tree, projectName, uiFramework, configFolder);
}
exports.migrateStorybookInstance = migrateStorybookInstance;
function maybeUpdateVersion(tree) {
    let needsInstall = false;
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        const ignoredStorybookPackages = [
            '@storybook/builder-vite',
            '@storybook/jest',
            '@storybook/react-native',
            '@storybook/storybook-deployer',
            '@storybook/test-runner',
            '@storybook/testing-library',
            '@storybook/testing-angular',
            '@storybook/testing-react',
            '@storybook/testing-vue',
            '@storybook/testing-vue3',
            '@storybook/addon-notes',
            '@storybook/addon-postcss',
        ];
        json.dependencies = json.dependencies || {};
        json.devDependencies = json.devDependencies || {};
        const allStorybookPackagesInDependencies = Object.keys(json.dependencies).filter((packageName) => packageName.startsWith('@storybook/') &&
            !ignoredStorybookPackages.includes(packageName));
        const allStorybookPackagesInDevDependencies = Object.keys(json.devDependencies).filter((packageName) => packageName.startsWith('@storybook/') &&
            !ignoredStorybookPackages.includes(packageName));
        const storybookPackages = [
            ...allStorybookPackagesInDependencies,
            ...allStorybookPackagesInDevDependencies,
        ];
        storybookPackages.forEach((storybookPackageName) => {
            if (json.dependencies[storybookPackageName]) {
                const version = (0, semver_2.checkAndCleanWithSemver)(storybookPackageName, json.dependencies[storybookPackageName]);
                if ((0, semver_1.lte)(version, '6.0.0')) {
                    json.dependencies[storybookPackageName] = versions_1.storybookVersion;
                    needsInstall = true;
                }
            }
            if (json.devDependencies[storybookPackageName]) {
                const version = (0, semver_2.checkAndCleanWithSemver)(storybookPackageName, json.devDependencies[storybookPackageName]);
                if ((0, semver_1.lte)(version, '6.0.0')) {
                    json.devDependencies[storybookPackageName] = versions_1.storybookVersion;
                    needsInstall = true;
                }
            }
        });
        return json;
    });
    if (needsInstall) {
        return () => (0, devkit_1.installPackagesTask)(tree);
    }
}
function upgradeStorybookPackagesInPackageJson(tree) {
    /**
     * Should upgrade all @storybook/* packages in package.json
     */
    return maybeUpdateVersion(tree);
}
function moveOldFiles(tree, configFolderDir) {
    moveDirectory(tree, configFolderDir, configFolderDir.replace('.storybook', '.old_storybook'));
}
function migrateProjectLevelStorybookInstance(tree, projectName, uiFramework, configFolder) {
    const old_folder_exists_already = tree.exists(configFolder === null || configFolder === void 0 ? void 0 : configFolder.replace('.storybook', '.old_storybook'));
    const new_config_exists_already = tree.exists(`${configFolder}/main.js`);
    if (old_folder_exists_already || new_config_exists_already) {
        return;
    }
    moveOldFiles(tree, configFolder);
    if (tree.exists(configFolder)) {
        return;
    }
    const { projectType, targets, root } = (0, devkit_1.readProjectConfiguration)(tree, projectName);
    const { nextBuildTarget, compiler } = (0, utilities_1.findStorybookAndBuildTargetsAndCompiler)(targets);
    (0, util_functions_1.createProjectStorybookDir)(tree, projectName, uiFramework, false, false, root, projectType, false, !!nextBuildTarget, compiler === 'swc');
}
function moveDirectory(tree, from, to) {
    (0, devkit_1.visitNotIgnoredFiles)(tree, from, (file) => {
        tree.rename(file, file.replace(from, to));
    });
}
exports.moveDirectory = moveDirectory;
//# sourceMappingURL=migrate-defaults-5-to-6.js.map