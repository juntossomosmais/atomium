"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootMainVariableName = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const executor_options_utils_1 = require("@nrwl/devkit/src/generators/executor-options-utils");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const remove_root_config_1 = require("./remove-root-config");
/**
 * The purpose of this migrator is to help users move away
 * from the root .storybook/ configuration folder and files.
 *
 * Since we cannot be sure of how users make use of the root Storybook
 * directory, what we are going to do is the following:
 *
 * 1. Make sure that all project-level .storybook/main.js files contain
 * the @storybook/addon-essentials addon.
 * 2. If the root .storybook/main.js file contains the @storybook/addon-essentials remove it
 * from the root
 * 3. If there are things beyond the addons array in the root .storybook/main.js file,
 * then keep it as it is - inform user that they need to manually need to copy over any extra stuff
 * 4. If the root .storybook/main.js file is now empty, inform user that they can delete it safely
 *
 * Point the user to a guide that explains how to all these things.
 */
function default_1(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectsThatFailedTOAddAddonEssentials = addAddonEssentialsToAllStorybooks(tree);
        if (projectsThatFailedTOAddAddonEssentials.length) {
            devkit_1.logger.info(`
          We could not add the @storybook/addon-essentials addon
          to the following projects' Storybook configurations:
    
          ${projectsThatFailedTOAddAddonEssentials.join(', ')}
    
          Please add it manually in the addons array of your project's
          .storybook/main.js|ts file.
          `);
        }
        const rootMainJsTsPath = tree.exists('.storybook/main.js')
            ? '.storybook/main.js'
            : tree.exists('.storybook/main.ts')
                ? '.storybook/main.ts'
                : undefined;
        if (rootMainJsTsPath) {
            const addonArrayOrEssentialsRemoved = removeAddonEssentialsFromRootStorybook(tree, rootMainJsTsPath);
            const storiesArrayRemoved = removeStoriesArrayFromRootIfEmpty(tree, rootMainJsTsPath);
            const removedRoot = (0, remove_root_config_1.removeRootConfig)(tree, rootMainJsTsPath);
            if (removedRoot) {
                // Logs are already printed in the removeRootConfig function
            }
            else {
                devkit_1.logger.info(`
      We removed the ${addonArrayOrEssentialsRemoved === 'addons'
                    ? 'addons array '
                    : '@storybook/addon-essentials addon '} 
      ${storiesArrayRemoved ? 'and the stories array ' : ''}
      from the root .storybook/main.js|ts file.
      `);
            }
        }
        devkit_1.logger.info(`
    Read more about our effort to deprecate the root .storybook folder here:
    https://nx.dev/packages/storybook/documents/configuring-storybook
    `);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
function removeAddonEssentialsFromRootStorybook(tree, rootMainJsTsPath) {
    var _a, _b, _c, _d;
    let rootMainJsTs = tree.read(rootMainJsTsPath, 'utf-8');
    const addonEssentials = (_a = tsquery_1.tsquery.query(rootMainJsTs, 'StringLiteral:has([text="@storybook/addon-essentials"])')) === null || _a === void 0 ? void 0 : _a[0];
    if ((_b = addonEssentials === null || addonEssentials === void 0 ? void 0 : addonEssentials.getText()) === null || _b === void 0 ? void 0 : _b.length) {
        const fullAddonsNode = (_c = tsquery_1.tsquery.query(rootMainJsTs, 'PropertyAssignment:has([name="addons"])')) === null || _c === void 0 ? void 0 : _c[0];
        const stringLiterals = tsquery_1.tsquery.query(fullAddonsNode, 'StringLiteral');
        if ((stringLiterals === null || stringLiterals === void 0 ? void 0 : stringLiterals.length) === 1 &&
            ((_d = stringLiterals === null || stringLiterals === void 0 ? void 0 : stringLiterals[0]) === null || _d === void 0 ? void 0 : _d.getText()) === `'@storybook/addon-essentials'`) {
            rootMainJsTs = (0, devkit_1.applyChangesToString)(rootMainJsTs, [
                {
                    type: devkit_1.ChangeType.Delete,
                    start: fullAddonsNode.getStart(),
                    length: rootMainJsTs[fullAddonsNode.getEnd()] === ','
                        ? fullAddonsNode.getText().length + 1
                        : fullAddonsNode.getText().length,
                },
            ]);
            tree.write(rootMainJsTsPath, rootMainJsTs);
            return 'addons';
        }
        else {
            rootMainJsTs = (0, devkit_1.applyChangesToString)(rootMainJsTs, [
                {
                    type: devkit_1.ChangeType.Delete,
                    start: addonEssentials.getStart(),
                    length: rootMainJsTs[addonEssentials.getEnd()] === ','
                        ? addonEssentials.getText().length + 1
                        : addonEssentials.getText().length,
                },
            ]);
            tree.write(rootMainJsTsPath, rootMainJsTs);
            return 'esssentials';
        }
    }
}
function addAddonEssentialsToAllStorybooks(tree) {
    const projectsThatFailedTOAddAddonEssentials = [];
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:build', (options, projectName) => {
        const failedToAddAddon = addAddon(tree, options, projectName);
        if (failedToAddAddon) {
            projectsThatFailedTOAddAddonEssentials.push(failedToAddAddon);
        }
    });
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@storybook/angular:build-storybook', (options, projectName) => {
        const failedToAddAddon = addAddon(tree, options, projectName);
        if (failedToAddAddon) {
            projectsThatFailedTOAddAddonEssentials.push(failedToAddAddon);
        }
    });
    return Array.from(new Set(projectsThatFailedTOAddAddonEssentials));
}
function addAddon(tree, options, projectName) {
    const storybookDir = options === null || options === void 0 ? void 0 : options['configDir'];
    if (storybookDir) {
        const mainJsTsPath = tree.exists(`${storybookDir}/main.js`)
            ? `${storybookDir}/main.js`
            : tree.exists(`${storybookDir}/main.ts`)
                ? `${storybookDir}/main.ts`
                : undefined;
        let addedAddons = mainJsTsPath
            ? transformMainJsTs(tree, mainJsTsPath)
            : false;
        if ((storybookDir && !mainJsTsPath) || !addedAddons) {
            return projectName;
        }
    }
}
function transformMainJsTs(tree, mainJsTsPath) {
    var _a, _b, _c, _d, _e, _f, _g;
    let mainJsTs = tree.read(mainJsTsPath, 'utf-8');
    const addonsArray = (_a = tsquery_1.tsquery.query(mainJsTs, 'ArrayLiteralExpression:has(Identifier[name="addons"])')) === null || _a === void 0 ? void 0 : _a[0];
    if ((_b = addonsArray === null || addonsArray === void 0 ? void 0 : addonsArray.getText()) === null || _b === void 0 ? void 0 : _b.length) {
        // If addons array does not contain @storybook/addon-essentials, add it
        if (!addonsArray.getText().includes('@storybook/addon-essentials')) {
            mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                {
                    type: devkit_1.ChangeType.Insert,
                    index: addonsArray.getStart() + 1,
                    text: `'@storybook/addon-essentials', `,
                },
            ]);
            tree.write(mainJsTsPath, mainJsTs);
            return true;
        }
        return false;
    }
    else {
        // We will add the addons array after the stories array
        // If I have a stories array, that's where my addons need to go
        // And there's no config without stories
        const storiesArray = (_c = tsquery_1.tsquery.query(mainJsTs, 'ArrayLiteralExpression:has(Identifier[name="stories"])')) === null || _c === void 0 ? void 0 : _c[0];
        if ((_d = storiesArray === null || storiesArray === void 0 ? void 0 : storiesArray.getText()) === null || _d === void 0 ? void 0 : _d.length) {
            mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                {
                    type: devkit_1.ChangeType.Insert,
                    index: storiesArray.getEnd(),
                    text: `, addons: ['@storybook/addon-essentials']`,
                },
            ]);
            tree.write(mainJsTsPath, mainJsTs);
            return true;
        }
        else {
            /**
             * main.js has potentially a different structure
             * sort of like this:
             * rootMain.addons.push(' ...)
             * rootMain.stories.push(' ...)
             * Like in older versions of Nx
             */
            const { rootMainVariableName, importExpression } = getRootMainVariableName(mainJsTs);
            // If there is a PropertyAccessExpression with the text rootMain.addons
            // then check if it has addon-essentials, if not add it
            const addonsPropertyAccessExpression = (_e = tsquery_1.tsquery.query(mainJsTs, `PropertyAccessExpression:has([expression.name="${rootMainVariableName}"]):has([name="addons"])`)) === null || _e === void 0 ? void 0 : _e[0];
            if (rootMainVariableName && importExpression) {
                if ((addonsPropertyAccessExpression === null || addonsPropertyAccessExpression === void 0 ? void 0 : addonsPropertyAccessExpression.getText()) ===
                    `${rootMainVariableName}.addons.push`) {
                    const parentCallExpression = addonsPropertyAccessExpression.parent;
                    // see if parentCallExpression contains a StringLiteral with the text '@storybook/addon-essentials'
                    const hasAddonEssentials = !!((_g = (_f = tsquery_1.tsquery
                        .query(parentCallExpression, `StringLiteral:has([text="@storybook/addon-essentials"])`)) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.getText());
                    if (!hasAddonEssentials) {
                        mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                            {
                                type: devkit_1.ChangeType.Insert,
                                index: addonsPropertyAccessExpression.getEnd() + 1,
                                text: `'@storybook/addon-essentials', `,
                            },
                        ]);
                        tree.write(mainJsTsPath, mainJsTs);
                        return true;
                    }
                }
                else {
                    mainJsTs = (0, devkit_1.applyChangesToString)(mainJsTs, [
                        {
                            type: devkit_1.ChangeType.Insert,
                            index: importExpression.getEnd() + 1,
                            text: `${rootMainVariableName}.addons.push('@storybook/addon-essentials');`,
                        },
                    ]);
                    tree.write(mainJsTsPath, mainJsTs);
                    return true;
                }
            }
        }
        return false;
    }
}
function removeStoriesArrayFromRootIfEmpty(tree, rootMainJsTsPath) {
    var _a;
    if (rootMainJsTsPath) {
        let rootMainJsTs = tree.read(rootMainJsTsPath, 'utf-8');
        const fullStoriesNode = (_a = tsquery_1.tsquery.query(rootMainJsTs, 'PropertyAssignment:has([name="stories"])')) === null || _a === void 0 ? void 0 : _a[0];
        if (!fullStoriesNode) {
            return false;
        }
        const stringLiterals = tsquery_1.tsquery.query(fullStoriesNode, 'StringLiteral');
        if ((stringLiterals === null || stringLiterals === void 0 ? void 0 : stringLiterals.length) === 0) {
            rootMainJsTs = (0, devkit_1.applyChangesToString)(rootMainJsTs, [
                {
                    type: devkit_1.ChangeType.Delete,
                    start: fullStoriesNode.getStart(),
                    length: rootMainJsTs[fullStoriesNode.getEnd()] === ','
                        ? fullStoriesNode.getText().length + 1
                        : fullStoriesNode.getText().length,
                },
            ]);
            tree.write(rootMainJsTsPath, rootMainJsTs);
            return true;
        }
    }
}
function getRootMainVariableName(mainJsTs) {
    var _a, _b, _c, _d;
    const requireVariableStatement = tsquery_1.tsquery.query(mainJsTs, `VariableStatement:has(CallExpression:has(Identifier[name="require"]))`);
    let rootMainVariableName;
    let importExpression;
    if (requireVariableStatement.length) {
        importExpression = requireVariableStatement.find((statement) => {
            var _a, _b;
            const requireCallExpression = tsquery_1.tsquery.query(statement, 'CallExpression:has(Identifier[name="require"])');
            return (_b = (_a = requireCallExpression === null || requireCallExpression === void 0 ? void 0 : requireCallExpression[0]) === null || _a === void 0 ? void 0 : _a.getText()) === null || _b === void 0 ? void 0 : _b.includes('.storybook/main');
        });
        if (importExpression) {
            rootMainVariableName = (_b = (_a = tsquery_1.tsquery
                .query(importExpression, 'Identifier')) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getText();
        }
    }
    else {
        const importDeclarations = tsquery_1.tsquery.query(mainJsTs, 'ImportDeclaration');
        importExpression = importDeclarations.find((statement) => {
            var _a, _b;
            const stringLiteral = tsquery_1.tsquery.query(statement, 'StringLiteral');
            return (_b = (_a = stringLiteral === null || stringLiteral === void 0 ? void 0 : stringLiteral[0]) === null || _a === void 0 ? void 0 : _a.getText()) === null || _b === void 0 ? void 0 : _b.includes('.storybook/main');
        });
        if (importExpression) {
            rootMainVariableName = (_d = (_c = tsquery_1.tsquery
                .query(importExpression, 'ImportSpecifier')) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.getText();
        }
    }
    return {
        rootMainVariableName,
        importExpression,
    };
}
exports.getRootMainVariableName = getRootMainVariableName;
//# sourceMappingURL=add-addon-essentials-to-all.js.map