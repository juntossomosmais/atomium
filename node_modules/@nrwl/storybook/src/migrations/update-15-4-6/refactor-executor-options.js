"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const executor_options_utils_1 = require("@nrwl/devkit/src/generators/executor-options-utils");
function default_1(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        updateNonAngularStorybookBuildTargets(tree);
        updateNonAngularStorybookServeTargets(tree);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
function updateNonAngularStorybookBuildTargets(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:build', (_options, projectName, targetName, configuration) => {
        var _a, _b;
        if (!configuration) {
            return;
        }
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
        if (!projectConfiguration.targets[targetName].options) {
            projectConfiguration.targets[targetName].options = {};
        }
        if (!projectConfiguration.targets[targetName].options.configDir) {
            projectConfiguration.targets[targetName].options.configDir =
                (_a = projectConfiguration.targets[targetName].options.config) === null || _a === void 0 ? void 0 : _a.configFolder;
        }
        if (!projectConfiguration.targets[targetName].options.outputDir) {
            projectConfiguration.targets[targetName].options.outputDir =
                projectConfiguration.targets[targetName].options.outputPath;
        }
        if (!projectConfiguration.targets[targetName].options.docs) {
            projectConfiguration.targets[targetName].options.docs =
                projectConfiguration.targets[targetName].options.docsMode;
        }
        projectConfiguration.targets[targetName].outputs =
            (_b = projectConfiguration.targets[targetName].outputs) === null || _b === void 0 ? void 0 : _b.map((output) => output.replace('{options.outputPath}', '{options.outputDir}'));
        delete projectConfiguration.targets[targetName].options.config;
        delete projectConfiguration.targets[targetName].options.outputPath;
        delete projectConfiguration.targets[targetName].options.docsMode;
        (0, devkit_1.updateProjectConfiguration)(tree, projectName, Object.assign({}, projectConfiguration));
    });
}
function updateNonAngularStorybookServeTargets(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/storybook:storybook', (_options, projectName, targetName, configuration) => {
        var _a;
        if (!configuration) {
            return;
        }
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, projectName);
        if (!projectConfiguration.targets[targetName].options) {
            projectConfiguration.targets[targetName].options = {};
        }
        if (!projectConfiguration.targets[targetName].options.configDir) {
            projectConfiguration.targets[targetName].options.configDir =
                (_a = projectConfiguration.targets[targetName].options.config) === null || _a === void 0 ? void 0 : _a.configFolder;
        }
        if (!projectConfiguration.targets[targetName].options.docs) {
            projectConfiguration.targets[targetName].options.docs =
                projectConfiguration.targets[targetName].options.docsMode;
        }
        delete projectConfiguration.targets[targetName].options.config;
        delete projectConfiguration.targets[targetName].options.docsMode;
        (0, devkit_1.updateProjectConfiguration)(tree, projectName, Object.assign({}, projectConfiguration));
    });
}
//# sourceMappingURL=refactor-executor-options.js.map