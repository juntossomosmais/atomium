"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const build = require("@storybook/core-server");
require("dotenv/config");
const utilities_1 = require("../../utils/utilities");
const utils_1 = require("../utils");
function storybookExecutor(options, context) {
    var _a;
    return tslib_1.__asyncGenerator(this, arguments, function* storybookExecutor_1() {
        var _b;
        const storybook7 = (0, utilities_1.isStorybookV7)();
        (0, utilities_1.storybookConfigExistsCheck)(options.configDir, context.projectName);
        if (storybook7) {
            const buildOptions = options;
            const result = yield tslib_1.__await(runInstance(buildOptions, storybook7));
            yield yield tslib_1.__await({
                success: true,
                info: {
                    port: result === null || result === void 0 ? void 0 : result.port,
                    baseUrl: `${options.https ? 'https' : 'http'}://${(_a = options.host) !== null && _a !== void 0 ? _a : 'localhost'}:${result === null || result === void 0 ? void 0 : result.port}`,
                },
            });
            yield tslib_1.__await(new Promise(() => { }));
        }
        else {
            // TODO(katerina): Remove when Storybook 7
            // print warnings
            (0, utils_1.runStorybookSetupCheck)(options);
            let frameworkPath = (0, utils_1.getStorybookFrameworkPath)(options.uiFramework);
            const frameworkOptions = (yield tslib_1.__await((_b = frameworkPath, Promise.resolve().then(() => require(_b))))).default;
            const buildOptions = Object.assign(Object.assign(Object.assign({}, options), frameworkOptions), { frameworkPresets: [...(frameworkOptions.frameworkPresets || [])] });
            yield tslib_1.__await(runInstance(buildOptions, storybook7));
            yield yield tslib_1.__await({ success: true });
            yield tslib_1.__await(new Promise(() => { }));
        }
    });
}
exports.default = storybookExecutor;
function runInstance(options, storybook7) {
    var _a;
    const env = (_a = process.env.NODE_ENV) !== null && _a !== void 0 ? _a : 'development';
    process.env.NODE_ENV = env;
    if (storybook7) {
        return build['build'](Object.assign(Object.assign({}, options), { mode: 'dev' })); // TODO(katerina): Change to actual types when Storybook 7
    }
    else {
        // TODO(katerina): Remove when Storybook 7
        return build.buildDev(Object.assign(Object.assign({}, options), { configType: env.toUpperCase(), mode: 'dev' }));
    }
}
//# sourceMappingURL=storybook.impl.js.map