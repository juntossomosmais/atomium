"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const build = require("@storybook/core-server");
require("dotenv/config");
const utilities_1 = require("../../utils/utilities");
const utils_1 = require("../utils");
function buildStorybookExecutor(options, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        (0, utilities_1.storybookConfigExistsCheck)(options.configDir, context.projectName);
        const storybook7 = (0, utilities_1.isStorybookV7)();
        if (storybook7) {
            const buildOptions = options;
            devkit_1.logger.info(`NX Storybook builder starting ...`);
            yield runInstance(buildOptions, storybook7);
            devkit_1.logger.info(`NX Storybook builder finished ...`);
            devkit_1.logger.info(`NX Storybook files available in ${buildOptions.outputDir}`);
            return { success: true };
        }
        else {
            // TODO(katerina): Remove when Storybook 7
            // print warnings
            (0, utils_1.runStorybookSetupCheck)(options);
            devkit_1.logger.info(`NX ui framework: ${options.uiFramework}`);
            const frameworkPath = (0, utils_1.getStorybookFrameworkPath)(options.uiFramework);
            const { default: frameworkOptions } = yield (_a = frameworkPath, Promise.resolve().then(() => require(_a)));
            const buildOptions = Object.assign(Object.assign(Object.assign({}, options), frameworkOptions), { frameworkPresets: [...(frameworkOptions.frameworkPresets || [])] });
            devkit_1.logger.info(`NX Storybook builder starting ...`);
            yield runInstance(buildOptions, storybook7);
            devkit_1.logger.info(`NX Storybook builder finished ...`);
            devkit_1.logger.info(`NX Storybook files available in ${buildOptions.outputDir}`);
            return { success: true };
        }
    });
}
exports.default = buildStorybookExecutor;
function runInstance(options, storybook7) {
    var _a;
    const env = (_a = process.env.NODE_ENV) !== null && _a !== void 0 ? _a : 'production';
    process.env.NODE_ENV = env;
    if (storybook7) {
        return build['build'](Object.assign(Object.assign({}, options), { mode: 'static' })); // TODO(katerina): Change to actual types when Storybook 7
    }
    else {
        const nodeVersion = process.version.slice(1).split('.');
        if (+nodeVersion[0] === 18) {
            devkit_1.logger.warn(`
        If you are using the @storybook/builder-vite you may experience issues with Node 18.
        Please use Node 16 if you are using @storybook/builder-vite. 
      `);
        }
        return build.buildStaticStandalone(Object.assign(Object.assign({}, options), { ci: true })); // TODO(katerina): Remove when Storybook 7
    }
}
//# sourceMappingURL=build-storybook.impl.js.map