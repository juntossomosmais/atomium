"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const eslint_file_1 = require("../../generators/utils/eslint-file");
const eslint_targets_1 = require("../../generators/utils/eslint-targets");
function addEslintIgnore(tree) {
    var _a, _b;
    var _c;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const nxJson = (0, devkit_1.readJson)(tree, 'nx.json');
        const globalEslintFile = eslint_file_1.eslintConfigFileWhitelist.find((file) => tree.exists(file));
        if (globalEslintFile) {
            if (tree.exists('.eslintignore')) {
                const content = tree.read('.eslintignore', 'utf-8');
                if (!content.includes('node_modules')) {
                    tree.write('.eslintignore', `node_modules\n${content}`);
                }
            }
            else {
                tree.write('.eslintignore', 'node_modules\n');
            }
            for (const targetName of (0, eslint_targets_1.getEslintTargets)(tree)) {
                (_a = nxJson.targetDefaults) !== null && _a !== void 0 ? _a : (nxJson.targetDefaults = {});
                const lintTargetDefaults = ((_b = (_c = nxJson.targetDefaults)[targetName]) !== null && _b !== void 0 ? _b : (_c[targetName] = {}));
                const lintIgnorePath = (0, devkit_1.joinPathFragments)('{workspaceRoot}', globalEslintFile);
                if (lintTargetDefaults.inputs) {
                    if (!lintTargetDefaults.inputs.includes(lintIgnorePath)) {
                        lintTargetDefaults.inputs.push(lintIgnorePath);
                    }
                }
                else {
                    lintTargetDefaults.inputs = ['default', lintIgnorePath];
                }
            }
            (0, devkit_1.updateNxJson)(tree, nxJson);
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.default = addEslintIgnore;
//# sourceMappingURL=add-eslint-ignore.js.map