"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const eslint_file_1 = require("../../generators/utils/eslint-file");
const eslint_targets_1 = require("../../generators/utils/eslint-targets");
function addEslintInputs(tree) {
    var _a, _b, _c, _d;
    var _e;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const nxJson = (0, devkit_1.readNxJson)(tree);
        const globalEslintFile = eslint_file_1.eslintConfigFileWhitelist.find((file) => tree.exists(file));
        if (globalEslintFile && ((_a = nxJson.namedInputs) === null || _a === void 0 ? void 0 : _a.production)) {
            const productionFileset = new Set(nxJson.namedInputs.production);
            productionFileset.add(`!{projectRoot}/${globalEslintFile}`);
            nxJson.namedInputs.production = Array.from(productionFileset);
        }
        for (const targetName of (0, eslint_targets_1.getEslintTargets)(tree)) {
            (_b = nxJson.targetDefaults) !== null && _b !== void 0 ? _b : (nxJson.targetDefaults = {});
            const lintTargetDefaults = ((_c = (_e = nxJson.targetDefaults)[targetName]) !== null && _c !== void 0 ? _c : (_e[targetName] = {}));
            (_d = lintTargetDefaults.inputs) !== null && _d !== void 0 ? _d : (lintTargetDefaults.inputs = [
                'default',
                ...(globalEslintFile
                    ? [(0, devkit_1.joinPathFragments)('{workspaceRoot}', globalEslintFile)]
                    : []),
            ]);
        }
        (0, devkit_1.updateNxJson)(tree, nxJson);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = addEslintInputs;
//# sourceMappingURL=add-eslint-inputs.js.map