"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findLintTarget = exports.migrateConfigToMonorepoStyle = void 0;
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const eslint_file_1 = require("../utils/eslint-file");
const global_eslint_config_1 = require("./global-eslint-config");
function migrateConfigToMonorepoStyle(projects, tree, unitTestRunner) {
    (0, devkit_1.writeJson)(tree, '.eslintrc.base.json', (0, global_eslint_config_1.getGlobalEsLintConfiguration)(unitTestRunner));
    // update extens in all projects' eslint configs
    projects.forEach((project) => {
        const lintTarget = findLintTarget(project);
        if (lintTarget) {
            const projectEslintPath = (0, devkit_1.joinPathFragments)(project.root, lintTarget.options.eslintConfig || (0, eslint_file_1.findEslintFile)(tree, project.root));
            migrateEslintFile(projectEslintPath, tree);
        }
    });
}
exports.migrateConfigToMonorepoStyle = migrateConfigToMonorepoStyle;
function findLintTarget(project) {
    var _a, _b;
    return (_b = Object.entries((_a = project.targets) !== null && _a !== void 0 ? _a : {}).find(([name, target]) => name === 'lint' || target.executor === '@nrwl/linter:eslint')) === null || _b === void 0 ? void 0 : _b[1];
}
exports.findLintTarget = findLintTarget;
function migrateEslintFile(projectEslintPath, tree) {
    if (projectEslintPath.endsWith('.json') ||
        projectEslintPath.endsWith('.eslintrc')) {
        (0, devkit_1.updateJson)(tree, projectEslintPath, (json) => {
            // we have a new root now
            delete json.root;
            // remove nrwl/nx plugins
            if (json.plugins) {
                json.plugins = json.plugins.filter((p) => p !== '@nrwl/nx');
                if (json.plugins.length === 0) {
                    delete json.plugins;
                }
            }
            // add extends
            json.extends = json.extends || [];
            const pathToRootConfig = `${(0, devkit_1.offsetFromRoot)((0, path_1.dirname)(projectEslintPath))}.eslintrc.base.json`;
            if (json.extends.indexOf(pathToRootConfig) === -1) {
                json.extends.push(pathToRootConfig);
            }
            // cleanup overrides
            if (json.overrides) {
                json.overrides.forEach((override) => {
                    if (override.extends) {
                        override.extends = override.extends.filter((ext) => ext !== 'plugin:@nrwl/nx/typescript' &&
                            ext !== 'plugin:@nrwl/nx/javascript');
                        if (override.extends.length === 0) {
                            delete override.extends;
                        }
                    }
                });
            }
            return json;
        });
        return;
    }
    if (projectEslintPath.endsWith('.yml') ||
        projectEslintPath.endsWith('.yaml')) {
        console.warn('YAML eslint config is not supported yet for migration');
    }
    if (projectEslintPath.endsWith('.js') || projectEslintPath.endsWith('.cjs')) {
        console.warn('YAML eslint config is not supported yet for migration');
    }
}
//# sourceMappingURL=init-migration.js.map