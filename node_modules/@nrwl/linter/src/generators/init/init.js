"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintInitGenerator = void 0;
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("../../utils/versions");
const eslint_file_1 = require("../utils/eslint-file");
const global_eslint_config_1 = require("./global-eslint-config");
function addTargetDefaults(tree) {
    var _a, _b, _c, _d;
    var _e, _f;
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const productionFileSet = (_a = nxJson.namedInputs) === null || _a === void 0 ? void 0 : _a.production;
    if (productionFileSet) {
        // Remove .eslintrc.json
        productionFileSet.push('!{projectRoot}/.eslintrc.json');
        // Dedupe and set
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    (_b = nxJson.targetDefaults) !== null && _b !== void 0 ? _b : (nxJson.targetDefaults = {});
    (_c = (_e = nxJson.targetDefaults).lint) !== null && _c !== void 0 ? _c : (_e.lint = {});
    (_d = (_f = nxJson.targetDefaults.lint).inputs) !== null && _d !== void 0 ? _d : (_f.inputs = [
        'default',
        `{workspaceRoot}/.eslintrc.json`,
        `{workspaceRoot}/.eslintignore`,
    ]);
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function initEsLint(tree, options) {
    if ((0, eslint_file_1.findEslintFile)(tree)) {
        return () => { };
    }
    if (!options.skipPackageJson) {
        (0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nrwl/linter'], []);
    }
    (0, devkit_1.writeJson)(tree, '.eslintrc.json', (0, global_eslint_config_1.getGlobalEsLintConfiguration)(options.unitTestRunner, options.rootProject));
    tree.write('.eslintignore', 'node_modules\n');
    addTargetDefaults(tree);
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations || (json.recommendations = []);
            const extension = 'dbaeumer.vscode-eslint';
            if (!json.recommendations.includes(extension)) {
                json.recommendations.push(extension);
            }
            return json;
        });
    }
    return !options.skipPackageJson
        ? (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@nrwl/linter': versions_1.nxVersion,
            '@nrwl/eslint-plugin-nx': versions_1.nxVersion,
            '@typescript-eslint/parser': versions_1.typescriptESLintVersion,
            '@typescript-eslint/eslint-plugin': versions_1.typescriptESLintVersion,
            eslint: versions_1.eslintVersion,
            'eslint-config-prettier': versions_1.eslintConfigPrettierVersion,
        })
        : () => { };
}
function lintInitGenerator(tree, options) {
    return initEsLint(tree, options);
}
exports.lintInitGenerator = lintInitGenerator;
//# sourceMappingURL=init.js.map