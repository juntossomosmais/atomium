"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalEsLintConfiguration = exports.moduleBoundariesOverride = exports.globalJavaScriptOverrides = exports.globalTypeScriptOverrides = void 0;
/**
 * This configuration is intended to apply to all TypeScript source files.
 * See the eslint-plugin-nx package for what is in the referenced shareable config.
 */
exports.globalTypeScriptOverrides = {
    files: ['*.ts', '*.tsx'],
    extends: ['plugin:@nrwl/nx/typescript'],
    /**
     * Having an empty rules object present makes it more obvious to the user where they would
     * extend things from if they needed to
     */
    rules: {},
};
/**
 * This configuration is intended to apply to all JavaScript source files.
 * See the eslint-plugin-nx package for what is in the referenced shareable config.
 */
exports.globalJavaScriptOverrides = {
    files: ['*.js', '*.jsx'],
    extends: ['plugin:@nrwl/nx/javascript'],
    /**
     * Having an empty rules object present makes it more obvious to the user where they would
     * extend things from if they needed to
     */
    rules: {},
};
/**
 * This configuration is intended to apply to all "source code" (but not
 * markup like HTML, or other custom file types like GraphQL)
 */
exports.moduleBoundariesOverride = {
    files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
    rules: {
        '@nrwl/nx/enforce-module-boundaries': [
            'error',
            {
                enforceBuildableLibDependency: true,
                allow: [],
                depConstraints: [{ sourceTag: '*', onlyDependOnLibsWithTags: ['*'] }],
            },
        ],
    },
};
const getGlobalEsLintConfiguration = (unitTestRunner, rootProject) => {
    const config = {
        root: true,
        ignorePatterns: rootProject ? ['!**/*'] : ['**/*'],
        plugins: ['@nrwl/nx'],
        /**
         * We leverage ESLint's "overrides" capability so that we can set up a root config which will support
         * all permutations of Nx workspaces across all frameworks, libraries and tools.
         *
         * The key point is that we need entirely different ESLint config to apply to different types of files,
         * but we still want to share common config where possible.
         */
        overrides: [
            ...(rootProject ? [] : [exports.moduleBoundariesOverride]),
            exports.globalTypeScriptOverrides,
            exports.globalJavaScriptOverrides,
        ],
    };
    if (unitTestRunner === 'jest') {
        config.overrides.push({
            files: ['*.spec.ts', '*.spec.tsx', '*.spec.js', '*.spec.jsx'],
            env: {
                jest: true,
            },
            rules: {},
        });
    }
    return config;
};
exports.getGlobalEsLintConfiguration = getGlobalEsLintConfiguration;
//# sourceMappingURL=global-eslint-config.js.map