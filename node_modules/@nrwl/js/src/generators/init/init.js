"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initSchematic = exports.initGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const ts_config_1 = require("../../utils/typescript/ts-config");
const versions_1 = require("../../utils/versions");
let formatTaskAdded = false;
function initGenerator(tree, schema) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        // add tsconfig.base.json
        if (!(0, ts_config_1.getRootTsConfigFileName)(tree)) {
            (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, './files'), '.', {
                fileName: (_a = schema.tsConfigName) !== null && _a !== void 0 ? _a : 'tsconfig.base.json',
            });
        }
        const devDependencies = {
            '@nrwl/js': versions_1.nxVersion,
            prettier: versions_1.prettierVersion,
        };
        if (!schema.js) {
            devDependencies['typescript'] = versions_1.typescriptVersion;
        }
        if (!tree.exists(`.prettierrc`)) {
            (0, devkit_1.writeJson)(tree, '.prettierrc', {
                singleQuote: true,
            });
        }
        if (!tree.exists(`.prettierignore`)) {
            tree.write('.prettierignore', (0, devkit_1.stripIndents) `
        # Add files here to ignore them from prettier formatting
        /dist
        /coverage
      `);
        }
        if (tree.exists('.vscode/extensions.json')) {
            (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
                var _a;
                (_a = json.recommendations) !== null && _a !== void 0 ? _a : (json.recommendations = []);
                const extension = 'esbenp.prettier-vscode';
                if (!json.recommendations.includes(extension)) {
                    json.recommendations.push(extension);
                }
                return json;
            });
        }
        const installTask = !schema.skipPackageJson
            ? (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies)
            : () => { };
        tasks.push(installTask);
        (0, devkit_1.ensurePackage)('prettier', versions_1.prettierVersion);
        if (!schema.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const task of tasks) {
                yield task();
            }
        });
    });
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
exports.initSchematic = (0, devkit_1.convertNxGenerator)(initGenerator);
//# sourceMappingURL=init.js.map