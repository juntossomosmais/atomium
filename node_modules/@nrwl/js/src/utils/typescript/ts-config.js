"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateRootTsConfig = exports.getRootTsConfigFileName = exports.getRelativePathToRootTsConfig = exports.getRootTsConfigPathInTree = exports.readTsConfig = void 0;
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
let tsModule;
function readTsConfig(tsConfigPath) {
    if (!tsModule) {
        tsModule = require('typescript');
    }
    const readResult = tsModule.readConfigFile(tsConfigPath, tsModule.sys.readFile);
    return tsModule.parseJsonConfigFileContent(readResult.config, tsModule.sys, (0, path_1.dirname)(tsConfigPath));
}
exports.readTsConfig = readTsConfig;
function getRootTsConfigPathInTree(tree) {
    for (const path of ['tsconfig.base.json', 'tsconfig.json']) {
        if (tree.exists(path)) {
            return path;
        }
    }
    return 'tsconfig.base.json';
}
exports.getRootTsConfigPathInTree = getRootTsConfigPathInTree;
function getRelativePathToRootTsConfig(tree, targetPath) {
    return (0, devkit_1.offsetFromRoot)(targetPath) + getRootTsConfigPathInTree(tree);
}
exports.getRelativePathToRootTsConfig = getRelativePathToRootTsConfig;
function getRootTsConfigFileName(tree) {
    for (const tsConfigName of ['tsconfig.base.json', 'tsconfig.json']) {
        if (tree.exists(tsConfigName)) {
            return tsConfigName;
        }
    }
    return null;
}
exports.getRootTsConfigFileName = getRootTsConfigFileName;
function updateRootTsConfig(host, options) {
    if (!options.importPath) {
        throw new Error(`Unable to update ${options.name} using the import path "${options.importPath}". Make sure to specify a valid import path one.`);
    }
    (0, devkit_1.updateJson)(host, getRootTsConfigPathInTree(host), (json) => {
        const c = json.compilerOptions;
        c.paths = c.paths || {};
        delete c.paths[options.name];
        if (c.paths[options.importPath]) {
            throw new Error(`You already have a library using the import path "${options.importPath}". Make sure to specify a unique one.`);
        }
        c.paths[options.importPath] = [
            (0, devkit_1.joinPathFragments)(options.projectRoot, './src', 'index.' + (options.js ? 'js' : 'ts')),
        ];
        return json;
    });
}
exports.updateRootTsConfig = updateRootTsConfig;
//# sourceMappingURL=ts-config.js.map