{"version":3,"names":["path","require","ACTIONS","GET_DEFAULT_EXTENSIONS","SET_OPTIONS","TRANSFORM","TRANSFORM_SYNC","Client","constructor","send","getDefaultExtensions","undefined","setOptions","options","transform","code","filename","exports","WorkerClient","action","payload","subChannel","MessageChannel","postMessage","signal","port","port1","Atomics","wait","message","receiveMessageOnPort","port2","error","Object","assign","errorData","result","Worker","resolve","__dirname","env","process","Int32Array","SharedArrayBuffer","unref","markInRegisterWorker","LocalClient","isLocalClient"],"sources":["../src/worker-client.js"],"sourcesContent":["const path = require(\"path\");\n\nconst ACTIONS = {\n  GET_DEFAULT_EXTENSIONS: \"GET_DEFAULT_EXTENSIONS\",\n  SET_OPTIONS: \"SET_OPTIONS\",\n  TRANSFORM: \"TRANSFORM\",\n  TRANSFORM_SYNC: \"TRANSFORM_SYNC\",\n};\n\nclass Client {\n  #send;\n\n  constructor(send) {\n    this.#send = send;\n  }\n\n  #eCache;\n  /** @return {string[]} */\n  getDefaultExtensions() {\n    return (this.#eCache ??= this.#send(\n      ACTIONS.GET_DEFAULT_EXTENSIONS,\n      undefined,\n    ));\n  }\n\n  /**\n   * @param {object} options\n   * @return {void}\n   */\n  setOptions(options) {\n    return this.#send(ACTIONS.SET_OPTIONS, options);\n  }\n\n  /**\n   * @param {string} code\n   * @param {string} filename\n   * @return {{ code: string, map: object } | null}\n   */\n  transform(code, filename) {\n    return this.#send(ACTIONS.TRANSFORM, { code, filename });\n  }\n}\n\n// We need to run Babel in a worker because require hooks must\n// run synchronously, but many steps of Babel's config loading\n// (which is done for each file) can be asynchronous\nexports.WorkerClient = class WorkerClient extends Client {\n  // These two require() calls are in deferred so that they are not imported in\n  // older Node.js versions (which don't support workers).\n  // TODO: Hoist them in Babel 8.\n\n  /** @type {typeof import(\"worker_threads\")} */\n  static get #worker_threads() {\n    return require(\"worker_threads\");\n  }\n\n  static get #markInRegisterWorker() {\n    return require(\"./is-in-register-worker\").markInRegisterWorker;\n  }\n\n  #worker = new WorkerClient.#worker_threads.Worker(\n    path.resolve(__dirname, \"./worker/index.js\"),\n    { env: WorkerClient.#markInRegisterWorker(process.env) },\n  );\n\n  #signal = new Int32Array(new SharedArrayBuffer(4));\n\n  constructor() {\n    super((action, payload) => {\n      this.#signal[0] = 0;\n      const subChannel = new WorkerClient.#worker_threads.MessageChannel();\n\n      this.#worker.postMessage(\n        { signal: this.#signal, port: subChannel.port1, action, payload },\n        [subChannel.port1],\n      );\n\n      Atomics.wait(this.#signal, 0, 0);\n      const { message } = WorkerClient.#worker_threads.receiveMessageOnPort(\n        subChannel.port2,\n      );\n\n      if (message.error) throw Object.assign(message.error, message.errorData);\n      else return message.result;\n    });\n\n    // The worker will never exit by itself. Prevent it from keeping\n    // the main process alive.\n    this.#worker.unref();\n  }\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  exports.LocalClient = class LocalClient extends Client {\n    isLocalClient = true;\n\n    static #handleMessage;\n\n    constructor() {\n      LocalClient.#handleMessage ??= require(\"./worker/handle-message\");\n\n      super((action, payload) => {\n        return LocalClient.#handleMessage(\n          action === ACTIONS.TRANSFORM ? ACTIONS.TRANSFORM_SYNC : action,\n          payload,\n        );\n      });\n    }\n  };\n}\n"],"mappings":"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"}