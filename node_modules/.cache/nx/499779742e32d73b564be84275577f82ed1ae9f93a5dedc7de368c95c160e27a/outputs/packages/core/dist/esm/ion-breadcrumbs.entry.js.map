{"file":"ion-breadcrumbs.entry.js","mappings":"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","names":[],"sources":["../../node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.ios.css?tag=ion-breadcrumbs&mode=ios&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.md.css?tag=ion-breadcrumbs&mode=md&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.js"],"sourcesContent":[":host {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n:host(.in-toolbar-color),\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon {\n  color: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator {\n  background: rgba(var(--ion-color-contrast-rgb), 0.11);\n}\n\n:host(.in-toolbar) {\n  -webkit-padding-start: 20px;\n  padding-inline-start: 20px;\n  -webkit-padding-end: 20px;\n  padding-inline-end: 20px;\n  padding-top: 0;\n  padding-bottom: 0;\n  justify-content: center;\n}",":host {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n:host(.in-toolbar-color),\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon {\n  color: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator {\n  background: rgba(var(--ion-color-contrast-rgb), 0.11);\n}\n\n:host(.in-toolbar) {\n  -webkit-padding-start: 8px;\n  padding-inline-start: 8px;\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  padding-top: 0;\n  padding-bottom: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { createColorClasses, hostContext } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n */\nexport class Breadcrumbs {\n  constructor() {\n    this.breadcrumbsInit = () => {\n      this.setBreadcrumbSeparator();\n      this.setMaxItems();\n    };\n    this.resetActiveBreadcrumb = () => {\n      const breadcrumbs = this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      const activeBreadcrumb = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      if (activeBreadcrumb && this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    this.setMaxItems = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      for (const breadcrumb of breadcrumbs) {\n        breadcrumb.showCollapsedIndicator = false;\n        breadcrumb.collapsed = false;\n      }\n      // If the number of breadcrumbs exceeds the maximum number of items\n      // that should show and the items before / after collapse do not\n      // exceed the maximum items then we need to collapse the breadcrumbs\n      const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach((breadcrumb, index) => {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    this.setBreadcrumbSeparator = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      const active = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      // Set the separator on all but the last breadcrumb\n      for (const breadcrumb of breadcrumbs) {\n        // The only time the last breadcrumb changes is when\n        // itemsAfterCollapse is set to 0, in this case the\n        // last breadcrumb will be the collapsed indicator\n        const last = maxItems !== undefined && itemsAfterCollapse === 0\n          ? breadcrumb === breadcrumbs[itemsBeforeCollapse]\n          : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n        breadcrumb.last = last;\n        // If the breadcrumb has defined whether or not to show the\n        // separator then use that value, otherwise check if it's the\n        // last breadcrumb\n        const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n        breadcrumb.separator = separator;\n        // If there is not an active breadcrumb already\n        // set the last one to active\n        if (!active && last) {\n          breadcrumb.active = true;\n          this.activeChanged = true;\n        }\n      }\n    };\n    this.getBreadcrumbs = () => {\n      return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    this.slotChanged = () => {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    };\n    this.collapsed = undefined;\n    this.activeChanged = undefined;\n    this.color = undefined;\n    this.maxItems = undefined;\n    this.itemsBeforeCollapse = 1;\n    this.itemsAfterCollapse = 1;\n  }\n  onCollapsedClick(ev) {\n    const breadcrumbs = this.getBreadcrumbs();\n    const collapsedBreadcrumbs = breadcrumbs.filter((breadcrumb) => breadcrumb.collapsed);\n    this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), { collapsedBreadcrumbs }));\n  }\n  maxItemsChanged() {\n    this.resetActiveBreadcrumb();\n    this.breadcrumbsInit();\n  }\n  componentWillLoad() {\n    this.breadcrumbsInit();\n  }\n  render() {\n    const { color, collapsed } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'breadcrumbs-collapsed': collapsed,\n      }) }, h(\"slot\", { onSlotchange: this.slotChanged })));\n  }\n  static get is() { return \"ion-breadcrumbs\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"breadcrumbs.ios.scss\"],\n      \"md\": [\"breadcrumbs.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"breadcrumbs.ios.css\"],\n      \"md\": [\"breadcrumbs.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"maxItems\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The maximum number of breadcrumbs to show before collapsing.\"\n        },\n        \"attribute\": \"max-items\",\n        \"reflect\": false\n      },\n      \"itemsBeforeCollapse\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The number of breadcrumbs to show before the collapsed indicator.\\nIf `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\\nthe breadcrumbs will not be collapsed.\"\n        },\n        \"attribute\": \"items-before-collapse\",\n        \"reflect\": false,\n        \"defaultValue\": \"1\"\n      },\n      \"itemsAfterCollapse\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The number of breadcrumbs to show after the collapsed indicator.\\nIf `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\\nthe breadcrumbs will not be collapsed.\"\n        },\n        \"attribute\": \"items-after-collapse\",\n        \"reflect\": false,\n        \"defaultValue\": \"1\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"collapsed\": {},\n      \"activeChanged\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionCollapsedClick\",\n        \"name\": \"ionCollapsedClick\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the collapsed indicator is clicked on.\"\n        },\n        \"complexType\": {\n          \"original\": \"BreadcrumbCollapsedClickEventDetail\",\n          \"resolved\": \"BreadcrumbCollapsedClickEventDetail\",\n          \"references\": {\n            \"BreadcrumbCollapsedClickEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../breadcrumb/breadcrumb-interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"maxItems\",\n        \"methodName\": \"maxItemsChanged\"\n      }, {\n        \"propName\": \"itemsBeforeCollapse\",\n        \"methodName\": \"maxItemsChanged\"\n      }, {\n        \"propName\": \"itemsAfterCollapse\",\n        \"methodName\": \"maxItemsChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"collapsedClick\",\n        \"method\": \"onCollapsedClick\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n"],"version":3}