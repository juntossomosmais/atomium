{"file":"form-controller-702885c5.js","mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,0BAA0B,GAAG,CAAC,EAAE,KAAK;AAClD,EAAE,MAAM,SAAS,GAAG,EAAE,CAAC;AACvB,EAAE,IAAI,aAAa,CAAC;AACpB,EAAE,MAAM,gBAAgB,GAAG,MAAM;AACjC,IAAI,IAAI,aAAa,KAAK,SAAS,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,KAAK,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACpF,MAAM,MAAM,qBAAqB,GAAG,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;AACxE;AACA,SAAS,SAAS,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,SAAS,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;AACrF;AACA;AACA;AACA;AACA,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,KAAK,IAAI,KAAK,CAAC,YAAY,IAAI,CAAC,qBAAqB,CAAC,CAAC;AAC7F,KAAK;AACL,IAAI,OAAO,aAAa,CAAC;AACzB,GAAG,CAAC;AACJ,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;AAC9B,EAAE;AACF,MAAM,YAAY,GAAG,CAAC,SAAS,KAAK;AACpC,EAAE,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC;AACpC,EAAE,IAAI,IAAI,KAAK,IAAI,EAAE;AACrB,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,2BAA2B,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,IAAI,EAAE;AACrH,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,6BAA6B,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,WAAW,KAAK,EAAE,EAAE;AACjG,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AACF,MAAM,2BAA2B,GAAG,CAAC,WAAW,CAAC,CAAC;AAClD,MAAM,6BAA6B,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,WAAW,CAAC;;;;","names":[],"sources":["../../node_modules/@ionic/core/dist/collection/utils/forms/form-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a controller that tracks whether a form control is using the legacy or modern syntax. This should be removed when the legacy form control syntax is removed.\n *\n * @internal\n * @prop el: The Ionic form component to reference\n */\nexport const createLegacyFormController = (el) => {\n  const controlEl = el;\n  let legacyControl;\n  const hasLegacyControl = () => {\n    if (legacyControl === undefined) {\n      /**\n       * Detect if developers are using the legacy form control syntax\n       * so a deprecation warning is logged. This warning can be disabled\n       * by either using the new `label` property or setting `aria-label`\n       * on the control.\n       * Alternatively, components that use a slot for the label\n       * can check to see if the component has slotted text\n       * in the light DOM.\n       */\n      const hasLabelProp = controlEl.label !== undefined || hasLabelSlot(controlEl);\n      const hasAriaLabelAttribute = controlEl.hasAttribute('aria-label') ||\n        // Shadow DOM form controls cannot use aria-labelledby\n        (controlEl.hasAttribute('aria-labelledby') && controlEl.shadowRoot === null);\n      /**\n       * Developers can manually opt-out of the modern form markup\n       * by setting `legacy=\"true\"` on components.\n       */\n      legacyControl = controlEl.legacy === true || (!hasLabelProp && !hasAriaLabelAttribute);\n    }\n    return legacyControl;\n  };\n  return { hasLegacyControl };\n};\nconst hasLabelSlot = (controlEl) => {\n  const root = controlEl.shadowRoot;\n  if (root === null) {\n    return false;\n  }\n  /**\n   * Components that have a named label slot\n   * also have other slots, so we need to query for\n   * anything that is explicitly passed to slot=\"label\"\n   */\n  if (NAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.querySelector('[slot=\"label\"]') !== null) {\n    return true;\n  }\n  /**\n   * Components that have an unnamed slot for the label\n   * have no other slots, so we can check the textContent\n   * of the element.\n   */\n  if (UNNAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.textContent !== '') {\n    return true;\n  }\n  return false;\n};\nconst NAMED_LABEL_SLOT_COMPONENTS = ['ION-RANGE'];\nconst UNNAMED_LABEL_SLOT_COMPONENTS = ['ION-TOGGLE', 'ION-CHECKBOX', 'ION-RADIO'];\n"],"version":3}