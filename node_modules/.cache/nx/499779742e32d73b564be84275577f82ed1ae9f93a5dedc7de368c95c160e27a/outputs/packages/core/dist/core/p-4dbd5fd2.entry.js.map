{"version":3,"names":["CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","getUrl","i","url","getSrc","src","getName","name","icon","mode","ios","md","getNamedUrl","iconName","get","getAssetPath","toLower","isSrc","isStr","trim","invalidChars","replace","str","length","test","val","toLowerCase","inheritAttributes","el","attributes","attributeObject","forEach","attr","hasAttribute","value","getAttribute","removeAttribute","isRTL","hostEl","dir","document","validateContent","svgContent","div","createElement","innerHTML","childNodes","nodeName","removeChild","svgElm","firstElementChild","svgClass","setAttribute","isValid","elm","nodeType","indexOf","isSvgDataUrl","startsWith","isEncodedDataUrl","ioniconContent","requests","parser","getSvgContent","sanitize","req","fetch","DOMParser","doc","parseFromString","svg","querySelector","set","outerHTML","Promise","resolve","then","rsp","ok","text","iconCss","Icon","constructor","hostRef","this","inheritedAttributes","isVisible","getIonMode","lazy","componentWillLoad","connectedCallback","waitUntilVisible","loadIcon","disconnectedCallback","io","disconnect","undefined","rootMargin","cb","IntersectionObserver","data","isIntersecting","observe","has","render","flipRtl","h","Host","Object","assign","role","class","createColorClasses","color","size","assetsDirs","documentElement"],"sources":["../../node_modules/ionicons/dist/collection/components/icon/utils.js","../../node_modules/ionicons/dist/collection/components/icon/validate.js","../../node_modules/ionicons/dist/collection/components/icon/request.js","../../node_modules/ionicons/dist/collection/components/icon/icon.css?tag=ion-icon&encapsulation=shadow","../../node_modules/ionicons/dist/collection/components/icon/icon.js"],"sourcesContent":["import { getAssetPath } from '@stencil/core';\nlet CACHED_MAP;\nexport const getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  }\n  else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nexport const addIcons = (icons) => {\n  const map = getIconMap();\n  Object.keys(icons).forEach(name => map.set(name, icons[name]));\n};\nexport const getUrl = (i) => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  return getAssetPath(`svg/${iconName}.svg`);\n};\nexport const getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  }\n  else if (md && mode === 'md') {\n    iconName = toLower(md);\n  }\n  else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nexport const getSrc = (src) => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nexport const isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nexport const isStr = (val) => typeof val === 'string';\nexport const toLower = (val) => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nexport const inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nexport const isRTL = (hostEl) => {\n  if (hostEl) {\n    if (hostEl.dir !== '') {\n      return hostEl.dir.toLowerCase() === 'rtl';\n    }\n  }\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\n","import { isStr } from './utils';\nexport const validateContent = (svgContent) => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nexport const isValid = (elm) => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const name = elm.attributes[i].name;\n      if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nexport const isSvgDataUrl = (url) => url.startsWith('data:image/svg+xml');\nexport const isEncodedDataUrl = (url) => url.indexOf(';utf8,') !== -1;\n","import { isEncodedDataUrl, isSvgDataUrl, validateContent } from './validate';\nexport const ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\nexport const getSvgContent = (url, sanitize) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n  if (!req) {\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n      /**\n       * If the url is a data url of an svg, then try to parse it\n       * with the DOMParser. This works with content security policies enabled.\n       */\n      if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n        if (!parser) {\n          /**\n           * Create an instance of the DOM parser. This creates a single\n           * parser instance for the entire app, which is more efficient.\n           */\n          parser = new DOMParser();\n        }\n        const doc = parser.parseFromString(url, 'text/html');\n        const svg = doc.querySelector('svg');\n        if (svg) {\n          ioniconContent.set(url, svg.outerHTML);\n        }\n        return Promise.resolve();\n      }\n      else {\n        // we don't already have a request\n        req = fetch(url).then((rsp) => {\n          if (rsp.ok) {\n            return rsp.text().then((svgContent) => {\n              if (svgContent && sanitize !== false) {\n                svgContent = validateContent(svgContent);\n              }\n              ioniconContent.set(url, svgContent || '');\n            });\n          }\n          ioniconContent.set(url, '');\n        });\n        // cache for the same requests\n        requests.set(url, req);\n      }\n    }\n    else {\n      // set to empty for ssr scenarios and resolve promise\n      ioniconContent.set(url, '');\n      return Promise.resolve();\n    }\n  }\n  return req;\n};\n",":host {\n  display: inline-block;\n\n  width: 1em;\n  height: 1em;\n\n  contain: strict;\n\n  fill: currentColor;\n\n  box-sizing: content-box !important;\n}\n\n:host .ionicon {\n  stroke: currentColor;\n}\n\n.ionicon-fill-none {\n  fill: none;\n}\n\n.ionicon-stroke-width {\n  stroke-width: 32px;\n  stroke-width: var(--ionicon-stroke-width, 32px);\n}\n\n.icon-inner,\n.ionicon,\nsvg {\n  display: block;\n\n  height: 100%;\n  width: 100%;\n}\n\n\n/* Icon RTL\n * -----------------------------------------------------------\n */\n\n:host(.flip-rtl) .icon-inner {\n  transform: scaleX(-1);\n}\n\n\n/* Icon Sizes\n * -----------------------------------------------------------\n */\n\n:host(.icon-small) {\n  font-size: 18px !important;\n}\n\n:host(.icon-large){\n  font-size: 32px !important;\n}\n\n\n/* Icon Colors\n * -----------------------------------------------------------\n */\n\n:host(.ion-color) {\n  color: var(--ion-color-base) !important;\n}\n\n:host(.ion-color-primary) {\n  --ion-color-base: var(--ion-color-primary, #3880ff);\n}\n\n:host(.ion-color-secondary) {\n  --ion-color-base: var(--ion-color-secondary, #0cd1e8);\n}\n\n:host(.ion-color-tertiary) {\n  --ion-color-base: var(--ion-color-tertiary, #f4a942);\n}\n\n:host(.ion-color-success) {\n  --ion-color-base: var(--ion-color-success, #10dc60);\n}\n\n:host(.ion-color-warning) {\n  --ion-color-base: var(--ion-color-warning, #ffce00);\n}\n\n:host(.ion-color-danger) {\n  --ion-color-base: var(--ion-color-danger, #f14141);\n}\n\n:host(.ion-color-light) {\n  --ion-color-base: var(--ion-color-light, #f4f5f8);\n}\n\n:host(.ion-color-medium) {\n  --ion-color-base: var(--ion-color-medium, #989aa2);\n}\n\n:host(.ion-color-dark) {\n  --ion-color-base: var(--ion-color-dark, #222428);\n}\n","import { Build, Host, h } from '@stencil/core';\nimport { getSvgContent, ioniconContent } from './request';\nimport { getName, getUrl, inheritAttributes, isRTL } from './utils';\nexport class Icon {\n  constructor() {\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  waitUntilVisible(el, rootMargin, cb) {\n    if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {\n      const io = (this.io = new window.IntersectionObserver((data) => {\n        if (data[0].isIntersecting) {\n          io.disconnect();\n          this.io = undefined;\n          cb();\n        }\n      }, { rootMargin }));\n      io.observe(el);\n    }\n    else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        }\n        else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n        }\n      }\n    }\n    this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n  }\n  render() {\n    const { iconName, el, inheritedAttributes } = this;\n    const mode = this.mode || 'md';\n    const flipRtl = this.flipRtl ||\n      (iconName && (iconName.indexOf('arrow') > -1 || iconName.indexOf('chevron') > -1) && this.flipRtl !== false);\n    return (h(Host, Object.assign({ role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': !!flipRtl && isRTL(el) }) }, inheritedAttributes), Build.isBrowser && this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n  }\n  static get is() { return \"ion-icon\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"icon.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"icon.css\"]\n    };\n  }\n  static get assetsDirs() { return [\"svg\"]; }\n  static get properties() {\n    return {\n      \"mode\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The mode determines which platform styles to use.\"\n        },\n        \"attribute\": \"mode\",\n        \"reflect\": false,\n        \"defaultValue\": \"getIonMode()\"\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use for the background of the item.\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": false\n      },\n      \"ios\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies which icon to use on `ios` mode.\"\n        },\n        \"attribute\": \"ios\",\n        \"reflect\": false\n      },\n      \"md\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies which icon to use on `md` mode.\"\n        },\n        \"attribute\": \"md\",\n        \"reflect\": false\n      },\n      \"flipRtl\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies whether the icon should horizontally flip when `dir` is `\\\"rtl\\\"`.\"\n        },\n        \"attribute\": \"flip-rtl\",\n        \"reflect\": false\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies which icon to use from the built-in set of icons.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": true\n      },\n      \"src\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies the exact `src` of an SVG file to use.\"\n        },\n        \"attribute\": \"src\",\n        \"reflect\": false\n      },\n      \"icon\": {\n        \"type\": \"any\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A combination of both `name` and `src`. If a `src` url is detected\\nit will set the `src` property. Otherwise it assumes it's a built-in named\\nSVG and set the `name` property.\"\n        },\n        \"attribute\": \"icon\",\n        \"reflect\": false\n      },\n      \"size\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The size of the icon.\\nAvailable options are: `\\\"small\\\"` and `\\\"large\\\"`.\"\n        },\n        \"attribute\": \"size\",\n        \"reflect\": false\n      },\n      \"lazy\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\\nDefault, `false`.\"\n        },\n        \"attribute\": \"lazy\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"sanitize\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"true\"\n            }],\n          \"text\": \"When set to `false`, SVG content that is HTTP fetched will not be checked\\nif the response SVG content has any `<script>` elements, or any attributes\\nthat start with `on`, such as `onclick`.\"\n        },\n        \"attribute\": \"sanitize\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"svgContent\": {},\n      \"isVisible\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"name\",\n        \"methodName\": \"loadIcon\"\n      }, {\n        \"propName\": \"src\",\n        \"methodName\": \"loadIcon\"\n      }, {\n        \"propName\": \"icon\",\n        \"methodName\": \"loadIcon\"\n      }, {\n        \"propName\": \"ios\",\n        \"methodName\": \"loadIcon\"\n      }, {\n        \"propName\": \"md\",\n        \"methodName\": \"loadIcon\"\n      }];\n  }\n}\nconst getIonMode = () => (Build.isBrowser && typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\nconst createColorClasses = (color) => {\n  return color\n    ? {\n      'ion-color': true,\n      [`ion-color-${color}`]: true,\n    }\n    : null;\n};\n"],"mappings":"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"}