{"version":3,"names":["ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","length","join","generateUrl","useHash","queryString","url","undefined","writeSegments","history","root","direction","state","parsePath","pushState","replaceState","chainToSegments","chain","route","segment","param","params","slice","push","removePrefix","prefix","i","readSegments","loc","pathname","hash","qsStart","indexOf","substring","split","map","trim","printRoutes","routes","console","group","forEach","r","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","async","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","result","setRouteId","element","markVisible","e","error","readNavState","node","getRouteId","waitUntilNavNode","document","body","window","addEventListener","once","OUTLET_SELECTOR","matches","querySelector","matchesRedirect","expected","findRouteRedirect","find","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","Object","keys","pathWithParams","key","j","matchesSegments","inputSegments","RouterSegments","matchesDefault","allparams","chainSegments","data","next","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForIDs","chains","match","maxMatches","_a","findChainForSegments","bestScore","matchedChain","computePriority","level","pow","constructor","this","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","component","componentProps","nodes","flattenNode","child","Router","hostRef","previousPath","busy","lastState","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","startsWith","currentPath","URL","search","parsedPath","waitPromise","warn","safeWriteNavState","win","title","location","href","redirectFrom","toSegments","unlock","lock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","ionRouteWillChange","emit","ionRouteDidChange","redirectFromSegments","redirectedFrom"],"sources":["../../node_modules/@ionic/core/dist/collection/components/router/utils/constants.js","../../node_modules/@ionic/core/dist/collection/components/router/utils/path.js","../../node_modules/@ionic/core/dist/collection/components/router/utils/debug.js","../../node_modules/@ionic/core/dist/collection/components/router/utils/dom.js","../../node_modules/@ionic/core/dist/collection/components/router/utils/matching.js","../../node_modules/@ionic/core/dist/collection/components/router/utils/parser.js","../../node_modules/@ionic/core/dist/collection/components/router/router.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const ROUTER_INTENT_NONE = 'root';\nexport const ROUTER_INTENT_FORWARD = 'forward';\nexport const ROUTER_INTENT_BACK = 'back';\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { ROUTER_INTENT_FORWARD } from './constants';\n/** Join the non empty segments with \"/\". */\nexport const generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nexport const writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nexport const chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nexport const readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nexport const parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { generatePath } from './path';\nexport const printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nexport const printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { componentOnReady } from '../../../utils/helpers';\nimport { ROUTER_INTENT_NONE } from './constants';\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nexport const writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nexport const readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nexport const waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nexport const matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nexport const findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nexport const matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nexport const matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nexport const mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nexport const findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nexport const findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nexport const computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nexport class RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { parsePath } from './path';\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nexport const readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nexport const readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nexport const readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nexport const flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n","import { debounce } from '../../utils/helpers';\nimport { ROUTER_INTENT_BACK, ROUTER_INTENT_FORWARD, ROUTER_INTENT_NONE } from './utils/constants';\nimport { printRedirects, printRoutes } from './utils/debug';\nimport { readNavState, waitUntilNavNode, writeNavState } from './utils/dom';\nimport { findChainForIDs, findChainForSegments, findRouteRedirect } from './utils/matching';\nimport { readRedirects, readRoutes } from './utils/parser';\nimport { chainToSegments, generatePath, parsePath, readSegments, writeSegments } from './utils/path';\nexport class Router {\n  constructor() {\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    this.root = '/';\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  static get is() { return \"ion-router\"; }\n  static get properties() {\n    return {\n      \"root\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The root path to use when matching URLs. By default, this is set to \\\"/\\\", but you can specify\\nan alternate prefix for all URL paths.\"\n        },\n        \"attribute\": \"root\",\n        \"reflect\": false,\n        \"defaultValue\": \"'/'\"\n      },\n      \"useHash\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The router can work in two \\\"modes\\\":\\n- With hash: `/index.html#/path/to/page`\\n- Without hash: `/path/to/page`\\n\\nUsing one or another might depend in the requirements of your app and/or where it's deployed.\\n\\nUsually \\\"hash-less\\\" navigation works better for SEO and it's more user friendly too, but it might\\nrequires additional server-side configuration in order to properly work.\\n\\nOn the other side hash-navigation is much easier to deploy, it even works over the file protocol.\\n\\nBy default, this property is `true`, change to `false` to allow hash-less URLs.\"\n        },\n        \"attribute\": \"use-hash\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionRouteWillChange\",\n        \"name\": \"ionRouteWillChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Event emitted when the route is about to change\"\n        },\n        \"complexType\": {\n          \"original\": \"RouterEventDetail\",\n          \"resolved\": \"RouterEventDetail\",\n          \"references\": {\n            \"RouterEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./utils/interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionRouteDidChange\",\n        \"name\": \"ionRouteDidChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the route had changed\"\n        },\n        \"complexType\": {\n          \"original\": \"RouterEventDetail\",\n          \"resolved\": \"RouterEventDetail\",\n          \"references\": {\n            \"RouterEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./utils/interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"canTransition\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<string | boolean>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<string | boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"push\": {\n        \"complexType\": {\n          \"signature\": \"(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"path The path to navigate to.\"\n                }],\n              \"text\": \"The path to navigate to.\"\n            }, {\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"direction The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n                }],\n              \"text\": \"The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"RouterDirection\": {\n              \"location\": \"import\",\n              \"path\": \"./utils/interface\"\n            },\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Navigate to the specified path.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"path The path to navigate to.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"direction The direction of the animation. Defaults to `\\\"forward\\\"`.\"\n            }]\n        }\n      },\n      \"back\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Go back to previous page in the window.history.\",\n          \"tags\": []\n        }\n      },\n      \"printDebug\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"navChanged\": {\n        \"complexType\": {\n          \"signature\": \"(direction: RouterDirection) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"RouterDirection\": {\n              \"location\": \"import\",\n              \"path\": \"./utils/interface\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get listeners() {\n    return [{\n        \"name\": \"popstate\",\n        \"method\": \"onPopState\",\n        \"target\": \"window\",\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"ionBackButton\",\n        \"method\": \"onBackButton\",\n        \"target\": \"document\",\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n"],"mappings":"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"}