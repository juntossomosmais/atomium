:host {
  /**
   * @prop --background: Background of the select
   * @prop --padding-top: Top padding of the select
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select
   * @prop --padding-bottom: Bottom padding of the select
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select
   *
   * @prop --placeholder-color: Color of the select placeholder text
   * @prop --placeholder-opacity: Opacity of the select placeholder text
   *
   * @prop --highlight-color-focused	The color of the highlight on the select when focused
   * @prop --highlight-color-invalid	The color of the highlight on the select when invalid
   * @prop --highlight-color-valid	The color of the highlight on the select when valid
   *
   * @prop --border-color	Color of the select border
   * @prop --border-radius	Radius of the select border
   * @prop --border-style	Style of the select border
   * @prop --border-width	Width of the select border
   *
   * @prop --ripple-color: The color of the ripple effect on MD mode.
   */
  --padding-top: 0px;
  --padding-end: 0px;
  --padding-bottom: 0px;
  --padding-start: 0px;
  --placeholder-color: currentColor;
  --placeholder-opacity: 0.6;
  --background: transparent;
  --border-style: solid;
  --highlight-color-focused: var(--ion-color-primary, #3880ff);
  --highlight-color-valid: var(--ion-color-success, #2dd36f);
  --highlight-color-invalid: var(--ion-color-danger, #eb445a);
  /**
   * This is a private API that is used to switch
   * out the highlight color based on the state
   * of the component without having to write
   * different selectors for different fill variants.
   */
  --highlight-color: var(--highlight-color-focused);
  display: block;
  position: relative;
  font-family: var(--ion-font-family, inherit);
  white-space: nowrap;
  cursor: pointer;
  z-index: 2;
}

:host(:not(.legacy-select)) {
  width: 100%;
}

:host(.ion-color) {
  --highlight-color-focused: var(--ion-color-base);
}

:host(.legacy-select) {
  -webkit-padding-start: var(--padding-start);
  padding-inline-start: var(--padding-start);
  -webkit-padding-end: var(--padding-end);
  padding-inline-end: var(--padding-end);
  padding-top: var(--padding-top);
  padding-bottom: var(--padding-bottom);
  display: flex;
  align-items: center;
  overflow: hidden;
}

:host(.in-item.legacy-select) {
  position: static;
  max-width: 45%;
}

:host(.select-disabled) {
  opacity: 0.4;
  pointer-events: none;
}

:host(.ion-focused) button {
  border: 2px solid #5e9ed6;
}

:host(.in-item[slot=start]:not(.legacy-select)),
:host(.in-item[slot=end]:not(.legacy-select)) {
  width: auto;
}

.select-placeholder {
  color: var(--placeholder-color);
  opacity: var(--placeholder-opacity);
}

:host(.legacy-select) label {
  top: 0;
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  margin-bottom: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  border: 0;
  background: transparent;
  cursor: pointer;
  appearance: none;
  outline: none;
  display: flex;
  align-items: center;
  opacity: 0;
}
@supports (inset-inline-start: 0) {
  :host(.legacy-select) label {
    inset-inline-start: 0;
  }
}
@supports not (inset-inline-start: 0) {
  :host(.legacy-select) label {
    left: 0;
  }
  :host-context([dir=rtl]):host(.legacy-select) label, :host-context([dir=rtl]).legacy-select label {
    left: unset;
    right: unset;
    right: 0;
  }
}
:host(.legacy-select) label::-moz-focus-inner {
  border: 0;
}

button {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  clip: rect(0 0 0 0);
  opacity: 0;
  overflow: hidden;
  -webkit-appearance: none;
  -moz-appearance: none;
}

.select-icon {
  -webkit-margin-start: 4px;
  margin-inline-start: 4px;
  -webkit-margin-end: 0;
  margin-inline-end: 0;
  margin-top: 0;
  margin-bottom: 0;
  position: relative;
}

/**
 * Ensure that the select icon has
 * the correct color contrast when
 * used inside of an item.
 */
:host(.in-item-color) .select-icon {
  color: inherit;
}

/**
 * The select icon should be centered with
 * the entire container not just the control
 * with floating/stacked labels.
 */
:host(.select-label-placement-stacked) .select-icon,
:host(.select-label-placement-floating) .select-icon {
  position: absolute;
  height: 100%;
}

/**
 * This positions the icon at the correct
 * edge of the component with LTR and RTL
 * text directions. The position mixin cannot be
 * used here because the icon is in the Shadow DOM.
 */
:host(.select-ltr.select-label-placement-stacked) .select-icon,
:host(.select-ltr.select-label-placement-floating) .select-icon {
  right: var(--padding-end, 0);
}

:host(.select-rtl.select-label-placement-stacked) .select-icon,
:host(.select-rtl.select-label-placement-floating) .select-icon {
  left: var(--padding-start, 0);
}

.select-text {
  flex: 1;
  min-width: 16px;
  font-size: inherit;
  text-overflow: ellipsis;
  white-space: inherit;
  overflow: hidden;
}

.select-wrapper {
  -webkit-padding-start: var(--padding-start);
  padding-inline-start: var(--padding-start);
  -webkit-padding-end: var(--padding-end);
  padding-inline-end: var(--padding-end);
  padding-top: var(--padding-top);
  padding-bottom: var(--padding-bottom);
  display: flex;
  position: relative;
  flex-grow: 1;
  align-items: center;
  height: inherit;
  /**
   * This allows developers to set the height
   * on the host of the element but still have
   * the label take up the full height
   * of the parent.
   */
  min-height: inherit;
  transition: background-color 15ms linear;
  background: var(--background);
  cursor: inherit;
  box-sizing: border-box;
}

:host(.ion-touched.ion-invalid) {
  --highlight-color: var(--highlight-color-invalid);
}

/**
 * The component highlight is only shown
 * on focus, so we can safely set the valid
 * color state when touched/valid. If we
 * set it when .has-focus is present then
 * the highlight color would change
 * from the valid color to the component's
 * color during the transition after the
 * component loses focus.
 */
:host(.ion-valid) {
  --highlight-color: var(--highlight-color-valid);
}

.label-text-wrapper {
  /**
   * This causes the label to take up
   * the entire height of its container
   * while still keeping the text centered.
   */
  display: flex;
  align-items: center;
  /**
   * Label text should not extend
   * beyond the bounds of the select.
   * However, we do not set the max
   * width to 100% because then
   * only the label would show and users
   * would not be able to see what they are typing.
   */
  max-width: 200px;
  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);
  /**
   * This ensures that double tapping this text
   * clicks the <label> and focuses the input
   * when a screen reader is enabled.
   */
  pointer-events: none;
}

/**
 * We need to use two elements instead of
 * one. The .label-text-wrapper is responsible
 * for centering the label text vertically regardless
 * of the input height using flexbox.
 *
 * The .label-text element is responsible for controlling
 * overflow when label-placement="fixed".
 * We want the ellipses to show up when the
 * fixed label overflows, but text-overflow: ellipsis only
 * works on block-level elements. A flex item is
 * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).
 */
.label-text {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.native-wrapper {
  display: flex;
  align-items: center;
  /**
   * When the floating label appears on top of the
   * input, we need to fade the input out so that the
   * label does not overlap with the placeholder.
   */
  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);
  /**
   * This ensures that the .select-text gets
   * truncated with ellipses when the text is
   * too long for the screen.
   */
  overflow: hidden;
}

:host(.select-justify-space-between) .select-wrapper {
  justify-content: space-between;
}

:host(.select-justify-start) .select-wrapper {
  justify-content: start;
}

:host(.select-justify-end) .select-wrapper {
  justify-content: end;
}

/**
 * Label is on the left of the input in LTR and
 * on the right in RTL.
 */
:host(.select-label-placement-start) .select-wrapper {
  flex-direction: row;
}

:host(.select-label-placement-start) .label-text-wrapper {
  /**
   * The margin between the label and
   * the select should be on the end
   * when the label sits at the start.
   */
  -webkit-margin-start: 0;
  margin-inline-start: 0;
  -webkit-margin-end: 8px;
  margin-inline-end: 8px;
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * Label is on the right of the select in LTR and
 * on the left in RTL.
 */
:host(.select-label-placement-end) .select-wrapper {
  flex-direction: row-reverse;
}

/**
 * The margin between the label and
 * the select should be on the start
 * when the label sits at the end.
 */
:host(.select-label-placement-end) .label-text-wrapper {
  -webkit-margin-start: 8px;
  margin-inline-start: 8px;
  -webkit-margin-end: 0;
  margin-inline-end: 0;
  margin-top: 0;
  margin-bottom: 0;
}

:host(.select-label-placement-fixed) .label-text-wrapper {
  /**
   * The margin between the label and
   * the select should be on the end
   * when the label sits at the start.
   */
  -webkit-margin-start: 0;
  margin-inline-start: 0;
  -webkit-margin-end: 8px;
  margin-inline-end: 8px;
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * Label is on the left of the select in LTR and
 * on the right in RTL. Label also has a fixed width.
 */
:host(.select-label-placement-fixed) .label-text-wrapper {
  flex: 0 0 100px;
  width: 100px;
  min-width: 100px;
  max-width: 200px;
}

/**
 * Stacked: Label sits above the select and is scaled down.
 * Floating: Label sits over the select when the select has no
 * value and is blurred. Label sits above the input and is scaled
 * down when the select is focused or has a value.
 *
 */
:host(.select-label-placement-stacked) .select-wrapper,
:host(.select-label-placement-floating) .select-wrapper {
  flex-direction: column;
  align-items: start;
}

/**
 * Ensures that the label animates
 * up and to the left in LTR or
 * up and to the right in RTL.
 */
:host(.select-label-placement-stacked) .label-text-wrapper,
:host(.select-label-placement-floating) .label-text-wrapper {
  max-width: 100%;
}

:host(.select-ltr.select-label-placement-stacked) .label-text-wrapper,
:host(.select-ltr.select-label-placement-floating) .label-text-wrapper {
  transform-origin: left top;
}

:host(.select-rtl.select-label-placement-stacked) .label-text-wrapper,
:host(.select-rtl.select-label-placement-floating) .label-text-wrapper {
  transform-origin: right top;
}

/**
 * Ensures the select does not
 * overlap the label.
 * Also ensure that the native wrapper
 * takes up the remaining available height and width.
 */
:host(.select-label-placement-stacked) .native-wrapper,
:host(.select-label-placement-floating) .native-wrapper {
  margin-left: 0;
  margin-right: 0;
  margin-top: 1px;
  margin-bottom: 0;
  flex-grow: 1;
  width: 100%;
}

/**
 * This makes the label sit over the select
 * when the select is blurred and has no value.
 * The label should not sit over the select if the
 * select has a placeholder.
 * Note: This is different from what ion-input does
 * because the activating the select causes an overlay
 * to appear. This makes it hard to read the placeholder.
 * With ion-input, the input just focuses and the placeholder
 * is still easy to read.
 */
:host(.select-label-placement-floating) .label-text-wrapper {
  transform: translateY(100%) scale(1);
}

/**
 * The select should be hidden when the label
 * is on top of the select. This prevents the label
 * from overlapping any placeholder value.
 */
:host(.select-label-placement-floating:not(.has-placeholder)) .native-wrapper .select-text {
  opacity: 0;
}

:host(.select-expanded.select-label-placement-floating) .native-wrapper .select-text,
:host(.has-value.select-label-placement-floating) .native-wrapper .select-text {
  opacity: 1;
}

/**
 * This makes the label sit above the input.
 */
:host(.select-label-placement-stacked) .label-text-wrapper,
:host(.select-expanded.select-label-placement-floating) .label-text-wrapper,
:host(.ion-focused.select-label-placement-floating) .label-text-wrapper,
:host(.has-value.select-label-placement-floating) .label-text-wrapper,
:host(.has-placeholder.select-label-placement-floating) .label-text-wrapper {
  transform: translateY(50%) scale(0.75);
  /**
   * Label text should not extend
   * beyond the bounds of the input.
   */
  max-width: calc(100% / 0.75);
}

:host(.select-fill-solid) {
  --background: var(--ion-color-step-50, #f2f2f2);
  --border-color: var(--ion-color-step-500, gray);
  --border-radius: 4px;
  --padding-start: 16px;
  --padding-end: 16px;
}

/**
 * The solid fill style has a border
 * at the bottom of the select wrapper.
 * As a result, the border on the "bottom
 * content" is not needed.
 */
:host(.select-fill-solid) .select-wrapper {
  border-bottom: var(--border-width) var(--border-style) var(--border-color);
}

/**
 * If the select has a validity state, the
 * border should reflect that as a color.
 */
:host(.has-focus.select-fill-solid.ion-valid),
:host(.select-fill-solid.ion-touched.ion-invalid) {
  --border-color: var(--highlight-color);
}

:host(.select-fill-solid) .select-bottom {
  border-top: none;
}

/**
 * Background and border should be
 * slightly darker on hover.
 */
@media (any-hover: hover) {
  :host(.select-fill-solid:hover) {
    --background: var(--ion-color-step-100, #e6e6e6);
    --border-color: var(--ion-color-step-750, #404040);
  }
}
/**
 * Background and border should be
 * much darker on focus.
 */
:host(.select-fill-solid.select-expanded),
:host(.select-fill-solid.ion-focused) {
  --background: var(--ion-color-step-150, #d9d9d9);
  --border-color: var(--ion-color-step-750, #404040);
}

:host(.select-fill-solid) .select-wrapper {
  /**
   * Only the top left and top right borders should.
   * have a radius when using a solid fill.
   */
  border-top-left-radius: var(--border-radius);
  border-top-right-radius: var(--border-radius);
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
}
:host-context([dir=rtl]):host(.select-fill-solid) .select-wrapper, :host-context([dir=rtl]).select-fill-solid .select-wrapper {
  border-top-left-radius: var(--border-radius);
  border-top-right-radius: var(--border-radius);
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
}

:host(.select-fill-solid.select-label-placement-stacked) .label-text-wrapper,
:host(.select-expanded.select-fill-solid.select-label-placement-floating) .label-text-wrapper,
:host(.ion-focused.select-fill-solid.select-label-placement-floating) .label-text-wrapper,
:host(.has-value.select-fill-solid.select-label-placement-floating) .label-text-wrapper {
  /**
   * Label text should not extend
   * beyond the bounds of the select.
   */
  max-width: calc(100% / 0.75);
}

:host(.select-fill-outline) {
  --border-color: var(--ion-color-step-300, #b3b3b3);
  --border-radius: 4px;
  --padding-start: 16px;
  --padding-end: 16px;
}

:host(.select-fill-outline.select-shape-round) {
  --border-radius: 28px;
  --padding-start: 32px;
  --padding-end: 32px;
}

/**
 * If the select has a validity state, the
 * border should reflect that as a color.
 */
:host(.has-focus.select-fill-outline.ion-valid),
:host(.select-fill-outline.ion-touched.ion-invalid) {
  --border-color: var(--highlight-color);
}

/**
 * Border should be
 * slightly darker on hover.
 */
@media (any-hover: hover) {
  :host(.select-fill-outline:hover) {
    --border-color: var(--ion-color-step-750, #404040);
  }
}
/**
 * The border should get thicker
 * and take on component color when
 * the select is focused.
 */
:host(.select-fill-outline.select-expanded),
:host(.select-fill-outline.ion-focused) {
  --border-width: 2px;
  --border-color: var(--highlight-color);
}

/**
 * The bottom content should never have
 * a border with the outline style.
 */
:host(.select-fill-outline) .select-bottom {
  border-top: none;
}

/**
 * Outline selects do not have a bottom border.
 * Instead, they have a border that wraps the
 * select + label.
 */
:host(.select-fill-outline) .select-wrapper {
  border-bottom: none;
}

:host(.select-ltr.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,
:host(.select-ltr.select-fill-outline.select-label-placement-floating) .label-text-wrapper {
  transform-origin: left top;
}

:host(.select-rtl.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,
:host(.select-rtl.select-fill-outline.select-label-placement-floating) .label-text-wrapper {
  transform-origin: right top;
}

:host(.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,
:host(.select-fill-outline.select-label-placement-floating) .label-text-wrapper {
  position: absolute;
  /**
   * Label text should not extend
   * beyond the bounds of the select.
   */
  max-width: calc(100% - var(--padding-start) - var(--padding-end));
}

/**
 * The label should appear on top of an outline
 * container that overlaps it so it is always clickable.
 */
:host(.select-fill-outline) .label-text-wrapper,
:host(.select-fill-outline) .label-text-wrapper {
  position: relative;
  z-index: 1;
}

/**
 * This makes the label sit above the select.
 */
:host(.select-expanded.select-fill-outline.select-label-placement-floating) .label-text-wrapper,
:host(.ion-focused.select-fill-outline.select-label-placement-floating) .label-text-wrapper,
:host(.has-value.select-fill-outline.select-label-placement-floating) .label-text-wrapper,
:host(.select-fill-outline.select-label-placement-stacked) .label-text-wrapper {
  transform: translateY(-32%) scale(0.75);
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  margin-bottom: 0;
  /**
   * Label text should not extend
   * beyond the bounds of the select.
   */
  max-width: calc((100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75);
}

/**
 * This ensures that the select does not
 * overlap the floating label while still
 * remaining visually centered.
 */
:host(.select-fill-outline.select-label-placement-stacked) select,
:host(.select-fill-outline.select-label-placement-floating) select {
  margin-left: 0;
  margin-right: 0;
  margin-top: 6px;
  margin-bottom: 6px;
}

:host(.select-fill-outline) .select-outline-container {
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  display: flex;
  position: absolute;
  width: 100%;
  height: 100%;
}

:host(.select-fill-outline) .select-outline-start,
:host(.select-fill-outline) .select-outline-end {
  pointer-events: none;
}

/**
 * By default, each piece of the container should have
 * a top and bottom border. This gives the appearance
 * of a unified container with a border.
 */
:host(.select-fill-outline) .select-outline-start,
:host(.select-fill-outline) .select-outline-notch,
:host(.select-fill-outline) .select-outline-end {
  border-top: var(--border-width) var(--border-style) var(--border-color);
  border-bottom: var(--border-width) var(--border-style) var(--border-color);
  /**
   * `border-box` is applied in the global
   * Ionic stylesheet, but since this is in
   * the Shadow DOM, these elements do not
   * receive the global style. The outline
   * pieces for `ion-input` do because that
   * component is in the Light DOM.
   */
  box-sizing: border-box;
}

/**
 * Ensures long labels do not cause the notch to flow
 * out of bounds.
 */
:host(.select-fill-outline) .select-outline-notch {
  max-width: calc(100% - var(--padding-start) - var(--padding-end));
}

/**
 * This element ensures that the notch used
 * the size of the scaled text so that the
 * border cut out is the correct width.
 * The text in this element should not
 * be interactive.
 */
:host(.select-fill-outline) .notch-spacer {
  /**
   * We need $select-md-floating-label-padding of padding on the right.
   * However, we also subtracted $select-md-floating-label-padding from
   * the width of .select-outline-start
   * to create space, so we need to take
   * that into consideration here.
   */
  -webkit-padding-end: 8px;
  padding-inline-end: 8px;
  font-size: calc(1em * 0.75);
  opacity: 0;
  pointer-events: none;
}

:host(.select-ltr.select-fill-outline) .select-outline-start {
  border-left: var(--border-width) var(--border-style) var(--border-color);
  border-radius: var(--border-radius) 0px 0px var(--border-radius);
}

:host(.select-rtl.select-fill-outline) .select-outline-start {
  border-right: var(--border-width) var(--border-style) var(--border-color);
  border-radius: 0px var(--border-radius) var(--border-radius) 0px;
}

:host(.select-fill-outline) .select-outline-start {
  /**
   * There should be spacing between the translated text
   * and .select-outline-start. However, we can't add this
   * spacing onto the notch because it would cause the
   * label to look like it is not aligned with the
   * text select. Instead, we subtract a few pixels from
   * this element.
   */
  width: calc(var(--padding-start) - 4px);
}

:host(.select-ltr.select-fill-outline) .select-outline-end {
  border-right: var(--border-width) var(--border-style) var(--border-color);
  border-radius: 0px var(--border-radius) var(--border-radius) 0px;
}

:host(.select-rtl.select-fill-outline) .select-outline-end {
  border-left: var(--border-width) var(--border-style) var(--border-color);
  border-radius: var(--border-radius) 0px 0px var(--border-radius);
}

:host(.select-fill-outline) .select-outline-end {
  /**
   * The ending outline fragment
   * should take up the remaining free space.
   */
  flex-grow: 1;
}

/**
 * When the select either has focus or a value,
 * there should be a "cut out" at the top for
 * the floating/stacked label. We simulate this "cut out"
 * by removing the top border from the notch fragment.
 */
:host(.select-expanded.select-fill-outline.select-label-placement-floating) .select-outline-notch,
:host(.ion-focused.select-fill-outline.select-label-placement-floating) .select-outline-notch,
:host(.has-value.select-fill-outline.select-label-placement-floating) .select-outline-notch,
:host(.select-fill-outline.select-label-placement-stacked) .select-outline-notch {
  border-top: none;
}

:host {
  --border-width: 1px;
  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));
}

:host(.legacy-select) {
  --padding-top: 10px;
  --padding-end: 0;
  --padding-bottom: 10px;
  --padding-start: 16px;
}

:host(:not(.legacy-select)) {
  min-height: 56px;
}

.select-icon {
  width: 13px;
  transition: transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);
  color: var(--ion-color-step-500, gray);
}

/**
 * When the select is focused the label should
 * take on the highlight color. This should
 * only apply to floating or stacked labels.
 */
:host(.select-label-placement-floating.select-expanded) .label-text-wrapper,
:host(.select-label-placement-floating.ion-focused) .label-text-wrapper,
:host(.select-label-placement-stacked.select-expanded) .label-text-wrapper,
:host(.select-label-placement-stacked.ion-focused) .label-text-wrapper {
  color: var(--highlight-color);
}

:host(.has-focus.select-label-placement-floating.ion-valid) .label-text-wrapper,
:host(.select-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,
:host(.has-focus.select-label-placement-stacked.ion-valid) .label-text-wrapper,
:host(.select-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {
  color: var(--highlight-color);
}

.select-highlight {
  bottom: -1px;
  position: absolute;
  width: 100%;
  height: 2px;
  transform: scale(0);
  transition: transform 200ms;
  background: var(--highlight-color);
}
@supports (inset-inline-start: 0) {
  .select-highlight {
    inset-inline-start: 0;
  }
}
@supports not (inset-inline-start: 0) {
  .select-highlight {
    left: 0;
  }
  [dir=rtl] .select-highlight, :host-context([dir=rtl]) .select-highlight {
    left: unset;
    right: unset;
    right: 0;
  }
}

:host(.select-expanded) .select-highlight,
:host(.ion-focused) .select-highlight {
  transform: scale(1);
}

/**
 * Adjust the highlight up by 1px
 * so it is not cut off by the
 * the item's line (if one is present).
 */
:host(.in-item) .select-highlight {
  bottom: 0;
}
@supports (inset-inline-start: 0) {
  :host(.in-item) .select-highlight {
    inset-inline-start: 0;
  }
}
@supports not (inset-inline-start: 0) {
  :host(.in-item) .select-highlight {
    left: 0;
  }
  :host-context([dir=rtl]):host(.in-item) .select-highlight, :host-context([dir=rtl]).in-item .select-highlight {
    left: unset;
    right: unset;
    right: 0;
  }
}

/**
 * This rotates the chevron icon
 * when the select is activated.
 * This should only happen on MD.
 */
:host(.select-expanded:not(.legacy-select)) .select-icon {
  transform: rotate(180deg);
}

/**
 * When the select is focused the icon should
 * take on the highlight color.
 * The icon should also take on the highlight
 * color if there is a validation state.
 */
:host(.select-expanded) .select-wrapper .select-icon,
:host(.has-focus.ion-valid) .select-wrapper .select-icon,
:host(.ion-touched.ion-invalid) .select-wrapper .select-icon,
:host(.ion-focused) .select-wrapper .select-icon {
  color: var(--highlight-color);
}

/**
 * Adjust the arrow so that it appears in the middle
 * of the item. If the item has fill="outline" then
 * we should adjust the entire ion-select rather than
 * just the outline so the selected value appears centered too.
 */
:host-context(.item-label-stacked) .select-icon,
:host-context(.item-label-floating:not(.item-fill-outline)) .select-icon,
:host-context(.item-label-floating.item-fill-outline) {
  transform: translate3d(0,  -9px,  0);
}

:host-context(.item-has-focus) .select-icon {
  transform: rotate(180deg);
}

/**
 * Ensure that the translation we did
 * above is preserved when we rotate the select icon.
 */
:host-context(.item-has-focus.item-label-stacked) .select-icon,
:host-context(.item-has-focus.item-label-floating:not(.item-fill-outline)) .select-icon {
  transform: translate3d(0,  -9px,  0) rotate(180deg);
}

:host(.select-shape-round) {
  --border-radius: 16px;
}