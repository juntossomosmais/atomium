"use strict";
/**
 * This is the main API for accessing the lock file functionality.
 * It encapsulates the package manager specific logic and implementation details.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLockFile = exports.getLockFileName = exports.parseLockFile = exports.lockFileHash = exports.lockFileExists = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const package_manager_1 = require("../utils/package-manager");
const workspace_root_1 = require("../utils/workspace-root");
const hashing_impl_1 = require("../hasher/hashing-impl");
const npm_parser_1 = require("./npm-parser");
const pnpm_parser_1 = require("./pnpm-parser");
const yarn_parser_1 = require("./yarn-parser");
const project_graph_pruning_1 = require("./project-graph-pruning");
const package_json_1 = require("./utils/package-json");
const YARN_LOCK_FILE = 'yarn.lock';
const NPM_LOCK_FILE = 'package-lock.json';
const PNPM_LOCK_FILE = 'pnpm-lock.yaml';
const YARN_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, YARN_LOCK_FILE);
const NPM_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, NPM_LOCK_FILE);
const PNPM_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, PNPM_LOCK_FILE);
/**
 * Check if lock file exists
 */
function lockFileExists(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
    if (packageManager === 'yarn') {
        return (0, fs_1.existsSync)(YARN_LOCK_PATH);
    }
    if (packageManager === 'pnpm') {
        return (0, fs_1.existsSync)(PNPM_LOCK_PATH);
    }
    if (packageManager === 'npm') {
        return (0, fs_1.existsSync)(NPM_LOCK_PATH);
    }
    throw new Error(`Unknown package manager ${packageManager} or lock file missing`);
}
exports.lockFileExists = lockFileExists;
/**
 * Hashes lock file content
 */
function lockFileHash(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
    let content;
    if (packageManager === 'yarn') {
        content = (0, fs_1.readFileSync)(YARN_LOCK_PATH, 'utf8');
    }
    if (packageManager === 'pnpm') {
        content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH, 'utf8');
    }
    if (packageManager === 'npm') {
        content = (0, fs_1.readFileSync)(NPM_LOCK_PATH, 'utf8');
    }
    if (content) {
        return hashing_impl_1.defaultHashing.hashArray([content]);
    }
    else {
        throw new Error(`Unknown package manager ${packageManager} or lock file missing`);
    }
}
exports.lockFileHash = lockFileHash;
/**
 * Parses lock file and maps dependencies and metadata to {@link LockFileGraph}
 */
function parseLockFile(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
    if (packageManager === 'yarn') {
        const content = (0, fs_1.readFileSync)(YARN_LOCK_PATH, 'utf8');
        return (0, yarn_parser_1.parseYarnLockfile)(content);
    }
    if (packageManager === 'pnpm') {
        const content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH, 'utf8');
        return (0, pnpm_parser_1.parsePnpmLockfile)(content);
    }
    if (packageManager === 'npm') {
        const content = (0, fs_1.readFileSync)(NPM_LOCK_PATH, 'utf8');
        return (0, npm_parser_1.parseNpmLockfile)(content);
    }
    throw new Error(`Unknown package manager: ${packageManager}`);
}
exports.parseLockFile = parseLockFile;
/**
 * Returns lock file name based on the detected package manager in the root
 * @param packageManager
 * @returns
 */
function getLockFileName(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
    if (packageManager === 'yarn') {
        return YARN_LOCK_FILE;
    }
    if (packageManager === 'pnpm') {
        return PNPM_LOCK_FILE;
    }
    if (packageManager === 'npm') {
        return NPM_LOCK_FILE;
    }
    throw new Error(`Unknown package manager: ${packageManager}`);
}
exports.getLockFileName = getLockFileName;
/**
 * Create lock file based on the root level lock file and (pruned) package.json
 *
 * @param packageJson
 * @param isProduction
 * @param packageManager
 * @returns
 */
function createLockFile(packageJson, packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
    const normalizedPackageJson = (0, package_json_1.normalizePackageJson)(packageJson);
    const content = (0, fs_1.readFileSync)(getLockFileName(packageManager), 'utf8');
    if (packageManager === 'yarn') {
        const graph = (0, yarn_parser_1.parseYarnLockfile)(content);
        const prunedGraph = (0, project_graph_pruning_1.pruneProjectGraph)(graph, packageJson);
        return (0, yarn_parser_1.stringifyYarnLockfile)(prunedGraph, content, normalizedPackageJson);
    }
    if (packageManager === 'pnpm') {
        const graph = (0, pnpm_parser_1.parsePnpmLockfile)(content);
        const prunedGraph = (0, project_graph_pruning_1.pruneProjectGraph)(graph, packageJson);
        return (0, pnpm_parser_1.stringifyPnpmLockfile)(prunedGraph, content, normalizedPackageJson);
    }
    if (packageManager === 'npm') {
        const graph = (0, npm_parser_1.parseNpmLockfile)(content);
        const prunedGraph = (0, project_graph_pruning_1.pruneProjectGraph)(graph, packageJson);
        return (0, npm_parser_1.stringifyNpmLockfile)(prunedGraph, content, normalizedPackageJson);
    }
}
exports.createLockFile = createLockFile;
//# sourceMappingURL=lock-file.js.map