import { MigrationsJson, PackageJsonUpdateForPackage } from '../config/misc-interfaces';
import { ArrayPackageGroup, PackageJson } from '../utils/package-json';
export interface ResolvedMigrationConfiguration extends MigrationsJson {
    packageGroup?: ArrayPackageGroup;
}
export declare function normalizeVersion(version: string): string;
export interface MigratorOptions {
    packageJson: PackageJson;
    getInstalledPackageVersion: (pkg: string, overrides: Record<string, string>) => string;
    fetch: (pkg: string, version: string) => Promise<ResolvedMigrationConfiguration>;
    from: {
        [pkg: string]: string;
    };
    to: {
        [pkg: string]: string;
    };
    interactive?: boolean;
}
export declare class Migrator {
    private readonly packageJson;
    private readonly getInstalledPackageVersion;
    private readonly fetch;
    private readonly installedPkgVersionOverrides;
    private readonly to;
    private readonly interactive;
    private readonly packageJsonUpdates;
    private readonly collectedVersions;
    constructor(opts: MigratorOptions);
    updatePackageJson(targetPackage: string, targetVersion: string): Promise<{
        packageJson: Record<string, PackageJsonUpdateForPackage>;
        migrations: {
            package: string;
            name: string;
            version: string;
            description?: string;
            cli?: string;
            implementation?: string;
            factory?: string;
            requires?: Record<string, string>;
        }[];
    }>;
    private createMigrateJson;
    private buildPackageJsonUpdates;
    private populatePackageJsonUpdatesAndGetPackagesToCheck;
    private getPackageJsonUpdatesFromMigrationConfig;
    /**
     * Mutates migrationConfig, adding package group updates into packageJsonUpdates section
     *
     * @param packageName Package which is being migrated
     * @param targetVersion Version which is being migrated to
     * @param migrationConfig Configuration which is mutated to contain package json updates
     * @returns Order of package groups
     */
    private getPackageJsonUpdatesFromPackageGroup;
    private filterPackageJsonUpdates;
    private addPackageJsonUpdate;
    private areRequirementsMet;
    private runPackageJsonUpdatesConfirmationPrompt;
    private getPkgVersion;
    private gt;
    private lte;
}
declare type GenerateMigrations = {
    type: 'generateMigrations';
    targetPackage: string;
    targetVersion: string;
    from: {
        [k: string]: string;
    };
    to: {
        [k: string]: string;
    };
    interactive?: boolean;
};
declare type RunMigrations = {
    type: 'runMigrations';
    runMigrations: string;
};
export declare function parseMigrationsOptions(options: {
    [k: string]: any;
}): GenerateMigrations | RunMigrations;
export declare function executeMigrations(root: string, migrations: {
    package: string;
    name: string;
    description?: string;
    version: string;
    cli?: 'nx' | 'angular';
}[], isVerbose: boolean, shouldCreateCommits: boolean, commitPrefix: string): Promise<{
    package: string;
    name: string;
    description?: string;
    version: string;
    cli?: 'nx' | 'angular';
}[]>;
export declare function migrate(root: string, args: {
    [k: string]: any;
}): Promise<any>;
export {};
