var __require=(x=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(x,{get:(a,b)=>(typeof require<"u"?require:a)[b]}):x)(function(x){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+x+'" is not supported')});import{dirname as dirname2,join as join5,parse as parse2}from"path";import fs4 from"fs-extra";import express from"express";import{logger}from"@storybook/node-logger";import{globalExternals}from"@fal-works/esbuild-plugin-global-externals";import{pnpPlugin}from"@yarnpkg/esbuild-plugin-pnp";import aliasPlugin from"esbuild-plugin-alias";import{stringifyProcessEnvs}from"@storybook/core-common";import path,{dirname,join}from"path";import fs from"fs-extra";import{render}from"ejs";var getTemplatePath=async template=>join(dirname(__require.resolve("@storybook/builder-manager/package.json")),"templates",template),readTemplate=async template=>{let path2=await getTemplatePath(template);return fs.readFile(path2,"utf8")};var renderHTML=async(template,title,favicon,customHead,cssFiles,jsFiles,features,refs,logLevel,docsOptions,{versionCheck,releaseNotesData,previewUrl,serverChannelUrl,configType})=>{let customHeadRef=await customHead,titleRef=await title,templateRef=await template;return render(templateRef,{title:titleRef?`${titleRef} - Storybook`:"Storybook",files:{js:jsFiles,css:cssFiles},favicon:await favicon,globals:{FEATURES:JSON.stringify(await features,null,2),REFS:JSON.stringify(await refs,null,2),LOGLEVEL:JSON.stringify(await logLevel,null,2),DOCS_OPTIONS:JSON.stringify(await docsOptions,null,2),CONFIG_TYPE:JSON.stringify(await configType,null,2),VERSIONCHECK:JSON.stringify(JSON.stringify(versionCheck),null,2),RELEASE_NOTES_DATA:JSON.stringify(JSON.stringify(releaseNotesData),null,2),PREVIEW_URL:JSON.stringify(previewUrl,null,2),SERVER_CHANNEL_URL:JSON.stringify(serverChannelUrl,null,2)},head:customHeadRef?await fs.readFile(customHeadRef,"utf8"):""})};import{definitions}from"@storybook/manager/dist/globals";import findCacheDirectory from"find-cache-dir";import fs2 from"fs-extra";import{join as join2,parse,relative,sep}from"path";function slash(path2){return/^\\\\\?\\/.test(path2)?path2:path2.replace(/\\/g,"/")}var sanitizeBase=path2=>path2.replaceAll(".","").replaceAll("@","").replaceAll(sep,"-").replaceAll("/","-"),sanitizeFinal=path2=>{let sections=path2.split(/-?node_modules-?/);return sections[sections.length-1].replaceAll("storybook-addon-","").replaceAll("dist-","")};async function wrapManagerEntries(entrypoints){return Promise.all(entrypoints.map(async(entry,i)=>{let{name,dir}=parse(entry),cacheLocation=findCacheDirectory({name:"sb-manager"});if(!cacheLocation)throw new Error("Could not create/find cache directory");let base=relative(process.cwd(),dir),location=join2(cacheLocation,sanitizeFinal(join2(`${sanitizeBase(base)}-${i}`,`${sanitizeBase(name)}-bundle.mjs`)));return await fs2.ensureFile(location),await fs2.writeFile(location,`import '${slash(entry)}';`),location}))}import{basename,join as join3}from"path";import{getRefs}from"@storybook/core-common";var safeResolve=path2=>{try{return Promise.resolve(__require.resolve(path2))}catch{return Promise.resolve(!1)}};var getData=async options=>{let refs=getRefs(options),favicon=options.presets.apply("favicon").then(p=>basename(p)),features=options.presets.apply("features"),logLevel=options.presets.apply("logLevel"),title=options.presets.apply("title"),docsOptions=options.presets.apply("docs",{}),template=readTemplate("template.ejs"),customHead=safeResolve(join3(options.configDir,"manager-head.html")),[instance,config]=await Promise.all([executor.get(),getConfig(options)]);return{refs,features,title,docsOptions,template,customHead,instance,config,logLevel,favicon}};import fs3 from"fs-extra";import{join as join4,normalize}from"path";async function readOrderedFiles(addonsDir,outputFiles){let files=await Promise.all(outputFiles?.map(async file=>{let{location,url}=sanitizePath(file,addonsDir);return await fs3.ensureFile(location),await fs3.writeFile(location,file.contents),url})||[]),jsFiles=files.filter(file=>file.endsWith(".mjs"));return{cssFiles:files.filter(file=>file.endsWith(".css")),jsFiles}}function sanitizePath(file,addonsDir){let filePath=file.path.replace(addonsDir,""),location=normalize(join4(addonsDir,filePath)),url=`./sb-addons${slash(filePath).split("/").map(encodeURIComponent).join("/")}`;return{location,url}}var compilation,asyncIterator,getConfig=async options=>{let[addonsEntryPoints,customManagerEntryPoint,tsconfigPath,envs]=await Promise.all([options.presets.apply("managerEntries",[]),safeResolve(join5(options.configDir,"manager")),getTemplatePath("addon.tsconfig.json"),options.presets.apply("env")]),entryPoints=customManagerEntryPoint?[...addonsEntryPoints,customManagerEntryPoint]:addonsEntryPoints;return{entryPoints:await wrapManagerEntries(entryPoints),outdir:join5(options.outputDir||"./","sb-addons"),format:"esm",write:!1,ignoreAnnotations:!0,resolveExtensions:[".ts",".tsx",".mjs",".js",".jsx"],outExtension:{".js":".mjs"},loader:{".js":"jsx",".png":"dataurl",".gif":"dataurl",".jpg":"dataurl",".jpeg":"dataurl",".svg":"dataurl",".webp":"dataurl",".webm":"dataurl",".woff2":"dataurl"},target:["chrome100"],platform:"browser",bundle:!0,minify:!0,sourcemap:!0,conditions:["browser","module","default"],jsxFactory:"React.createElement",jsxFragment:"React.Fragment",jsx:"transform",jsxImportSource:"react",tsconfig:tsconfigPath,legalComments:"external",plugins:[aliasPlugin({process:__require.resolve("process/browser.js"),util:__require.resolve("util/util.js"),assert:__require.resolve("browser-assert")}),globalExternals(definitions),pnpPlugin()],banner:{js:"try{"},footer:{js:'}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }'},define:{"process.env":JSON.stringify(envs),...stringifyProcessEnvs(envs),global:"window",module:"{}"}}},executor={get:async()=>{let{build:build2}=await import("esbuild");return build2}},starter=async function*({startTime,options,router}){logger.info("=> Starting manager..");let{config,favicon,customHead,features,instance,refs,template,title,logLevel,docsOptions}=await getData(options);yield;let addonsDir=config.outdir;await fs4.remove(addonsDir),yield,compilation=await instance({...config}),yield;let coreDirOrigin=join5(dirname2(__require.resolve("@storybook/manager/package.json")),"dist");router.use("/sb-addons",express.static(addonsDir,{immutable:!0,maxAge:"5m"})),router.use("/sb-manager",express.static(coreDirOrigin,{immutable:!0,maxAge:"5m"}));let{cssFiles,jsFiles}=await readOrderedFiles(addonsDir,compilation?.outputFiles);yield;let html=await renderHTML(template,title,favicon,customHead,cssFiles,jsFiles,features,refs,logLevel,docsOptions,options);return yield,router.use("/",({path:path2},res,next)=>{path2==="/"?res.status(200).send(html):next()}),{bail,stats:{toJson:()=>({})},totalTime:process.hrtime(startTime)}},builder=async function*({startTime,options}){if(!options.outputDir)throw new Error("outputDir is required");logger.info("=> Building manager..");let{config,customHead,favicon,features,instance,refs,template,title,logLevel,docsOptions}=await getData(options);yield;let addonsDir=config.outdir,coreDirOrigin=join5(dirname2(__require.resolve("@storybook/manager/package.json")),"dist"),coreDirTarget=join5(options.outputDir,"sb-manager");compilation=await instance({...config,minify:!0}),yield;let managerFiles=fs4.copy(coreDirOrigin,coreDirTarget,{filter:src=>{let{ext}=parse2(src);return ext?ext===".mjs":!0}}),{cssFiles,jsFiles}=await readOrderedFiles(addonsDir,compilation?.outputFiles);yield;let html=await renderHTML(template,title,favicon,customHead,cssFiles,jsFiles,features,refs,logLevel,docsOptions,options);return await Promise.all([fs4.writeFile(join5(options.outputDir,"index.html"),html),managerFiles]),logger.trace({message:"=> Manager built",time:process.hrtime(startTime)}),{toJson:()=>({})}},bail=async()=>{if(asyncIterator)try{await asyncIterator.throw(new Error)}catch{}},start=async options=>{asyncIterator=starter(options);let result;do result=await asyncIterator.next();while(!result.done);return result.value},build=async options=>{asyncIterator=builder(options);let result;do result=await asyncIterator.next();while(!result.done);return result.value},corePresets=[],overridePresets=[];export{bail,build,corePresets,executor,getConfig,overridePresets,start};
