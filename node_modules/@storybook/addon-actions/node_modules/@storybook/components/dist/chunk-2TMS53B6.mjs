import{__commonJS}from"./chunk-NNAAFZ4U.mjs";var require_naniscript=__commonJS({"../../node_modules/refractor/lang/naniscript.js"(exports,module){module.exports=naniscript;naniscript.displayName="naniscript";naniscript.aliases=[];function naniscript(Prism){(function(Prism2){var expressionDef=/\{[^\r\n\[\]{}]*\}/,params={"quoted-string":{pattern:/"(?:[^"\\]|\\.)*"/,alias:"operator"},"command-param-id":{pattern:/(\s)\w+:/,lookbehind:!0,alias:"property"},"command-param-value":[{pattern:expressionDef,alias:"selector"},{pattern:/([\t ])\S+/,lookbehind:!0,greedy:!0,alias:"operator"},{pattern:/\S(?:.*\S)?/,alias:"operator"}]};Prism2.languages.naniscript={comment:{pattern:/^([\t ]*);.*/m,lookbehind:!0},define:{pattern:/^>.+/m,alias:"tag",inside:{value:{pattern:/(^>\w+[\t ]+)(?!\s)[^{}\r\n]+/,lookbehind:!0,alias:"operator"},key:{pattern:/(^>)\w+/,lookbehind:!0}}},label:{pattern:/^([\t ]*)#[\t ]*\w+[\t ]*$/m,lookbehind:!0,alias:"regex"},command:{pattern:/^([\t ]*)@\w+(?=[\t ]|$).*/m,lookbehind:!0,alias:"function",inside:{"command-name":/^@\w+/,expression:{pattern:expressionDef,greedy:!0,alias:"selector"},"command-params":{pattern:/\s*\S[\s\S]*/,inside:params}}},"generic-text":{pattern:/(^[ \t]*)[^#@>;\s].*/m,lookbehind:!0,alias:"punctuation",inside:{"escaped-char":/\\[{}\[\]"]/,expression:{pattern:expressionDef,greedy:!0,alias:"selector"},"inline-command":{pattern:/\[[\t ]*\w[^\r\n\[\]]*\]/,greedy:!0,alias:"function",inside:{"command-params":{pattern:/(^\[[\t ]*\w+\b)[\s\S]+(?=\]$)/,lookbehind:!0,inside:params},"command-param-name":{pattern:/^(\[[\t ]*)\w+/,lookbehind:!0,alias:"name"},"start-stop-char":/[\[\]]/}}}}},Prism2.languages.nani=Prism2.languages.naniscript,Prism2.hooks.add("after-tokenize",function(env){var tokens=env.tokens;tokens.forEach(function(token){if(typeof token!="string"&&token.type==="generic-text"){var content=getTextContent(token);isBracketsBalanced(content)||(token.type="bad-line",token.content=content)}})});function isBracketsBalanced(input){for(var brackets="[]{}",stack=[],i=0;i<input.length;i++){var bracket=input[i],bracketsIndex=brackets.indexOf(bracket);if(bracketsIndex!==-1){if(bracketsIndex%2===0)stack.push(bracketsIndex+1);else if(stack.pop()!==bracketsIndex)return!1}}return stack.length===0}function getTextContent(token){return typeof token=="string"?token:Array.isArray(token)?token.map(getTextContent).join(""):getTextContent(token.content)}})(Prism)}}});export{require_naniscript};
