import{defaultStaticDirs,parseStaticDir}from"../chunk-SB2Y5Y74.mjs";import{__require}from"../chunk-GYZG6JM4.mjs";import{pathExists,readFile}from"fs-extra";import{deprecate,logger}from"@storybook/node-logger";import{getDirectoryFromWorkingDir,getPreviewBodyTemplate,getPreviewHeadTemplate,loadEnvs}from"@storybook/core-common";import{loadCsf}from"@storybook/csf-tools";import{join}from"path";import{dedent}from"ts-dedent";var defaultFavicon=__require.resolve("@storybook/core-server/public/favicon.svg"),staticDirs=async(values=[])=>[...defaultStaticDirs,...values],favicon=async(value,options)=>{if(value)return value;let staticDirsValue=await options.presets.apply("staticDirs"),statics=staticDirsValue?staticDirsValue.map(dir=>typeof dir=="string"?dir:`${dir.from}:${dir.to}`):options.staticDir;if(statics&&statics.length>0){let flatlist=(await Promise.all(statics.map(async dir=>{let results=[],relativeDir=staticDirsValue?getDirectoryFromWorkingDir({configDir:options.configDir,workingDir:process.cwd(),directory:dir}):dir,{staticPath,targetEndpoint}=await parseStaticDir(relativeDir);if(targetEndpoint==="/"){let path=join(staticPath,"favicon.svg");await pathExists(path)&&results.push(path)}if(targetEndpoint==="/"){let path=join(staticPath,"favicon.ico");await pathExists(path)&&results.push(path)}return results}))).reduce((l1,l2)=>l1.concat(l2),[]);return flatlist.length>1&&logger.warn(dedent`
        Looks like multiple favicons were detected. Using the first one.
        
        ${flatlist.join(", ")}
        `),flatlist[0]||defaultFavicon}return defaultFavicon},babel=async(_,options)=>{let{presets}=options;return presets.apply("babelDefault",{},options)},title=(previous,options)=>previous||options.packageJson.name||!1,logLevel=(previous,options)=>previous||options.loglevel||"info",previewHead=async(base,{configDir,presets})=>{let interpolations=await presets.apply("env");return getPreviewHeadTemplate(configDir,interpolations)},env=async()=>loadEnvs({production:!0}).raw,previewBody=async(base,{configDir,presets})=>{let interpolations=await presets.apply("env");return getPreviewBodyTemplate(configDir,interpolations)},typescript=()=>({check:!1,reactDocgen:"react-docgen-typescript",reactDocgenTypescriptOptions:{shouldExtractLiteralValuesFromEnum:!0,shouldRemoveUndefinedFromOptional:!0,propFilter:prop=>prop.parent?!/node_modules/.test(prop.parent.fileName):!0,savePropValueAsString:!0}}),optionalEnvToBoolean=input=>{if(input!==void 0){if(input.toUpperCase()==="FALSE")return!1;if(input.toUpperCase()==="TRUE"||typeof input=="string")return!0}},core=async(existing,options)=>({...existing,disableTelemetry:options.disableTelemetry===!0,enableCrashReports:options.enableCrashReports||optionalEnvToBoolean(process.env.STORYBOOK_ENABLE_CRASH_REPORTS)}),previewAnnotations=async(base,options)=>{let config=await options.presets.apply("config",[],options);return config.length>0&&deprecate("You (or an addon) are using the 'config' preset field. This has been replaced by 'previewAnnotations' and will be removed in 8.0"),[...config,...base]},features=async existing=>({...existing,warnOnLegacyHierarchySeparator:!0,buildStoriesJson:!1,storyStoreV7:!0,argTypeTargetsV7:!0,legacyDecoratorFileOrder:!1}),storyIndexers=async indexers=>[{test:/(stories|story)\.[tj]sx?$/,indexer:async(fileName,opts)=>{let code=(await readFile(fileName,"utf-8")).toString();return loadCsf(code,{...opts,fileName}).parse()}},...indexers||[]],frameworkOptions=async(_,options)=>{let config=await options.presets.apply("framework");return typeof config=="string"?{}:typeof config>"u"?null:config.options},docs=(docsOptions,{docs:docsMode})=>({...docsOptions,docsMode});export{babel,core,docs,env,favicon,features,frameworkOptions,logLevel,previewAnnotations,previewBody,previewHead,staticDirs,storyIndexers,title,typescript};
