{"version":3,"file":"components-input-stories-input-core-stories.ba830252.iframe.bundle.js","mappings":";;AAaA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA","sources":["webpack://@atomium/docs/../../packages/core/src/components/input/stories/input.core.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from '@storybook/web-components'\nimport { html } from 'lit'\n\nimport { InputComponentArgs, InputStoryArgs } from './input.args'\n\nexport default {\n  title: 'Components/Input',\n  ...InputStoryArgs,\n} as Meta\n\nconst createInput = (args) => {\n  return html`\n    <atom-input\n      required=${args.required}\n      label=\"Label example\"\n      placeholder=\"Placeholder Text\"\n      clear-input=${args.clearInput}\n      color=${args.color}\n      disabled=${args.disabled}\n      fill=${args.fill}\n      label-placement=${args.labelPlacement}\n      mode=${args.mode}\n      readonly=${args.readonly}\n      shape=${args.shape}\n      type=${args.type}\n      password-toggle=${args.passwordToggle}\n      value=${args.value}\n      icon=${args.icon}\n      helper-text=${args.helperText}\n    ></atom-input>\n  `\n}\n\nexport const Default: StoryObj = {\n  render: (args) => createInput(args),\n  args: {\n    ...InputComponentArgs,\n  },\n}\n\nexport const Password: StoryObj = {\n  render: (args) => createInput(args),\n  args: {\n    ...InputComponentArgs,\n    type: 'password',\n    passwordToggle: true,\n  },\n}\n\nexport const Disabled: StoryObj = {\n  render: (args) => createInput(args),\n  args: {\n    ...InputComponentArgs,\n    disabled: true,\n  },\n}\n\nexport const InputIcon: StoryObj = {\n  render: (args) => createInput(args),\n  args: {\n    ...InputComponentArgs,\n    icon: 'magnify',\n  },\n}\n\nexport const HelperText: StoryObj = {\n  render: (args) => createInput(args),\n  args: {\n    ...InputComponentArgs,\n    helperText: 'This is a helper text example',\n  },\n}\n\nexport const ErrorState: StoryObj = {\n  render: () => html`\n    <atom-input\n      class=\"atom-input--error-example\"\n      label=\"Email\"\n      placeholder=\"Enter a valid email\"\n      helper-text=\"Example: atomium@juntossomosmais.com.br\"\n      error-text=\"Invalid email\"\n      value=\"invalid-email\"\n      has-error=\"true\"\n      type=\"email\"\n    ></atom-input>\n\n    <script>\n      ;(function () {\n        const inputEl = document.querySelector('.atom-input--error-example')\n        inputEl.addEventListener('atomChange', function (ev) {\n          validate(ev.target.value)\n        })\n\n        function validateEmail(email) {\n          return email.match(/[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$/)\n        }\n\n        function validate(value) {\n          const hasError = value !== '' && !validateEmail(value)\n          inputEl.setAttribute('has-error', hasError)\n        }\n      })()\n    </script>\n  `,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'To check this behavior working you need to look the [canvas of component](/story/components-input--error-text)',\n      },\n    },\n  },\n}\n"],"names":[],"sourceRoot":""}