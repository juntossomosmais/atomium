"use strict";(globalThis.webpackChunk_atomium_docs_react=globalThis.webpackChunk_atomium_docs_react||[]).push([[1233],{"../../node_modules/@storybook/addon-actions/dist/decorator.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>withActions});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id="object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}var actions=(...args)=>{let options=config,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...config,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=action(namesObject[name],options)})),actionsObject},{document:decorator_document,Element}=external_STORYBOOK_MODULE_GLOBAL_.global,delegateEventSplitter=/^(\S+)\s*(.*)$/,matchesMethod=null!=Element&&!Element.prototype.matches?"msMatchesSelector":"matches",hasMatchInAncestry=(element,selector)=>{if(element[matchesMethod](selector))return!0;let parent=element.parentElement;return!!parent&&hasMatchInAncestry(parent,selector)},applyEventHandlers=(actionsFn,...handles)=>{let root=decorator_document&&decorator_document.getElementById("storybook-root");(0,external_STORYBOOK_MODULE_PREVIEW_API_.useEffect)((()=>{if(null!=root){let handlers=((actionsFn,...handles)=>{let actionsObject=actionsFn(...handles);return Object.entries(actionsObject).map((([key,action])=>{let[_,eventName,selector]=key.match(delegateEventSplitter)||[];return{eventName,handler:e=>{(!selector||hasMatchInAncestry(e.target,selector))&&action(e)}}}))})(actionsFn,...handles);return handlers.forEach((({eventName,handler})=>root.addEventListener(eventName,handler))),()=>handlers.forEach((({eventName,handler})=>root.removeEventListener(eventName,handler)))}}),[root,actionsFn,handles])},withActions=(0,external_STORYBOOK_MODULE_PREVIEW_API_.makeDecorator)({name:"withActions",parameterName:"actions",skipIfNoParametersOrOptions:!0,wrapper:(getStory,context,{parameters})=>(parameters?.handles&&applyEventHandlers(actions,...parameters.handles),getStory(context))})},"../../packages/core/src/components/datetime/stories/datetime.react.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AdvancedDateConstraints:()=>AdvancedDateConstraints,Default:()=>Default,HighlightingSpecificDatesArray:()=>HighlightingSpecificDatesArray,HighlightingSpecificDatesCallback:()=>HighlightingSpecificDatesCallback,UsingRangeMode:()=>UsingRangeMode,UsingWithButton:()=>UsingWithButton,WithMultipleDates:()=>WithMultipleDates,__namedExportsOrder:()=>__namedExportsOrder,default:()=>datetime_react_stories});var esm=__webpack_require__("../../packages/core/react/dist/esm/index.js"),react=__webpack_require__("../../node_modules/react/index.js"),table=__webpack_require__("../../utils/storybook/enums/table.ts");const datetime_react_stories={title:"Components/Datetime",...{parameters:{docs:{description:{component:"Wrapper of Ionic Datetime component. Read the [Ionic documentation](https://ionicframework.com/docs/api/datetime) for more information about the available properties and possibilities."}},actions:{handles:["atomChange","atomFocus","atomBlur","atomCancel","atom-change","atom-focus","atom-blur","atom-cancel"]}},decorators:[__webpack_require__("../../node_modules/@storybook/addon-actions/dist/decorator.mjs").w],argTypes:{label:{control:"string",description:"The text of label when `useButton` prop is true."},cancelText:{control:"text",description:"The text to display on the cancel button."},clearText:{control:"text",description:"The text to display on the clear button."},datetimeId:{control:"text",defaultValue:{summary:"datetime"},description:"The id of the datetime."},dayValues:{control:"text",description:"The days that should be shown."},disabled:{control:"boolean",description:"If true, the user cannot interact with the datetime."},doneText:{control:"text",description:"The text to display on the done button."},formatOptions:{control:"object",description:"The options to pass to the Intl.DateTimeFormat object.",defaultValue:{summary:'{ date: { month: "2-digit", day: "2-digit", year: "numeric" }, time: { hour: "2-digit", minute: "2-digit" } }'},table:{type:{summary:"Intl.DateTimeFormatOptions"}}},highlightedDates:{control:"function",description:"Used to apply custom text and background colors to specific dates.",table:{type:{summary:"[{ date: string; textColor: string; backgroundColor: string; }] | (date: string) => { color: string; backgroundColor: string; }"}}},hourCycle:{control:"select",defaultValue:"h23",options:["h12","h23"],description:"The hour cycle of the datetime."},hourValues:{control:"text",description:"The hours that should be shown."},isDateEnabled:{control:"function",description:"A function that receives a date string and returns a boolean indicating if the date is enabled.",table:{type:{summary:"(dateString: string) => boolean"}}},locale:{control:"text",defaultValue:"pt-BR",description:"The locale to use for the datetime."},max:{control:"text",description:"The maximum datetime allowed."},min:{control:"text",description:"The minimum datetime allowed."},minuteValues:{control:"text",description:"The minutes that should be shown."},monthValues:{control:"text",description:"The months that should be shown."},multiple:{control:"boolean",description:"If true, the datetime allows multiple values."},name:{control:"text",description:"The name of the control, which is submitted with the form data."},presentation:{control:"select",defaultValue:{summary:"date"},options:["date","time","month-year","month","year"],description:"The presentation of the datetime."},rangeMode:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the datetime is in range mode."},readonly:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the datetime is readonly."},showClearButton:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the clear button is shown."},showDefaultButtons:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the default buttons are shown."},showDefaultTimeLabel:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the default time label is shown."},showDefaultTitle:{control:"boolean",defaultValue:{summary:"false"},description:"If true, the default title is shown."},size:{control:"select",defaultValue:{summary:"fixed"},options:["fixed","cover"],description:"If cover, the datetime will expand to cover the full width of its container. If fixed, the datetime will have a fixed width."},title:{control:"text",description:"The title of the datetime. If not provided, the title will be hidden.",table:{category:table.b.SLOTS}},timeLabel:{control:"text",description:"The time label of the datetime. If not provided, the time label will be hidden.",table:{category:table.b.SLOTS}},useButton:{control:"boolean",description:"If true, the datetime uses a button."},value:{control:"text",description:"The value of the datetime."},yearValues:{control:"text",description:"The years that should be shown."}}}},Default={render:args=>react.createElement(esm.Th,{cancelText:args.cancelText,clearText:args.clearText,disabled:args.disabled,doneText:args.doneText,"hour-cycle":args.hourCycle,locale:args.locale,max:args.max,min:args.min,multiple:args.multiple,name:args.name,presentation:args.presentation,readonly:args.readonly,showClearButton:args.showClearButton,showDefaultButtons:args.showDefaultButtons,showDefaultTimeLabel:args.showDefaultTimeLabel,showDefaultTitle:args.showDefaultTitle,size:args.size,useButton:args.useButton,value:args.value},react.createElement("span",{slot:"time-label"},args.timeLabel),react.createElement("span",{slot:"title"},args.title)),args:{...{cancelText:"Cancelar",clearText:"Limpar",dayValues:void 0,disabled:!1,doneText:"Confirmar",hourCycle:"h23",hourValues:void 0,locale:"pt-BR",max:void 0,min:void 0,minuteValues:void 0,monthValues:void 0,multiple:!1,name:"datetime",presentation:"date",rangeMode:!1,readonly:!1,showClearButton:!1,showDefaultButtons:!1,showDefaultTimeLabel:!1,showDefaultTitle:!1,size:"fixed",useButton:!1,value:void 0,yearValues:void 0}}},AdvancedDateConstraints={render:args=>react.createElement(esm.Th,{isDateEnabled:args.isDateEnabled}),args:{isDateEnabled:dateString=>{const utcDay=new Date(dateString).getUTCDay();return 0!==utcDay&&6!==utcDay}},parameters:{docs:{description:{story:"This story shows how to use the `isDateEnabled` property to disable weekends using the following logic: `\nconst date = new Date(dateString);\nconst utcDay = date.getUTCDay();\nreturn utcDay !== 0 && utcDay !== 6;`"}}}},HighlightingSpecificDatesArray={render:args=>react.createElement(esm.Th,{highlightedDates:args.highlightedDates,value:"2025-01-01"}),args:{highlightedDates:[{date:"2025-01-05",textColor:"#800080",backgroundColor:"#ffc0cb"},{date:"2025-01-10",textColor:"#09721b",backgroundColor:"#c8e5d0"},{date:"2025-01-23",textColor:"rgb(68, 10, 184)",backgroundColor:"rgb(211, 200, 229)"}]},parameters:{docs:{description:{story:"This story shows how to use the `highlightedDates` property with an array to highlight specific dates."}}}},HighlightingSpecificDatesCallback={render:args=>react.createElement(esm.Th,{highlightedDates:args.highlightedDates}),args:{highlightedDates:dateString=>{if(new Date(dateString).getUTCDate()%5==0)return{textColor:"#800080",backgroundColor:"#ffc0cb"}}},parameters:{docs:{description:{story:'This story shows how to use the `highlightedDates` property with a callback function to highlight dates based on custom logic using the following logic: `\nconst date = new Date(dateString);\nconst day = date.getUTCDate();\nif (day % 5 === 0) {\n  return {\n    textColor: "#800080",\n    backgroundColor: "#ffc0cb",\n  };\n}\nreturn undefined;`'}}}},WithMultipleDates={render:()=>react.createElement(esm.Th,{multiple:!0})},UsingRangeMode={render:()=>react.createElement(esm.Th,{rangeMode:!0})},UsingWithButton={render:()=>react.createElement(esm.A9,null,react.createElement(esm.u7,{size:"8"},react.createElement(esm.Th,{useButton:!0,label:"Selecione uma data",datetimeId:"datetime-with-button-date",presentation:"date"})),react.createElement(esm.u7,{size:"8"},react.createElement(esm.Th,{useButton:!0,label:"Selecione uma hora",datetimeId:"datetime-with-button-time",presentation:"time"})),react.createElement(esm.u7,{size:"8"},react.createElement(esm.Th,{useButton:!0,label:"Selecione um mês e ano",datetimeId:"datetime-with-button-year-month",presentation:"month-year",formatOptions:{date:{month:"long",year:"numeric"}}})))},__namedExportsOrder=["Default","AdvancedDateConstraints","HighlightingSpecificDatesArray","HighlightingSpecificDatesCallback","WithMultipleDates","UsingRangeMode","UsingWithButton"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => <AtomDatetime cancelText={args.cancelText} clearText={args.clearText} disabled={args.disabled} doneText={args.doneText} hour-cycle={args.hourCycle} locale={args.locale} max={args.max} min={args.min} multiple={args.multiple} name={args.name} presentation={args.presentation} readonly={args.readonly} showClearButton={args.showClearButton} showDefaultButtons={args.showDefaultButtons} showDefaultTimeLabel={args.showDefaultTimeLabel} showDefaultTitle={args.showDefaultTitle} size={args.size} useButton={args.useButton} value={args.value}>\n      <span slot='time-label'>{args.timeLabel}</span>\n      <span slot='title'>{args.title}</span>\n    </AtomDatetime>,\n  args: {\n    ...DatetimeComponentArgs\n  }\n}",...Default.parameters?.docs?.source}}},AdvancedDateConstraints.parameters={...AdvancedDateConstraints.parameters,docs:{...AdvancedDateConstraints.parameters?.docs,source:{originalSource:"{\n  render: args => <AtomDatetime isDateEnabled={args.isDateEnabled} />,\n  args: {\n    isDateEnabled: dateString => {\n      const date = new Date(dateString);\n      const utcDay = date.getUTCDay();\n      return utcDay !== 0 && utcDay !== 6;\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: DatetimeExampleTexts.advancedDateConstraints\n      }\n    }\n  }\n}",...AdvancedDateConstraints.parameters?.docs?.source}}},HighlightingSpecificDatesArray.parameters={...HighlightingSpecificDatesArray.parameters,docs:{...HighlightingSpecificDatesArray.parameters?.docs,source:{originalSource:"{\n  render: args => <AtomDatetime highlightedDates={args.highlightedDates} value='2025-01-01' />,\n  args: {\n    highlightedDates: [{\n      date: '2025-01-05',\n      textColor: '#800080',\n      backgroundColor: '#ffc0cb'\n    }, {\n      date: '2025-01-10',\n      textColor: '#09721b',\n      backgroundColor: '#c8e5d0'\n    }, {\n      date: '2025-01-23',\n      textColor: 'rgb(68, 10, 184)',\n      backgroundColor: 'rgb(211, 200, 229)'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: DatetimeExampleTexts.highlightingSpecificDatesArray\n      }\n    }\n  }\n}",...HighlightingSpecificDatesArray.parameters?.docs?.source}}},HighlightingSpecificDatesCallback.parameters={...HighlightingSpecificDatesCallback.parameters,docs:{...HighlightingSpecificDatesCallback.parameters?.docs,source:{originalSource:"{\n  render: args => <AtomDatetime highlightedDates={args.highlightedDates} />,\n  args: {\n    highlightedDates: dateString => {\n      const date = new Date(dateString);\n      const day = date.getUTCDate();\n      if (day % 5 === 0) {\n        return {\n          textColor: '#800080',\n          backgroundColor: '#ffc0cb'\n        };\n      }\n      return undefined;\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: DatetimeExampleTexts.highlightingSpecificDatesCallback\n      }\n    }\n  }\n}",...HighlightingSpecificDatesCallback.parameters?.docs?.source}}},WithMultipleDates.parameters={...WithMultipleDates.parameters,docs:{...WithMultipleDates.parameters?.docs,source:{originalSource:"{\n  render: () => <AtomDatetime multiple={true} />\n}",...WithMultipleDates.parameters?.docs?.source}}},UsingRangeMode.parameters={...UsingRangeMode.parameters,docs:{...UsingRangeMode.parameters?.docs,source:{originalSource:"{\n  render: () => <AtomDatetime rangeMode={true} />\n}",...UsingRangeMode.parameters?.docs?.source}}},UsingWithButton.parameters={...UsingWithButton.parameters,docs:{...UsingWithButton.parameters?.docs,source:{originalSource:"{\n  render: () => <AtomGrid>\n      <AtomCol size='8'>\n        <AtomDatetime useButton={true} label='Selecione uma data' datetimeId='datetime-with-button-date' presentation='date' />\n      </AtomCol>\n      <AtomCol size='8'>\n        <AtomDatetime useButton={true} label='Selecione uma hora' datetimeId='datetime-with-button-time' presentation='time' />\n      </AtomCol>\n      <AtomCol size='8'>\n        <AtomDatetime useButton={true} label='Selecione um mês e ano' datetimeId='datetime-with-button-year-month' presentation='month-year' formatOptions={{\n        date: {\n          month: 'long',\n          year: 'numeric'\n        }\n      }} />\n      </AtomCol>\n    </AtomGrid>\n}",...UsingWithButton.parameters?.docs?.source}}}},"../../utils/storybook/enums/table.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{b:()=>Category});let Category=function(Category){return Category.CSS_CUSTOM_PROPERTIES="CSS Custom Properties",Category.EVENTS="Events",Category.METHODS="Methods",Category.PROPERTIES="Properties",Category.SLOTS="Slots",Category}({})}}]);