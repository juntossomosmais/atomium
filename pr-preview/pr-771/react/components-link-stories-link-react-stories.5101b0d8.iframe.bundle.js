"use strict";(globalThis.webpackChunk_atomium_docs_react=globalThis.webpackChunk_atomium_docs_react||[]).push([[2023],{"../../packages/core/src/components/link/stories/link.react.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Button:()=>Button,Loading:()=>Loading,Primary:()=>Primary,Secondary:()=>Secondary,WithIcon:()=>WithIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>link_react_stories});var esm=__webpack_require__("../../packages/core/react/dist/esm/index.js");const LinkStoryArgs={parameters:{actions:{handles:[]},docs:{description:{component:"atom-link components are link children styled components. They are used to navigate to different pages (when used inside router components, such as router-link(Vue) and Link(Next)) or used to trigger user actions."}}},argTypes:{color:{control:"select",options:["primary","secondary"],defaultValue:{summary:"secondary"},description:"The link color."},type:{control:"select",options:["anchor","button"],defaultValue:{summary:"anchor"},description:"The atom-link type. Use anchor for navigation (combined with router-link or Link) and button for user actions."},loading:{control:"boolean",defaultValue:!1,description:"If `true`, the opacity of the link is reduced."},size:{control:"select",options:["small","medium","large"],defaultValue:{summary:"medium"},description:"The link typhography size."}}},LinkReactStoryArgs=JSON.parse(JSON.stringify(LinkStoryArgs));LinkReactStoryArgs.parameters.docs.description.component="atom-link components are link children styled components. They are used to navigate to different pages (when used inside Link(Next)) or used to trigger user actions.<br/><br/> OBS: Link (Next) component does not render a anchor tag by default, so you need to wrap it with a tag for semantic reasons. You can create a wrapper component on your project to do this.",LinkReactStoryArgs.argTypes.type.description="The atom-link type. Use anchor for navigation (combined with Link) and button for user actions.";const LinkVueStoryArgs=JSON.parse(JSON.stringify(LinkStoryArgs));LinkVueStoryArgs.parameters.docs.description.component="atom-link components are link children styled components. They are used to navigate to different pages (when used inside router-link or NuxtLink or used to trigger user actions.",LinkVueStoryArgs.argTypes.type.description="The atom-link type. Use anchor for navigation (combined with router-link or NuxtLink) and button for user actions.";const Link=({children})=>React.createElement(React.Fragment,null,children),link_react_stories={title:"Components/Link",component:esm.EV,...LinkReactStoryArgs},createLink=(args,textExample="It should be used inside Link (Next) component")=>React.createElement(Link,null,React.createElement("a",null,React.createElement(esm.EV,{color:args.color,type:args.type},textExample))),Primary={render:args=>createLink(args),args:{type:"anchor",color:"primary",loading:!1}},Secondary={render:args=>createLink(args),args:{...Primary.args,color:"secondary"}},Loading={render:args=>React.createElement(Link,null,React.createElement("a",null,React.createElement(esm.EV,{color:args.color,type:args.type,loading:!0},"Loading..."))),args:{...Primary.args}},WithIcon={render:args=>React.createElement(Link,null,React.createElement("a",null,React.createElement(esm.EV,{color:args.color,type:args.type},"Nice example with icon",React.createElement(esm.tm,{icon:"heart",color:"primary"})))),args:{...Primary.args}},Button={render:args=>React.createElement(esm.EV,{color:args.color,type:args.type},"It is a button! and can be used to trigger user actions"),args:{...Primary.args,type:"button"}},__namedExportsOrder=["Primary","Secondary","Loading","WithIcon","Button"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  render: args => createLink(args),\n  args: {\n    type: 'anchor',\n    color: 'primary',\n    loading: false\n  }\n}",...Primary.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"{\n  render: args => createLink(args),\n  args: {\n    ...Primary.args,\n    color: 'secondary'\n  }\n}",...Secondary.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:"{\n  render: args => <Link>\n      <a>\n        <AtomLink color={args.color} type={args.type} loading>\n          Loading...\n        </AtomLink>\n      </a>\n    </Link>,\n  args: {\n    ...Primary.args\n  }\n}",...Loading.parameters?.docs?.source}}},WithIcon.parameters={...WithIcon.parameters,docs:{...WithIcon.parameters?.docs,source:{originalSource:"{\n  render: args => <Link>\n      <a>\n        <AtomLink color={args.color} type={args.type}>\n          Nice example with icon\n          <AtomIcon icon='heart' color='primary' />\n        </AtomLink>\n      </a>\n    </Link>,\n  args: {\n    ...Primary.args\n  }\n}",...WithIcon.parameters?.docs?.source}}},Button.parameters={...Button.parameters,docs:{...Button.parameters?.docs,source:{originalSource:"{\n  render: args => <AtomLink color={args.color} type={args.type}>\n      It is a button! and can be used to trigger user actions\n    </AtomLink>,\n  args: {\n    ...Primary.args,\n    type: 'button'\n  }\n}",...Button.parameters?.docs?.source}}}}}]);