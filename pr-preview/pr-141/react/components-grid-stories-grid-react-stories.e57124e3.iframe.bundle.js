"use strict";(globalThis.webpackChunk_atomium_docs_react=globalThis.webpackChunk_atomium_docs_react||[]).push([[8192],{"../../packages/core/src/components/grid/stories/grid.react.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoSize:()=>AutoSize,Default:()=>Default,Offset:()=>Offset,PushAndPull:()=>PushAndPull,__namedExportsOrder:()=>__namedExportsOrder,default:()=>grid_react_stories});__webpack_require__("../../node_modules/react/index.js");var dist=__webpack_require__("../../packages/core/react/dist/index.js"),decorator=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/decorator.mjs"),table=__webpack_require__("../../utils/storybook/enums/table.ts");const GridStoryArgs={decorators:[decorator.R],parameters:{docs:{description:{component:"Wrapper of the **[Ionic Grid](https://ionicframework.com/docs/api/grid)** component. Read the Ionic documentation for more information about the available properties and possibilities.<br><br>In our custom implementation, we have simplified the Ionic grid system by introducing the `AtomGrid` component. This component acts as a wrapper for the grid, eliminating the need for using the `ion-row` component directly. Instead, we can directly use the `atom-grid` and `atom-col` components to create our grid layout. This approach streamlines the structure and usage of the grid system, making it more intuitive and efficient for developers.<br><br>The default number of columns in the grid is `16`, but this can be changed by setting the `--grid-columns` CSS custom property. The default gap between the columns is `var(--spacing-base)` and `var(--spacing-xs)` in small screens, but this can be changed by setting the `--grid-gap` CSS custom property."}}},argTypes:{fixed:{description:"If `true`, the Grid will be fixed and will have a consistent width based on the screen size.",defaultValue:{summary:!1},table:{category:table.W.PROPERTIES}},size:{description:"Columns can be set to specific sizes to take up a certain number out of the total number of columns, or resize their width based on the content, it accepts responsive values like `size-sm`, `size-md`, `size-lg`, `size-xl`",table:{category:table.W.PROPERTIES}},offset:{description:"Columns can be offset to the right by a certain number of columns, it accepts responsive values like `offset-sm`, `offset-md`, `offset-lg`, `offset-xl`",table:{category:table.W.PROPERTIES}},pull:{description:"Columns can be pulled to the left by a certain number of columns",table:{category:table.W.PROPERTIES}},push:{description:"Columns can be pushed to the right by a certain number of columns",table:{category:table.W.PROPERTIES}},"--grid-gap":{description:"Defines the space between the elements in a row of the Grid system. For screens below `medium` size, the gap value will be `var(--spacing-xsmall)`.",defaultValue:{summary:"var(--spacing-base)"},table:{category:table.W.CSS_CUSTOM_PROPERTIES}}}},GridCSS="\n  .col > div {\n    box-shadow:\n      0px 2px 1px -1px var(--color-neutral-light-3),\n      0px 1px 2px 0px var(--color-neutral-light-4),\n      0px 1px 3px 0px var(--color-neutral-light-4);\n    border-radius: var(--border-radius);\n    color: var(--color-neutral-light-2);\n    padding: var(--spacing-xsmall);\n    text-align: center;\n  }\n";var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const grid_react_stories={title:"Components/Grid",components:[dist.pV,dist.vr],...GridStoryArgs},Default={render:()=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)(dist.pV,{children:[(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"8",children:(0,jsx_runtime.jsx)("div",{children:"size=8"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"6",sizeMd:"4",children:(0,jsx_runtime.jsx)("div",{children:"size=6 & sizeMd=4"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"4",sizeMd:"4",children:(0,jsx_runtime.jsx)("div",{children:"size=4 & sizeMd=4"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"8",sizeMd:"6",children:(0,jsx_runtime.jsx)("div",{children:"size=8 & sizeMd=6"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"8",sizeMd:"10",children:(0,jsx_runtime.jsx)("div",{children:"size=8 & sizeMd=10"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"8",sizeMd:"10",children:(0,jsx_runtime.jsx)("div",{children:"size=8 & sizeMd=10"})}),(0,jsx_runtime.jsx)(dist.vr,{class:"col",size:"8",sizeMd:"6",children:(0,jsx_runtime.jsx)("div",{children:"size=8 & sizeMd=6"})})]}),(0,jsx_runtime.jsx)("style",{children:GridCSS})]})},AutoSize={render:()=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)(dist.pV,{children:[(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"auto",children:(0,jsx_runtime.jsx)("div",{children:"size=auto"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"auto",children:(0,jsx_runtime.jsx)("div",{children:"size=auto"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",children:(0,jsx_runtime.jsx)("div",{children:"default"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",children:(0,jsx_runtime.jsx)("div",{children:"default"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"auto",children:(0,jsx_runtime.jsx)("div",{children:"size=auto"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"auto",children:(0,jsx_runtime.jsx)("div",{children:"size=auto"})})]}),(0,jsx_runtime.jsx)("style",{children:GridCSS})]})},Offset={render:()=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("b",{children:"Column 2"})," has ",(0,jsx_runtime.jsx)("code",{children:"offset"})," set to ",(0,jsx_runtime.jsx)("code",{children:'"3"'})]}),(0,jsx_runtime.jsxs)(dist.pV,{children:[(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"3",children:(0,jsx_runtime.jsx)("div",{children:"1"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",offset:"3",children:(0,jsx_runtime.jsx)("div",{children:"2"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",children:(0,jsx_runtime.jsx)("div",{children:"3"})})]}),(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("b",{children:"Column 1"})," has ",(0,jsx_runtime.jsx)("code",{children:"offset"})," set to ",(0,jsx_runtime.jsx)("code",{children:'"4"'})]}),(0,jsx_runtime.jsxs)(dist.pV,{children:[(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"2",offset:"4",children:(0,jsx_runtime.jsx)("div",{children:"1"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",size:"2",children:(0,jsx_runtime.jsx)("div",{children:"2"})})]}),(0,jsx_runtime.jsx)("style",{children:GridCSS})]})},PushAndPull={render:()=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)("p",{children:[(0,jsx_runtime.jsx)("b",{children:"Column 1"})," has ",(0,jsx_runtime.jsx)("code",{children:"push"})," set to ",(0,jsx_runtime.jsx)("code",{children:'"4"'})," and",(0,jsx_runtime.jsx)("b",{children:"column 2"})," has ",(0,jsx_runtime.jsx)("code",{children:"pull"})," set to ",(0,jsx_runtime.jsx)("code",{children:'"4"'})]}),(0,jsx_runtime.jsxs)(dist.pV,{children:[(0,jsx_runtime.jsx)(dist.vr,{className:"col",push:"4",size:"4",children:(0,jsx_runtime.jsx)("div",{children:"1"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",pull:"4",size:"4",children:(0,jsx_runtime.jsx)("div",{children:"2"})}),(0,jsx_runtime.jsx)(dist.vr,{className:"col",children:(0,jsx_runtime.jsx)("div",{children:"3"})})]}),(0,jsx_runtime.jsx)("style",{children:GridCSS})]})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: () => <div>\n      <AtomGrid>\n        <AtomCol class="col" size="8">\n          <div>size=8</div>\n        </AtomCol>\n        <AtomCol class="col" size="6" sizeMd="4">\n          <div>size=6 & sizeMd=4</div>\n        </AtomCol>\n        <AtomCol class="col" size="4" sizeMd="4">\n          <div>size=4 & sizeMd=4</div>\n        </AtomCol>\n        <AtomCol class="col" size="8" sizeMd="6">\n          <div>size=8 & sizeMd=6</div>\n        </AtomCol>\n        <AtomCol class="col" size="8" sizeMd="10">\n          <div>size=8 & sizeMd=10</div>\n        </AtomCol>\n        <AtomCol class="col" size="8" sizeMd="10">\n          <div>size=8 & sizeMd=10</div>\n        </AtomCol>\n        <AtomCol class="col" size="8" sizeMd="6">\n          <div>size=8 & sizeMd=6</div>\n        </AtomCol>\n      </AtomGrid>\n\n      <style>{GridCSS}</style>\n    </div>\n}',...Default.parameters?.docs?.source}}},AutoSize.parameters={...AutoSize.parameters,docs:{...AutoSize.parameters?.docs,source:{originalSource:'{\n  render: () => <div>\n      <AtomGrid>\n        <AtomCol className="col" size="auto">\n          <div>size=auto</div>\n        </AtomCol>\n        <AtomCol className="col" size="auto">\n          <div>size=auto</div>\n        </AtomCol>\n        <AtomCol className="col">\n          <div>default</div>\n        </AtomCol>\n        <AtomCol className="col">\n          <div>default</div>\n        </AtomCol>\n        <AtomCol className="col" size="auto">\n          <div>size=auto</div>\n        </AtomCol>\n        <AtomCol className="col" size="auto">\n          <div>size=auto</div>\n        </AtomCol>\n      </AtomGrid>\n\n      <style>{GridCSS}</style>\n    </div>\n}',...AutoSize.parameters?.docs?.source}}},Offset.parameters={...Offset.parameters,docs:{...Offset.parameters?.docs,source:{originalSource:'{\n  render: () => <div>\n      <p>\n        <b>Column 2</b> has <code>offset</code> set to <code>"3"</code>\n      </p>\n      <AtomGrid>\n        <AtomCol className="col" size="3">\n          <div>1</div>\n        </AtomCol>\n        <AtomCol className="col" offset="3">\n          <div>2</div>\n        </AtomCol>\n        <AtomCol className="col">\n          <div>3</div>\n        </AtomCol>\n      </AtomGrid>\n\n      <p>\n        <b>Column 1</b> has <code>offset</code> set to <code>"4"</code>\n      </p>\n      <AtomGrid>\n        <AtomCol className="col" size="2" offset="4">\n          <div>1</div>\n        </AtomCol>\n        <AtomCol className="col" size="2">\n          <div>2</div>\n        </AtomCol>\n      </AtomGrid>\n\n      <style>{GridCSS}</style>\n    </div>\n}',...Offset.parameters?.docs?.source}}},PushAndPull.parameters={...PushAndPull.parameters,docs:{...PushAndPull.parameters?.docs,source:{originalSource:'{\n  render: () => <div>\n      <p>\n        <b>Column 1</b> has <code>push</code> set to <code>"4"</code> and\n        <b>column 2</b> has <code>pull</code> set to <code>"4"</code>\n      </p>\n\n      <AtomGrid>\n        <AtomCol className="col" push="4" size="4">\n          <div>1</div>\n        </AtomCol>\n        <AtomCol className="col" pull="4" size="4">\n          <div>2</div>\n        </AtomCol>\n        <AtomCol className="col">\n          <div>3</div>\n        </AtomCol>\n      </AtomGrid>\n\n      <style>{GridCSS}</style>\n    </div>\n}',...PushAndPull.parameters?.docs?.source}}};const __namedExportsOrder=["Default","AutoSize","Offset","PushAndPull"]}}]);